name: loteca_end2end

on:
  workflow_dispatch:
    inputs:
      rodada:
        description: "Identificador da rodada (ex: 2025-09-27_1213)"
        required: true
        type: string

env:
  RODADA: ${{ github.event.inputs.rodada }}
  WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
  THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
  RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}

jobs:
  end2end:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Hotfix merge (opcional)
        run: |
          python scripts/patch_merge_hotfix.py || true

      - name: Validar entrada (arquivo da rodada)
        run: |
          set -e
          echo "Entrada OK: data/in/${RODADA}/matches_source.csv"
          test -f "data/in/${RODADA}/matches_source.csv"

      # ‚úÖ Agora exige pelo menos 1 secret (TheOddsAPI OU RapidAPI)
      - name: Check provider secrets (at least one)
        run: |
          set -e
          has_any=0
          if [ -n "${THEODDS_API_KEY}" ]; then
            echo "THEODDS_API_KEY: OK"
            has_any=1
          else
            echo "THEODDS_API_KEY: (n√£o definido) ‚Äî TheOddsAPI ser√° pulado."
          fi
          if [ -n "${RAPIDAPI_KEY}" ]; then
            echo "RAPIDAPI_KEY: OK"
            has_any=1
          else
            echo "RAPIDAPI_KEY: (n√£o definido) ‚Äî API-Football/RapidAPI ser√° pulado."
          fi
          if [ "$has_any" -eq 0 ]; then
            echo "::error title=Nenhum provedor habilitado::Defina ao menos uma secret: THEODDS_API_KEY ou RAPIDAPI_KEY."
            exit 1
          fi

      - name: W&B login (opcional)
        run: |
          python -m wandb login "${WANDB_API_KEY}" --relogin || true
          echo "[wandb] login executado"

      # üîí TheOddsAPI: roda SOMENTE se houver chave; sen√£o, pula
      - name: Ingest TheOddsAPI (SAFE, conditional)
        run: |
          set -e
          if [ -n "${THEODDS_API_KEY}" ]; then
            python scripts/ingest_odds_theoddsapi_safe.py --rodada "$RODADA" --regions "uk,eu,us,au" --debug
          else
            echo "[theoddsapi-safe] SKIP: THEODDS_API_KEY ausente."
          fi

      # API-Football (RapidAPI) ‚Äì odds reais. S√≥ roda se tiver RAPIDAPI_KEY
      - name: Ingest RapidAPI (API-Football, conditional)
        run: |
          set -e
          if [ -n "${RAPIDAPI_KEY}" ]; then
            python scripts/ingest_odds_apifootball_rapidapi.py --rodada "$RODADA" --season 2025 --window 14 --fuzzy 0.9 --aliases "data/aliases_br.json" --debug || true
          else
            echo "[rapidapi] SKIP: RAPIDAPI_KEY ausente."
          fi

      # Consolida odds (sem simula√ß√£o). Falha se nenhum provedor entregou odds.
      - name: Build consensus odds
        run: |
          set -e
          python scripts/ingest_odds.py --rodada "$RODADA"
          OUT="data/out/$RODADA/odds.csv"
          echo "[consensus] Verificando odds em $OUT"
          test -f "$OUT"
          if [ "$(tail -n +2 "$OUT" | wc -l)" -lt 1 ]; then
            echo "::error title=Sem odds reais::Nenhuma odd encontrada nos provedores dispon√≠veis."
            exit 1
          fi

      - name: Join features
        run: |
          python scripts/join_features.py --rodada "$RODADA"

      - name: Compute xG
        run: |
          python scripts/compute_xg.py --rodada "$RODADA" --out "data/out/$RODADA/xg.csv"

      - name: Build probabilities (bivar)
        run: |
          if [ -f "data/out/$RODADA/preds_bivar.csv" ]; then
            echo "[build_probs] usando preds_bivar existente"
          fi
          python scripts/build_probs.py --rodada "$RODADA"

      - name: Blend probabilities
        run: |
          python scripts/blend_probs.py --rodada "$RODADA" --alpha 0.75 || true

      - name: Calibrate probabilities
        run: |
          python scripts/calibrate_probs.py --rodada "$RODADA" || true

      - name: Evaluate risk (fail se odds faltarem)
        run: |
          set -e
          python scripts/evaluate_risk.py --rodada "$RODADA"
          RR="data/out/$RODADA/risk_report.csv"
          test -f "$RR"
          if [ "$(tail -n +2 "$RR" | wc -l)" -lt 1 ]; then
            echo "::error title=Risk vazio::O relat√≥rio de risco n√£o gerou linhas. Verifique joins/ids."
            exit 1
          fi

      - name: Loteca picker
        run: |
          python scripts/loteca_picker.py --rodada "$RODADA" --duplos 4 --triplos 2 || true

      - name: Ingest news (opcional)
        run: |
          python scripts/ingest_news.py --rodada "$RODADA" --provider auto --lang pt --regions br --days 7 --limit 6 --aliases "data/aliases_br.json" || true

      - name: Scorecard (HTML)
        run: |
          python scripts/scorecard.py --rodada "$RODADA" --out "data/out/$RODADA/scorecard.html"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: loteca_${{ env.RODADA }}.zip
          path: |
            data/out/${{ env.RODADA }}/
            data/in/${{ env.RODADA }}/matches_source.csv
