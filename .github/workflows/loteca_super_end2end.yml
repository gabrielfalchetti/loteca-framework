name: loteca_super_end2end

on:
  workflow_dispatch:
    inputs:
      DEBUG:
        description: "Ativar modo debug (true/false)"
        required: false
        default: "false"
      ENABLE_ML:
        description: "Rodar etapas de xG / calibração / kelly / ticket (true/false)"
        required: false
        default: "false"

env:
  PYTHONUTF8: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1

  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  LOOKAHEAD_DAYS: "3"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"

  ALIASES_JSON: "data/aliases.json"

jobs:
  super-e2e:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # 1) Primeiro: checkout para não apagar pastas criadas depois
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Agora sim: preparar variáveis e diretórios
      - name: Preparar variáveis e diretórios
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          OUT_DIR="data/out/${RUN_ID}"
          export OUT_DIR

          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"

          if [ "${{ inputs.DEBUG }}" = "true" ] || [ "${{ inputs.DEBUG }}" = "1" ]; then
            echo "DEBUG_FLAG=--debug" >> "$GITHUB_ENV"
          else
            echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          fi

          mkdir -p "data/in" "${OUT_DIR}"
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      - name: Verificar segredos necessários (APIs obrigatórias)
        run: |
          set -euo pipefail
          miss=0
          if [ -z "${{ secrets.THEODDS_API_KEY }}" ]; then
            echo "::error::Secret THEODDS_API_KEY ausente"
            miss=1
          fi
          if [ -z "${{ secrets.X_RAPIDAPI_KEY }}" ]; then
            echo "::error::Secret X_RAPIDAPI_KEY ausente (RapidAPI / API-Football)"
            miss=1
          fi
          [ "$miss" -eq 0 ] || exit 2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências Python
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install \
            pandas numpy python-dateutil pytz requests \
            rapidfuzz unidecode beautifulsoup4 lxml

      - name: Normalizar whitelist (matches_source.csv -> matches_whitelist.csv)
        run: |
          set -euo pipefail

          SRC="data/in/matches_source.csv"
          DST_RAW="${OUT_DIR}/matches_whitelist_raw.csv"
          DST_NORM="${OUT_DIR}/matches_whitelist.csv"

          if [ ! -f "$SRC" ]; then
            echo "::error::Arquivo $SRC não encontrado."
            exit 3
          fi

          # Garante que a pasta do arquivo de saída exista (cinto e suspensório)
          mkdir -p "$(dirname "$DST_RAW")"

          tr -d '\r' < "$SRC" | sed -E 's/[[:space:]]+/ /g; s/ *, */,/g; s/^ //; s/ $//' > "$DST_RAW"

          header="$(head -n1 "$DST_RAW" || true)"
          h_low="$(echo "$header" | tr '[:upper:]' '[:lower:]')"
          for need in match_id home away; do
            echo "$h_low" | grep -qiE "(^|,)$need(,|$)" || { echo "::error::missing column '$need' in matches_source.csv"; exit 3; }
          done

          awk -F',' -v OFS=',' '
            function rmuf(s){ gsub(/\/[A-Za-z]{2}($|[^A-Za-z])/, "", s); return s }
            function deacc(s){
              gsub(/á|à|ã|â|ä/,"a",s); gsub(/Á|À|Ã|Â|Ä/,"A",s);
              gsub(/é|ê|è|ë/,"e",s);  gsub(/É|Ê|È|Ë/,"E",s);
              gsub(/í|î|ì|ï/,"i",s);  gsub(/Í|Î|Ì|Ï/,"I",s);
              gsub(/ó|ô|ò|õ|ö/,"o",s); gsub(/Ó|Ô|Ò|Õ|Ö/,"O",s);
              gsub(/ú|û|ù|ü/,"u",s);  gsub(/Ú|Û|Ù|Ü/,"U",s);
              gsub(/ç/,"c",s);        gsub(/Ç/,"C",s);
              gsub(/ñ/,"n",s);        gsub(/Ñ/,"N",s);
              return s
            }
            function trim(s){ sub(/^ +/,"",s); sub(/ +$/,"",s); return s }
            function map_pt_en(s,  l){
              l=tolower(s)
              if(l=="estonia") return "Estonia"
              if(l=="italia") return "Italy"
              if(l=="bulgaria") return "Bulgaria"
              if(l=="turquia") return "Turkey"
              if(l=="espanha") return "Spain"
              if(l=="georgia") return "Georgia"
              if(l=="servia" || l=="serbia/ser" || l=="serbia") return "Serbia"
              if(l=="albania") return "Albania"
              if(l=="portugal") return "Portugal"
              if(l=="irlanda") return "Ireland"
              if(l=="holanda" || l=="paises baixos") return "Netherlands"
              if(l=="finlandia") return "Finland"
              if(l=="romenia") return "Romania"
              if(l=="austria") return "Austria"
              if(l=="dinamarca") return "Denmark"
              if(l=="grecia") return "Greece"
              if(l=="lituania") return "Lithuania"
              if(l=="polonia") return "Poland"
              if(l=="ponte preta") return "Ponte Preta"
              if(l=="guarani") return "Guarani"
              if(l=="palmeiras") return "Palmeiras"
              if(l=="juventude") return "Juventude"
              if(l=="criciuma") return "Criciuma"
              if(l=="america/mg" || l=="america mg" || l=="america-mg" || l=="america mineiro") return "America Mineiro"
              if(l=="cuiaba") return "Cuiaba"
              if(l=="coritiba") return "Coritiba"
              if(l=="novorizontino" || l=="gremio novorizontino" || l=="grêmio novorizontino") return "Gremio Novorizontino"
              if(l=="operario" || l=="operario pr" || l=="operario/pr" || l=="operário/pr") return "Operario PR"
              return s
            }
            NR==1{
              for(i=1;i<=NF;i++){
                k=tolower($i);
                if(k=="match_id") mi=i;
                if(k=="home") hi=i;
                if(k=="away") ai=i;
              }
              if(!(mi&&hi&&ai)){ print "::error::header mapping failed"; exit 2 }
              print "match_id","home","away";
              next
            }
            {
              mid=$mi; home=$hi; away=$ai;
              home=rmuf(home); away=rmuf(away);
              home=deacc(home); away=deacc(away);
              home=trim(home); away=trim(away);
              home=map_pt_en(home); away=map_pt_en(away);
              if(mid=="" || home=="" || away==""){ print "::error::empty field on line " NR; exit 2 }
              if(seen[mid]++){ print "::error::duplicate match_id: " mid; exit 2 }
              print mid,home,away
            }
          ' "$DST_RAW" > "$DST_NORM"

          LINES=$(wc -l < "$DST_NORM" | tr -d " ")
          [ "$LINES" -ge 2 ] || { echo "::error::whitelist empty after normalization"; exit 3; }

          echo "===== Preview normalized whitelist ====="
          head -n 30 "$DST_NORM" || true

      - name: Ingest TheOddsAPI (obrigatório)
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      - name: Ingest API-Football (RapidAPI) — obrigatório
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py not found"; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      - name: Consenso de odds — modo estrito (obrigatório)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      # ===================== ETAPAS DE MODELAGEM (opcionais via ENABLE_ML) =====================

      - name: xG Univariado (opcional)
        if: ${{ inputs.ENABLE_ML == 'true' }}
        run: |
          set -euo pipefail
          if [ ! -f scripts/xg_univariate.py ]; then
            echo "::error::scripts/xg_univariate.py not found"
            exit 7
          fi
          python -m scripts.xg_univariate --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/xg_univariate.csv" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      - name: xG Bivariado (opcional)
        if: ${{ inputs.ENABLE_ML == 'true' }}
        run: |
          set -euo pipefail
          if [ ! -f scripts/xg_bivariate.py ]; then
            echo "::error::scripts/xg_bivariate.py not found"
            exit 8
          fi
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/xg_bivariate.csv" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      - name: Calibração de probabilidades (opcional)
        if: ${{ inputs.ENABLE_ML == 'true' }}
        run: |
          set -euo pipefail
          if [ ! -f scripts/prob_calibration.py ]; then
            echo "::error::scripts/prob_calibration.py not found"
            exit 9
          fi
          python -m scripts.prob_calibration --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/probs_calibrated.csv" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      - name: Kelly stake sizing (opcional)
        if: ${{ inputs.ENABLE_ML == 'true' }}
        run: |
          set -euo pipefail
          if [ ! -f scripts/kelly_sizing.py ]; then
            echo "::error::scripts/kelly_sizing.py not found"
            exit 10
          fi
          python -m scripts.kelly_sizing \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --top_n "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}" \
            ${DEBUG_FLAG}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv not generated"; exit 10; }

      - name: Montar cartão da Loteca (opcional)
        if: ${{ inputs.ENABLE_ML == 'true' }}
        run: |
          set -euo pipefail
          if [ ! -f scripts/build_loteca_ticket.py ]; then
            echo "::error::scripts/build_loteca_ticket.py not found"
            exit 11
          fi
          python -m scripts.build_loteca_ticket --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/loteca_ticket.csv" || { echo "::error::loteca_ticket.csv not generated"; exit 11; }