name: Loteca Super End-to-End

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Executa diariamente Ã  meia-noite UTC

jobs:
  loteca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: 13 Feature Engineer
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --tactics "data/history/tactics.json" \
            --out "${FEATURES_PARQUET}" \
            --ewma 0.20
          test -s "${FEATURES_PARQUET}" || { echo "::error::features.parquet not generated"; exit 2; }
      - name: 14 Enrich features with News
        run: |
          set -euo pipefail
          [ -f scripts/enrich_news.py ] || { echo "::error::scripts/enrich_news.py not found"; exit 2; }
          python -m scripts.enrich_news \
            --features_in "${FEATURES_PARQUET}" \
            --features_out "${FEATURES_PARQUET}" \
            --newsapi_key "${NEWSAPI_KEY}" \
            --matches_csv "${SOURCE_CSV_NORM}"
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
      - name: 15 Enrich features with Weather
        run: |
          set -euo pipefail
          [ -f scripts/enrich_weather.py ] || { echo "::error::scripts/enrich_weather.py not found"; exit 2; }
          python -m scripts.enrich_weather \
            --features_in "${FEATURES_PARQUET}" \
            --features_out "${FEATURES_PARQUET}" \
            --weatherapi_key "${WEATHERAPI_KEY}" \
            --matches_csv "${SOURCE_CSV_NORM}"
        env:
          WEATHERAPI_KEY: ${{ secrets.WEATHERAPI_KEY }}
      - name: 18 Normalize matches
        run: |
          set -euo pipefail
          [ -f scripts/normalize_matches.py ] || { echo "::error::scripts/normalize_matches.py not found"; exit 3; }
          python -m scripts.normalize_matches \
            --in_csv "${SOURCE_CSV}" \
            --out_csv "${SOURCE_CSV_NORM}"
      - name: 6 Ingest odds from TheOddsAPI
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 6; }
          python -m scripts.ingest_odds_theoddsapi \
            --rodada "${OUT_DIR}" \
            --source_csv "${SOURCE_CSV_NORM}" \
            --api_key "${THEODDS_API_KEY}" \
            --regions "${REGIONS}" \
            --aliases_file "${AUTO_ALIASES_JSON}" \
            --api_key_apifootball "${API_FOOTBALL_KEY}"
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      - name: 5 Ingest odds from API-Football
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball.py ] || { echo "::error::scripts/ingest_odds_apifootball.py not found"; exit 5; }
          python -m scripts.ingest_odds_apifootball \
            --rodada "${OUT_DIR}" \
            --source_csv "${SOURCE_CSV_NORM}" \
            --api_key "${API_FOOTBALL_KEY}" \
            --api_key_theodds "${THEODDS_API_KEY}" \
            --regions "${REGIONS}" \
            --aliases_file "${AUTO_ALIASES_JSON}"
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      - name: 7 Bivariate Estimator
        run: |
          set -euo pipefail
          [ -f scripts/bivariate_estimator.py ] || { echo "::error::scripts/bivariate_estimator.py not found"; exit 7; }
          python -m scripts.bivariate_estimator \
            --history "${FEATURES_PARQUET}" \
            --matches "${SOURCE_CSV_NORM}" \
            --out "${BIVARIATE_CSV}"
      - name: 8 Train Dynamic Model
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 8; }
          python -m scripts.train_dynamic_model \
            --features "${FEATURES_PARQUET}" \
            --out_state "${STATE_JSON}" \
            --out_model "${MODEL_PKL}"
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      - name: 9 Predict with Dynamic Model
        run: |
          set -euo pipefail
          [ -f scripts/predict_dynamic_model.py ] || { echo "::error::scripts/predict_dynamic_model.py not found"; exit 8; }
          python -m scripts.predict_dynamic_model \
            --model "${MODEL_PKL}" \
            --state "${STATE_JSON}" \
            --matches "${SOURCE_CSV_NORM}" \
            --out "${PREDICTIONS_CSV}"
      - name: 10 Train Calibrator
        if: ${{ env.TRAIN_CALIBRATOR == 'true' }}
        run: |
          set -euo pipefail
          [ -f scripts/calibrator_train.py ] || { echo "::error::scripts/calibrator_train.py not found"; exit 9; }
          python -m scripts.calibrator_train \
            --history "${FEATURES_PARQUET}" \
            --out "${CALIBRATOR_PKL}"
      - name: 11 Calibrate Probabilities
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs \
            --in "${PREDICTIONS_CSV}" \
            --cal "${CALIBRATOR_PKL}" \
            --out "${PREDICTIONS_CALIB_CSV}"
      - name: 12 Kelly Bets
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --probs "${PREDICTIONS_CALIB_CSV}" \
            --odds_source "${CONSENSUS_CSV}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --top_n "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}" \
            --out "${KELLY_BETS_CSV}"
      - name: 13 Make Loteca Card
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket \
            --rodada "${OUT_DIR}" \
            --triples 0 \
            --doubles 0
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: loteca-output
          path: data/out/
    env:
      SEASON: 2025
      LOOKAHEAD_DAYS: 3
      REGIONS: uk,eu,us,au
      BANKROLL: 1000
      KELLY_FRACTION: 0.5
      KELLY_CAP: 0.1
      KELLY_TOP_N: 14
      ROUND_TO: 1
      TRAIN_CALIBRATOR: true
      SOURCE_CSV: data/in/matches_source.csv
      OUT_DIR: data/out/${{ github.run_id }}
      FEATURES_PARQUET: data/history/features.parquet
      SOURCE_CSV_NORM: data/out/${{ github.run_id }}/matches_norm.csv
      AUTO_ALIASES_JSON: data/aliases/auto_aliases.json
      BIVARIATE_CSV: data/out/${{ github.run_id }}/bivariate.csv
      MODEL_PKL: data/out/${{ github.run_id }}/dynamic_model.pkl
      STATE_JSON: data/out/${{ github.run_id }}/state_params.json
      PREDICTIONS_CSV: data/out/${{ github.run_id }}/predictions.csv
      CALIBRATOR_PKL: data/out/${{ github.run_id }}/calibrator.pkl
      PREDICTIONS_CALIB_CSV: data/out/${{ github.run_id }}/predictions_calibrated.csv
      CONSENSUS_CSV: data/out/${{ github.run_id }}/odds_consensus.csv
      KELLY_BETS_CSV: data/out/${{ github.run_id }}/bets_kelly.csv
      LOTECA_CARD_CSV: data/out/${{ github.run_id }}/loteca_card.csv