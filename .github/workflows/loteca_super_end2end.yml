name: loteca_super_end2end

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/loteca_super_end2end.yml"
      - "scripts/**"
      - "data/in/**"
      - "requirements.txt"
  schedule:
    - cron: "0 12 * * *"  # 09:00-12:00 UTC, ajuste como quiser

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      SEASON: "2025"
      LOOKAHEAD_DAYS: "3"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      TRAIN_CALIBRATOR: "false"
      SOURCE_CSV: "data/in/matches_source.csv"
      OUT_DIR: "data/out/${{ github.run_id }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install requests pandas "pyarrow>=14" fastparquet

      - name: Check required secrets
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          [ -n "${API_FOOTBALL_KEY:-}" ] || { echo "::error::Configure o secret API_FOOTBALL_KEY (Settings > Secrets and variables > Actions)."; exit 1; }
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::Configure o secret THEODDS_API_KEY (Settings > Secrets and variables > Actions)."; exit 1; }

      - name: Prepare OUT_DIR + whitelist
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          if [ ! -s "${SOURCE_CSV}" ]; then
            echo "::error::Arquivo ${SOURCE_CSV} não encontrado ou vazio. Crie-o com cabeçalho: match_id,home,away"
            exit 2
          fi
          header="$(head -n1 "${SOURCE_CSV}" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' em ${SOURCE_CSV}"; exit 2; }
          done
          cp -f "${SOURCE_CSV}" "${OUT_DIR}/matches_whitelist.csv"

      - name: Resolver IDs e possíveis fixtures (API-Football) → matches_norm.csv
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        run: |
          set -euo pipefail
          python -m scripts.af_resolve_ids \
            --source "${SOURCE_CSV}" \
            --out "${OUT_DIR}/matches_norm.csv" \
            --horizon_days "${LOOKAHEAD_DAYS}"
          test -s "${OUT_DIR}/matches_norm.csv"

      - name: Update history (API-Football) + coerção de esquema
        env:
            API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/update_history.py ] || { echo "::error::scripts/update_history.py not found"; exit 1; }
          # tenta atualizar; se cair, seguimos pra coerção
          python -m scripts.update_history --since_days 14 --out "data/history/results.csv" || true

          python - <<'PY'
          import pandas as pd, os, sys
          p="data/history/results.csv"
          os.makedirs("data/history", exist_ok=True)
          if not os.path.exists(p) or os.stat(p).st_size==0:
              df=pd.DataFrame([{"date":"1970-01-01","home":"BOOT","away":"BOOT","home_goals":0,"away_goals":0}])
              df.to_csv(p,index=False); sys.exit(0)
          df=pd.read_csv(p)
          def pick(colnames):
              for c in colnames:
                  if c in df.columns: return c
              return None
          hg = pick(["home_goals","home_score","goals.home","teams.home.goals"])
          ag = pick(["away_goals","away_score","goals.away","teams.away.goals"])
          if hg is None: df["home_goals"]=0
          else: df["home_goals"]=df[hg]
          if ag is None: df["away_goals"]=0
          else: df["away_goals"]=df[ag]
          dcol = pick(["date","fixture.date","kickoff_utc"])
          hcol = pick(["home","teams.home.name"])
          acol = pick(["away","teams.away.name"])
          if "date" not in df.columns: df["date"]=df[dcol] if dcol else ""
          if "home" not in df.columns: df["home"]=df[hcol] if hcol else ""
          if "away" not in df.columns: df["away"]=df[acol] if acol else ""
          df[["date","home","away","home_goals","away_goals"]].to_csv(p,index=False)
          PY

          test -s "data/history/results.csv" || { echo "::error::history results.csv not generated"; exit 1; }

      - name: Feature engineer (gera features.parquet)
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --out "data/history/features.parquet" \
            --ewma 0.20
          test -s "data/history/features.parquet" || { echo "::error::features.parquet not generated"; exit 2; }

      - name: Ingest odds (TheOddsAPI) — obrigatório
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          python -m scripts.ingest_odds_theoddsapi \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --source_csv "${OUT_DIR}/matches_norm.csv"
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }

      - name: Ingest odds (API-Football) — opcional
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        run: |
          set -euo pipefail
          if [ -f scripts/ingest_odds_apifootball.py ]; then
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --source_csv "${OUT_DIR}/matches_norm.csv" || true
            [ -s "${OUT_DIR}/odds_apifootball.csv" ] || echo "::notice::odds_apifootball.csv não gerado (ok)"
          else
            echo "::notice::scripts/ingest_odds_apifootball.py ausente (ok)"
          fi

      - name: Consenso de odds (STRICT)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      - name: List outputs (debug)
        run: |
          set -e
          ls -lah "${OUT_DIR}"
          echo "--- matches_norm.csv (top 10)"
          sed -n '1,10p' "${OUT_DIR}/matches_norm.csv" || true
          echo "--- odds_theoddsapi.csv (top 10)"
          sed -n '1,10p' "${OUT_DIR}/odds_theoddsapi.csv" || true
          echo "--- odds_consensus.csv (top 10)"
          sed -n '1,10p' "${OUT_DIR}/odds_consensus.csv" || true