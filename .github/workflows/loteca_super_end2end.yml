name: loteca-super-end2end

on:
  workflow_dispatch:
  schedule:
    - cron: "0 12 * * 4"  # quinta 12:00 UTC

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      SEASON: "2025"
      LOOKAHEAD_DAYS: "3"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      ALIASES_JSON: "data/aliases.json"

      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      THEODDS_API_KEY:  ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY:   ${{ secrets.X_RAPIDAPI_KEY }}

      PYTHONUTF8: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_WARN_SCRIPT_LOCATION: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pandas requests python-dateutil unidecode

      - name: Inicializar RUN_ID e OUT_DIR
        id: init
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" >> "$GITHUB_ENV"
          echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          mkdir -p "data/in" "data/out/${RUN_ID}"
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=data/out/${RUN_ID}"

      - name: Validar/Sanitizar aliases.json (tolerante)
        run: |
          set -euo pipefail
          if [ -f "${ALIASES_JSON}" ]; then
            python - <<'PY'
import json, os, re, sys
p = os.environ.get("ALIASES_JSON")
raw = open(p, 'r', encoding='utf-8').read()
# remove BOM
raw = raw.lstrip('\ufeff')
# remove /* ... */ comments
raw = re.sub(r'/\*.*?\*/', '', raw, flags=re.S)
# strip // comments (keep content before //)
raw = '\n'.join([line.split('//',1)[0] for line in raw.splitlines()])
# remove trailing commas before ] or }
raw = re.sub(r',(\s*[}\]])', r'\1', raw)
try:
    data = json.loads(raw)
except Exception as e:
    print(f"::warning::aliases.json inválido ({e}); desabilitando aliases nesta run.")
    # limpar var de ambiente para próximos passos
    with open(os.environ["GITHUB_ENV"], "a") as f:
        f.write("ALIASES_JSON=\n")
    sys.exit(0)
# regravar já saneado
open(p, 'w', encoding='utf-8').write(json.dumps(data, ensure_ascii=False, indent=2))
print("[ok] aliases.json validado/sanitizado")
PY
          else
            echo "::notice::Sem aliases.json — normalizacao automatica sera usada."
          fi

      # ===================== INGESTOES =====================
      - name: Ingestao — API-Football (direto)
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball.py ] || { echo "::error::scripts/ingest_odds_apifootball.py not found"; exit 5; }

          ALIASES_ARG=""
          if [ -n "${ALIASES_JSON:-}" ] && [ -f "${ALIASES_JSON}" ]; then
            ALIASES_ARG="--aliases ${ALIASES_JSON}"
          fi

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${ALIASES_ARG} \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          if [ -s "$OUT" ]; then
            header="$(head -n1 "$OUT" | tr -d '\r')"
            for c in match_id home away odds_home odds_draw odds_away; do
              echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
            done
          else
            echo "::warning::odds_apifootball.csv não gerado — seguira sem esta fonte."
          fi

      - name: Ingestao — TheOddsAPI
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }

          ALIASES_ARG=""
          if [ -n "${ALIASES_JSON:-}" ] && [ -f "${ALIASES_JSON}" ]; then
            ALIASES_ARG="--aliases ${ALIASES_JSON}"
          fi

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              ${ALIASES_ARG} \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          if [ -s "$OUT" ]; then
            header="$(head -n1 "$OUT" | tr -d '\r')"
            for c in match_id home away odds_home odds_draw odds_away; do
              echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
            done
          else
            echo "::warning::odds_theoddsapi.csv não gerado — seguira sem esta fonte."
          fi

      # ===================== CONSENSO =====================
      - name: Consenso de odds (nao-estrito)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }

          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}"
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }

          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      # ===================== xG OBRIGATORIOS =====================
      - name: xG Univariate (obrigatorio)
        run: |
          set -euo pipefail
          [ -f scripts/xg_univariate.py ] || { echo "::error::scripts/xg_univariate.py not found"; exit 7; }
          python -m scripts.xg_univariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_univariate.csv"
          test -s "$OUT" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      - name: xG Bivariate (obrigatorio)
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 8; }
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_bivariate.csv"
          test -s "$OUT" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      # ===================== CALIBRACAO & KELLY =====================
      - name: Calibrar probabilidades
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/probs_calibrated.csv"
          test -s "$OUT" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      - name: Kelly bets
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}"
          OUT="${OUT_DIR}/kelly_stakes.csv"
          test -s "$OUT" || { echo "::error::kelly_stakes.csv not generated"; exit 10; }

      # ===================== TICKET =====================
      - name: Gerar ticket Loteca (3 triplos, 5 duplos)
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}" --triplos 3 --duplos 5
          OUT="${OUT_DIR}/loteca_ticket.csv"
          test -s "$OUT" || { echo "::error::loteca_ticket.csv not generated"; exit 11; }

      - name: Publicar artefatos
        uses: actions/upload-artifact@v4
        with:
          name: rodada-${{ steps.init.outputs.RUN_ID }}
          path: |
            ${{ env.OUT_DIR }}/*.csv
            ${{ env.OUT_DIR }}/*.json
          if-no-files-found: warn