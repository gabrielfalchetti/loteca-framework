name: Loteca Super End-to-End (Gold, Standard)

on:
  workflow_dispatch:
  schedule:
    - cron: "15 12 * * 4"  # quinta 12:15 UTC (ajuste se quiser)

permissions:
  contents: read

env:
  SEASON: "2025"
  LOOKAHEAD_DAYS: "3"
  REGIONS: "uk,eu,us,au"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  TRAIN_CALIBRATOR: "false"          # troque para "true" quando quiser retreinar
  SOURCE_CSV: "data/in/matches_source.csv"

jobs:
  loteca_e2e:
    runs-on: ubuntu-latest
    concurrency:
      group: loteca-e2e-${{ github.ref }}
      cancel-in-progress: false

    env:
      # Secrets mapeados aqui valem para TODO o job
      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      THEODDS_API_KEY:  ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY:   ${{ secrets.X_RAPIDAPI_KEY }}
      WANDB_API_KEY:    ${{ secrets.WANDB_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install --upgrade \
            pandas numpy scipy scikit-learn statsmodels \
            pyarrow fastparquet unidecode requests python-dateutil \
            matplotlib

      - name: Define OUT_DIR (por execução)
        run: |
          set -euo pipefail
          OUT="data/out/${GITHUB_RUN_ID}"
          echo "OUT_DIR=$OUT" >> "$GITHUB_ENV"
          echo "SOURCE_CSV_NORM=$OUT/matches_norm.csv" >> "$GITHUB_ENV"
          mkdir -p "$OUT"

      # -----------------------------
      # 1) HISTÓRICO & FEATURES
      # -----------------------------
      - name: Update history (API-Sports) com fallback stub
        run: |
          set -euo pipefail
          [ -f scripts/update_history.py ] || { echo "::error::scripts/update_history.py not found"; exit 1; }
          if ! python -m scripts.update_history --since_days 14 --out "data/history/results.csv"; then
            echo "::notice::update_history falhou; criando stub neutro..."
            mkdir -p data/history
            printf "date,home,away,home_goals,away_goals\n1970-01-01,BOOT,BOOT,0,0\n" > data/history/results.csv
          fi
          header="$(head -n1 data/history/results.csv | tr -d '\r')"
          for c in date home away home_goals away_goals; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::history sem coluna '$c'"; exit 1; }
          done
          test -s "data/history/results.csv" || { echo "::error::history results.csv not generated"; exit 1; }

      - name: Feature engineering (EWMA etc.)
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --out "data/history/features.parquet" \
            --ewma 0.20
          test -s "data/history/features.parquet" || { echo "::error::features.parquet not generated"; exit 2; }

      - name: Enrich features with API-Football (IDs, ratings, h2h, injuries)
        run: |
          set -euo pipefail
          [ -n "${API_FOOTBALL_KEY:-}" ] || { echo "::error::API_FOOTBALL_KEY ausente"; exit 2; }
          [ -f scripts/enrich_features_apifootball.py ] || { echo "::error::scripts/enrich_features_apifootball.py not found"; exit 2; }
          python -m scripts.enrich_features_apifootball \
            --in_parquet "data/history/features.parquet" \
            --out_parquet "${OUT_DIR}/features_ext.parquet"
          test -s "${OUT_DIR}/features_ext.parquet" || { echo "::error::features_ext.parquet not generated"; exit 2; }

      # -----------------------------
      # 2) TREINOS (MODELO & CALIBRADOR)
      # -----------------------------
      - name: Train Dynamic Model (Filtro de Kalman / GAS)
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 3; }
          INP="${OUT_DIR}/features_ext.parquet"
          [ -s "$INP" ] || INP="data/history/features.parquet"
          python -m scripts.train_dynamic_model \
            --features "$INP" \
            --out_state "${OUT_DIR}/state_params.json" \
            --out_model "${OUT_DIR}/dyn_model.pkl"
          test -s "${OUT_DIR}/state_params.json" || { echo "::error::state_params.json not generated"; exit 3; }

      - name: (Opcional) Train Calibrator (Isotonic/Platt)
        if: env.TRAIN_CALIBRATOR == 'true'
        run: |
          set -euo pipefail
          [ -f scripts/train_calibrator.py ] || { echo "::error::scripts/train_calibrator.py not found"; exit 3; }
          python -m scripts.train_calibrator \
            --history "data/history/results.csv" \
            --out_model "${OUT_DIR}/calibrator.pkl"
          test -s "${OUT_DIR}/calibrator.pkl" || { echo "::error::calibrator.pkl not generated"; exit 3; }

      # -----------------------------
      # 3) PREPARAÇÃO DOS JOGOS FUTUROS
      # -----------------------------
      - name: Normalize matches (PT/EN + aliases BR)
        run: |
          set -euo pipefail
          [ -f scripts/normalize_matches.py ] || { echo "::error::scripts/normalize_matches.py not found"; exit 3; }
          [ -s "${SOURCE_CSV}" ] || { echo "::error::Arquivo ${SOURCE_CSV} não encontrado ou vazio. Crie-o com cabeçalho: match_id,home,away"; exit 4; }
          header="$(head -n1 "${SOURCE_CSV}" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' em ${SOURCE_CSV}"; exit 4; }
          done
          python -m scripts.normalize_matches \
            --in_csv  "${SOURCE_CSV}" \
            --out_csv "${SOURCE_CSV_NORM}"
          test -s "${SOURCE_CSV_NORM}" || { echo "::error::matches_norm.csv not generated"; exit 3; }
          cp -f "${SOURCE_CSV_NORM}" "${OUT_DIR}/matches_whitelist.csv"

      - name: Ingest odds — TheOddsAPI (OBRIGATÓRIO)
        run: |
          set -euo pipefail
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::THEODDS_API_KEY ausente"; exit 5; }
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          python -m scripts.ingest_odds_theoddsapi \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --source_csv "${SOURCE_CSV_NORM}"
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }

      - name: Ingest fixtures/aux — API-Football (IDs e sanity)
        run: |
          set -euo pipefail
          [ -n "${API_FOOTBALL_KEY:-}" ] || { echo "::error::API_FOOTBALL_KEY ausente"; exit 5; }
          if [ -f scripts/ingest_odds_apifootball.py ]; then
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --source_csv "${SOURCE_CSV_NORM}" || true
          fi

      - name: Consensus odds (STRICT)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      # -----------------------------
      # 4) PREVISÃO & CALIBRAÇÃO
      # -----------------------------
      - name: xG bivariado (usa state_params.json)
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 7; }
          [ -s "${OUT_DIR}/state_params.json" ] || { echo "::error::state_params.json não encontrado"; exit 7; }
          python -m scripts.xg_bivariate \
            --rodada "${OUT_DIR}" \
            --state  "${OUT_DIR}/state_params.json" \
            --consensus "${OUT_DIR}/odds_consensus.csv" \
            --out    "${OUT_DIR}/pred_xg.csv"
          test -s "${OUT_DIR}/pred_xg.csv" || { echo "::error::pred_xg.csv not generated"; exit 7; }

      - name: Calibrate probabilities (Isotonic/Platt)
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 7; }
          CAL="${OUT_DIR}/calibrator.pkl"
          if [ ! -s "$CAL" ]; then CAL="models/calibrator.pkl"; fi
          [ -s "$CAL" ] || { echo "::error::calibrator.pkl não encontrado (treine com TRAIN_CALIBRATOR=true ou adicione em models/)"; exit 7; }
          python -m scripts.calibrate_probs \
            --in      "${OUT_DIR}/pred_xg.csv" \
            --cal     "$CAL" \
            --out     "${OUT_DIR}/probs_calibrated.csv"
          test -s "${OUT_DIR}/probs_calibrated.csv" || { echo "::error::probs_calibrated.csv not generated"; exit 7; }

      # -----------------------------
      # 5) APOSTA & CARTÃO LOTECA
      # -----------------------------
      - name: Kelly bets
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 8; }
          python -m scripts.kelly_bets \
            --probs     "${OUT_DIR}/probs_calibrated.csv" \
            --bankroll  "${BANKROLL}" \
            --fraction  "${KELLY_FRACTION}" \
            --cap       "${KELLY_CAP}" \
            --top_n     "${KELLY_TOP_N}" \
            --round_to  "${ROUND_TO}" \
            --out       "${OUT_DIR}/kelly.csv"
          test -s "${OUT_DIR}/kelly.csv" || { echo "::error::kelly.csv not generated"; exit 8; }

      - name: Montar Cartão Loteca
        run: |
          set -euo pipefail
          [ -f scripts/build_loteca_card.py ] || { echo "::error::scripts/build_loteca_card.py not found"; exit 9; }
          python -m scripts.build_loteca_card \
            --kelly     "${OUT_DIR}/kelly.csv" \
            --consensus "${OUT_DIR}/odds_consensus.csv" \
            --matches   "${SOURCE_CSV_NORM}" \
            --out       "${OUT_DIR}/cartao_loteca.csv"
          test -s "${OUT_DIR}/cartao_loteca.csv" || { echo "::error::cartao_loteca.csv not generated"; exit 9; }

      - name: Upload artefatos (rodada)
        uses: actions/upload-artifact@v4
        with:
          name: loteca_${{ github.run_id }}
          path: |
            ${{ env.OUT_DIR }}/
            data/history/results.csv
            data/history/features.parquet