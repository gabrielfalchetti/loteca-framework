name: Loteca - Super End2End

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  super-end2end:
    runs-on: ubuntu-latest

    env:
      # A variável SEASON não é mais usada pelos scripts de ingestão, mas pode ser mantida
      SEASON: "2025" 
      LOOKAHEAD_DAYS: "3"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      # O ALIASES_JSON não é mais usado na ingestão, mas pode ser útil no futuro
      ALIASES_JSON: "data/aliases.json"
      # Arquivo de origem para os jogos da Loteca
      SOURCE_CSV: "data/in/matches_sources.csv"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pandas numpy requests python-dateutil unidecode scikit-learn joblib

      - name: Preparar diretórios e variáveis da rodada
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          OUT_DIR="data/out/${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}"
          mkdir -p models/calibration

      # ======================
      # INGESTÃO DE ODDS — API-FOOTBALL (PASSO 1)
      # ======================
      - name: Ingestão API-FOOTBALL (Direcionada pelo CSV)
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          # CORREÇÃO: Argumento --aliases removido, pois o script não o usa mais.
          # Adicionado --source_csv para apontar para o arquivo de jogos.
          python -m scripts.ingest_odds_apifootball --rodada "${OUT_DIR}" --source_csv "${SOURCE_CSV}"

      # ======================
      # INGESTÃO DE ODDS — THEODDSAPI (PASSO 2)
      # ======================
      - name: Ingestão TheOddsAPI (Direcionada pelo CSV)
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          # CORREÇÃO: Argumento --aliases removido.
          python -m scripts.ingest_odds_theoddsapi --rodada "${OUT_DIR}" --regions "${REGIONS}" --source_csv "${SOURCE_CSV}"

      # ======================
      # PREPARAR WHITELIST (PASSO 3)
      # ======================
      - name: Preparar whitelist a partir dos dados ingeridos
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.prepare_whitelist --rodada "${OUT_DIR}"
          WL="${OUT_DIR}/matches_whitelist.csv"
          # O erro aqui agora é crítico, pois se a whitelist não for gerada, nada mais funciona.
          test -s "$WL" || { echo "::error::Whitelist não foi gerada (nenhum jogo encontrado nas APIs)."; exit 6; }

      # ======================
      # CONSENSO DE ODDS (PASSO 4)
      # ======================
      - name: Consenso de odds (estrito)
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado (sem jogos em comum entre as fontes)."; exit 6; }
          head -n 20 "$OUT_FILE" || true

      # O restante do pipeline permanece inalterado...

      - name: Treinar Modelo Dinâmico
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.train_dynamic_model --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/dynamic_params.json"
          test -s "$OUT" || { echo "::error::dynamic_params.json not generated"; exit 12; }

      - name: xG Bivariate
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_bivariate.csv"
          test -s "$OUT" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      - name: Calibrar probabilidades
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/probs_calibrated.csv"
          test -s "$OUT" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      - name: Gerar stakes (Kelly)
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}"
          OUT="${OUT_DIR}/kelly_stakes.csv"
          test -s "$OUT" || echo "::warning::Nenhuma aposta gerada (kelly_stakes.csv vazio)."

      - name: Montar ticket Loteca
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/loteca_ticket.csv"
          test -s "$OUT" || echo "::warning::Ticket da Loteca não gerado."

      - name: Publicar artefatos da rodada
        uses: actions/upload-artifact@v4
        with:
          name: loteca_${{ steps.prep.outputs.RUN_ID }}
          path: |
            ${{ env.OUT_DIR }}/*.csv
            ${{ env.OUT_DIR }}/*.json
            ${{ env.OUT_DIR }}/*.txt
          if-no-files-found: error
