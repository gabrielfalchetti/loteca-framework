name: Loteca Super End2End

on:
  workflow_dispatch:
  schedule:
    - cron: "15 12 * * *"

permissions:
  contents: read

jobs:
  super:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      SEASON: "2025"
      LOOKAHEAD_DAYS: "3"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.10"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      TRAIN_CALIBRATOR: "true"
      SOURCE_CSV: "data/in/matches_source.csv"
      THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      WANDB_DISABLED: "true"

    steps:
      - name: 00 Checkout
        uses: actions/checkout@v4

      - name: 01 Prepare .gitignore (seguranÃ§a)
        run: |
          set -euo pipefail
          echo "data/history/results.csv" >> .gitignore
          echo "data/history/features.parquet" >> .gitignore
          echo "*.pkl" >> .gitignore
          echo "__pycache__/" >> .gitignore

      - name: 02 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 03 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: 04 Install Python deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install --upgrade pandas numpy requests python-dateutil unidecode rapidfuzz pyarrow scikit-learn pyyaml pytest pykalman statsmodels torch huggingface_hub

      - name: 05 Install jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: 06 Validate secrets
        run: |
          set -euo pipefail
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::Missing THEODDS_API_KEY secret"; exit 1; }
          [ -n "${API_FOOTBALL_KEY:-}" ] || { echo "::error::Missing API_FOOTBALL_KEY secret"; exit 1; }

      - name: 07 Prepare data folders
        run: |
          set -euo pipefail
          mkdir -p data/history data/in data/out data/aliases models
          [ -s "data/aliases/team_aliases.json" ] || echo "{}" > data/aliases/team_aliases.json
          if [ ! -s "${SOURCE_CSV}" ]; then
            echo "::error::Missing ${SOURCE_CSV}. Provide real upcoming matches."
            exit 1
          fi

      - name: 08 Define run variables
        run: |
          set -euo pipefail
          OUT_DIR="data/out/${GITHUB_RUN_ID}"
          mkdir -p "${OUT_DIR}"
          {
            echo "OUT_DIR=${OUT_DIR}"
            echo "FEATURES_PARQUET=data/history/features.parquet"
            echo "SOURCE_CSV_NORM=${OUT_DIR}/matches_norm.csv"
            echo "AUTO_ALIASES_JSON=data/aliases/auto_aliases.json"
            echo "BIVARIATE_CSV=${OUT_DIR}/bivariate.csv"
            echo "MODEL_PKL=${OUT_DIR}/dynamic_model.pkl"
            echo "STATE_JSON=${OUT_DIR}/state_params.json"
            echo "PREDICTIONS_CSV=${OUT_DIR}/predictions.csv"
            echo "CALIBRATOR_PKL=${OUT_DIR}/calibrator.pkl"
            echo "PREDICTIONS_CALIB_CSV=${OUT_DIR}/predictions_calibrated.csv"
            echo "CONSENSUS_CSV=${OUT_DIR}/odds_consensus.csv"
            echo "KELLY_BETS_CSV=${OUT_DIR}/bets_kelly.csv"
            echo "LOTECA_CARD_CSV=${OUT_DIR}/loteca_card.csv"
          } >> "$GITHUB_ENV"

      - name: 09 Update history
        run: |
          set -euo pipefail
          [ -f scripts/update_history.py ] || { echo "::error::scripts/update_history.py not found"; exit 1; }
          python -m scripts.update_history --since_days 30 --out "data/history/results.csv"
          [ -s "data/history/results.csv" ] || { echo "::error::results.csv empty"; exit 1; }

      - name: 10 Update Tactics with LLM
        run: |
          set -euo pipefail
          [ -f scripts/update_tactics.py ] || { echo "::error::scripts/update_tactics.py not found"; exit 1; }
          python -m scripts.update_tactics --history "data/history/results.csv" --out "data/history/tactics.json"

      - name: 11 Verify Historical Data
        run: |
          set -euo pipefail
          [ -f scripts/verify_data.py ] || { echo "::error::scripts/verify_data.py not found"; exit 1; }
          python -m scripts.verify_data --history "data/history/results.csv"

      - name: 12 Feature engineering
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --tactics "data/history/tactics.json" \
            --out "${FEATURES_PARQUET}" \
            --ewma 0.20
          test -s "${FEATURES_PARQUET}" || { echo "::error::features.parquet not generated"; exit 2; }

      - name: 13 Enrich features API Football
        run: |
          set -euo pipefail
          [ -f scripts/enrich_api_football.py ] || { echo "::error::scripts/enrich_api_football.py not found"; exit 2; }
          python -m scripts.enrich_api_football --features_in "${FEATURES_PARQUET}" --features_out "${FEATURES_PARQUET}"

      - name: 14 Run Unit Tests
        run: pytest --verbose scripts/

      - name: 15 Train dynamic model
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 2; }
          python -m scripts.train_dynamic_model \
            --features "${FEATURES_PARQUET}" \
            --out_state "${STATE_JSON}" \
            --out_model "${MODEL_PKL}"
          test -s "${STATE_JSON}" || { echo "::error::state_params.json not generated"; exit 2; }
          test -s "${MODEL_PKL}" || { echo "::error::dynamic_model.pkl not generated"; exit 2; }

      - name: 16 Normalize matches
        run: |
          set -euo pipefail
          [ -f scripts/normalize_matches.py ] || { echo "::error::scripts/normalize_matches.py not found"; exit 3; }
          python -m scripts.normalize_matches --in_csv "${SOURCE_CSV}" --out_csv "${SOURCE_CSV_NORM}"
          test -s "${SOURCE_CSV_NORM}" || { echo "::error::matches_norm.csv not generated"; exit 3; }

      - name: 17 Auto aliases harvest
        run: |
          set -euo pipefail
          [ -f scripts/harvest_aliases.py ] || { echo "::error::scripts/harvest_aliases.py not found"; exit 3; }
          python -m scripts.harvest_aliases --source_csv "${SOURCE_CSV_NORM}" --lookahead_hours 72 --out_json "${AUTO_ALIASES_JSON}"
          test -s "${AUTO_ALIASES_JSON}" || { echo "::error::auto_aliases.json empty"; exit 3; }

      - name: 18 Preflight TheOddsAPI Serie A
        run: |
          set -euo pipefail
          API="${THEODDS_API_KEY}"
          REG="${REGIONS}"
          URL="https://api.the-odds-api.com/v4/sports/soccer_brazil_campeonato/odds?regions=${REG}&markets=h2h&dateFormat=iso&oddsFormat=decimal&apiKey=${API}"
          CNT="$(curl -sS --max-time 25 "${URL}" | jq 'length')"
          echo "[preflight] Serie A events=${CNT}"

      - name: 19 Ingest TheOddsAPI primary
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          python -m scripts.ingest_odds_theoddsapi --rodada "${OUT_DIR}" --regions "${REGIONS}" --source_csv "${SOURCE_CSV_NORM}"

      - name: 20 Fallback direct fetch if empty
        run: |
          set -euo pipefail
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          L=0; [ -s "$OUT" ] && L="$(wc -l < "$OUT" | tr -d ' ')"
          if [ "$L" -le 1 ]; then
            API="${THEODDS_API_KEY}"
            REG="${REGIONS}"
            F1="$(mktemp)"; F2="$(mktemp)"; TMP="$(mktemp)"
            curl -sS --max-time 25 "https://api.the-odds-api.com/v4/sports/soccer_brazil_campeonato/odds?regions=${REG}&markets=h2h&dateFormat=iso&oddsFormat=decimal&apiKey=${API}" > "${F1}"
            curl -sS --max-time 25 "https://api.the-odds-api.com/v4/sports/soccer_brazil_serie_b/odds?regions=${REG}&markets=h2h&dateFormat=iso&oddsFormat=decimal&apiKey=${API}" > "${F2}"
            jq -s 'add' "${F1}" "${F2}" > "${TMP}"
            {
              echo "team_home,team_away,odds_home,odds_draw,odds_away"
              jq -r '
                .[] as $ev
                | $ev.home_team as $h
                | $ev.away_team as $a
                | ([ $ev.bookmakers[].markets[] | select(.key=="h2h") | .outcomes[] | select(.name==$h) | .price ] | max?) as $oh
                | ([ $ev.bookmakers[].markets[] | select(.key=="h2h") | .outcomes[] | select(.name=="Draw") | .price ] | max?) as $od
                | ([ $ev.bookmakers[].markets[] | select(.key=="h2h") | .outcomes[] | select(.name==$a) | .price ] | max?) as $oa
                | select($oh and $od and $oa)
                | [$h, $a, ($oh|tostring), ($od|tostring), ($oa|tostring)]
                | @csv
              ' "${TMP}"
            } > "${OUT}"
            echo "[fallback] wrote ${OUT} rows=$(($(wc -l < "${OUT}") - 1))"
          fi
          [ -s "$OUT" ] && [ "$(wc -l < "$OUT" | tr -d ' ')" -gt 1 ] || { echo "::error::No odds from TheOddsAPI (primary and fallback)"; exit 5; }

      - name: 21 Ingest API Football complementary
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball.py ] || { echo "::error::scripts/ingest_odds_apifootball.py not found"; exit 5; }
          python -m scripts.ingest_odds_apifootball --rodada "${OUT_DIR}" --source_csv "${SOURCE_CSV_NORM}"

      - name: 22 Consensus odds
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict || true
          OUT_FILE="${CONSENSUS_CSV}"
          if [ ! -s "${OUT_FILE}" ]; then
            cp "${OUT_DIR}/odds_theoddsapi.csv" "${OUT_FILE}"
            echo "::notice::Consensus used only TheOddsAPI"
          fi
          header="$(head -n1 "${OUT_FILE}" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "${header}" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      - name: 23 Bivariate estimator
        run: |
          set -euo pipefail
          [ -f scripts/bivariate_estimator.py ] || { echo "::error::scripts/bivariate_estimator.py not found"; exit 7; }
          python -m scripts.bivariate_estimator --history "${FEATURES_PARQUET}" --matches "${SOURCE_CSV_NORM}" --out "${BIVARIATE_CSV}"
          test -s "${BIVARIATE_CSV}" || { echo "::error::bivariate.csv not generated"; exit 7; }

      - name: 24 Predict with dynamic model
        run: |
          set -euo pipefail
          [ -f scripts/predict_dynamic_model.py ] || { echo "::error::scripts/predict_dynamic_model.py not found"; exit 8; }
          python -m scripts.predict_dynamic_model --model "${MODEL_PKL}" --state "${STATE_JSON}" --matches "${SOURCE_CSV_NORM}" --out "${PREDICTIONS_CSV}"
          test -s "${PREDICTIONS_CSV}" || { echo "::error::predictions.csv not generated"; exit 8; }

      - name: 25 Train calibrator
        run: |
          set -euo pipefail
          [ -f scripts/calibrator_train.py ] || { echo "::error::scripts/calibrator_train.py not found"; exit 9; }
          python -m scripts.calibrator_train --history "${FEATURES_PARQUET}" --out "${CALIBRATOR_PKL}"
          test -s "${CALIBRATOR_PKL}" || { echo "::error::calibrator.pkl not generated"; exit 9; }

      - name: 26 Apply calibration
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs --in "${PREDICTIONS_CSV}" --cal "${CALIBRATOR_PKL}" --out "${PREDICTIONS_CALIB_CSV}"
          test -s "${PREDICTIONS_CALIB_CSV}" || { echo "::error::predictions_calibrated.csv not generated"; exit 9; }

      - name: 27 Kelly staking 1x2
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --probs "${PREDICTIONS_CALIB_CSV}" \
            --odds_source "${CONSENSUS_CSV}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --top_n "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}" \
            --out "${KELLY_BETS_CSV}"
          test -s "${KELLY_BETS_CSV}" || { echo "::error::bets_kelly.csv not generated"; exit 10; }

      - name: 28 Loteca card top 14
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}" --triples 3 --doubles 5
          test -s "${LOTECA_CARD_CSV}" || { echo "::error::loteca_card.csv not generated"; exit 11; }

      - name: 29 Final listing
        run: |
          set -euo pipefail
          ls -lh "${OUT_DIR}"
          echo "OUT_DIR=${OUT_DIR}"