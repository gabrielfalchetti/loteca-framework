name: Loteca Super End-to-End

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  # Parâmetros de modelagem / apostas
  SEASON: "2025"
  LOOKAHEAD_DAYS: "3"
  REGIONS: "uk,eu,us,au"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"

  # I/O
  OUT_DIR: "data/out/${{ github.run_id }}"
  SOURCE_CSV: "data/in/matches_sources.csv"
  ALIASES_JSON: "data/aliases.json"

  # Qualidade de vida
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_WARN_SCRIPT_LOCATION: "1"

jobs:
  loteca:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Garantir libs usadas pelos scripts
          pip install pandas numpy scipy scikit-learn unidecode requests python-dateutil

      - name: Prepare rodada directory
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}"
          mkdir -p data/in data/history

      - name: Validate aliases.json (non-blocking)
        shell: bash
        env:
          ALIASES_JSON: ${{ env.ALIASES_JSON }}
        run: |
          set -euo pipefail
          if [ -f "${ALIASES_JSON}" ]; then
            if python - <<'PY'
import json,sys,os
p=os.environ["ALIASES_JSON"]
try:
  json.load(open(p,'r',encoding='utf-8'))
  print("[ok] aliases.json válido")
except Exception as e:
  print(f"::warning::aliases.json inválido: {e}")
PY
            then
              :
            fi
          else
            echo "::notice::Sem aliases.json — normalização automática será usada (se aplicável)."
          fi

      # ------ NOVO PASSO: garantir que o arquivo de origem exista ------
      - name: Materialize matches_sources.csv
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          SOURCE_CSV: ${{ env.SOURCE_CSV }}
        run: |
          set -euo pipefail
          mkdir -p data/in
          # Preferência: whitelist gerada da rodada atual
          if [ -s "${OUT_DIR}/matches_whitelist.csv" ]; then
            cp "${OUT_DIR}/matches_whitelist.csv" "${SOURCE_CSV}"
            echo "[ok] Copiado ${OUT_DIR}/matches_whitelist.csv -> ${SOURCE_CSV}"
          elif [ -s "data/in/matches_whitelist.csv" ]; then
            cp "data/in/matches_whitelist.csv" "${SOURCE_CSV}"
            echo "[ok] Copiado data/in/matches_whitelist.csv -> ${SOURCE_CSV}"
          elif [ -s "${SOURCE_CSV}" ]; then
            echo "[ok] ${SOURCE_CSV} já existe"
          else
            echo "::error::Nenhuma whitelist encontrada (nem em ${OUT_DIR} nem em data/in)."
            exit 5
          fi

          # Validação de cabeçalho mínimo
          header="$(head -n1 "${SOURCE_CSV}" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' em ${SOURCE_CSV}"; exit 5; }
          done

      # ---------------------- Ingestão de odds (API-FOOTBALL) ----------------------
      - name: Ingest odds - API-FOOTBALL
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          SOURCE_CSV: ${{ env.SOURCE_CSV }}
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball.py ] || { echo "::error::scripts/ingest_odds_apifootball.py not found"; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --source_csv "${SOURCE_CSV}" && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }

          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      # ---------------------- Ingestão de odds (TheOddsAPI) ----------------------
      - name: Ingest odds - TheOddsAPI
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          REGIONS: ${{ env.REGIONS }}
          ALIASES_JSON: ${{ env.ALIASES_JSON }}
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "${ALIASES_JSON}" && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }

          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      # ---------------------- Consenso de odds ----------------------
      - name: Build consensus odds (STRICT)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      # ---------------------- XG Univariate (obrigatório) ----------------------
      - name: XG Univariate
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/xg_univariate.py ] || { echo "::error::scripts/xg_univariate.py not found"; exit 7; }
          python -m scripts.xg_univariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_univariate.csv"
          test -s "$OUT" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      # ---------------------- XG Bivariate (obrigatório) ----------------------
      - name: XG Bivariate
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 8; }
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_bivariate.csv"
          test -s "$OUT" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      # ---------------------- Calibração ----------------------
      - name: Calibrate probabilities
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/probs_calibrated.csv"
          test -s "$OUT" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      # ---------------------- Kelly Bets ----------------------
      - name: Kelly bets
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          BANKROLL: ${{ env.BANKROLL }}
          KELLY_FRACTION: ${{ env.KELLY_FRACTION }}
          KELLY_CAP: ${{ env.KELLY_CAP }}
          KELLY_TOP_N: ${{ env.KELLY_TOP_N }}
          ROUND_TO: ${{ env.ROUND_TO }}
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}"
          OUT="${OUT_DIR}/kelly_stakes.csv"
          test -s "$OUT" || { echo "::error::kelly_stakes.csv not generated"; exit 10; }

      # ---------------------- Montar bilhete Loteca ----------------------
      - name: Build Loteca ticket
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/loteca_ticket.csv"
          test -s "$OUT" || { echo "::error::loteca_ticket.csv not generated"; exit 11; }

      # ---------------------- Publicar artefatos ----------------------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: loteca_outputs_${{ github.run_id }}
          path: |
            ${{ env.OUT_DIR }}/*.csv
            ${{ env.OUT_DIR }}/*.json
            ${{ env.OUT_DIR }}/*.txt
          if-no-files-found: warn