name: Loteca Super End-to-End

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Temporada (ex: 2025)"
        required: true
        default: "2025"
      lookahead_days:
        description: "Dias a frente para odds (ex: 3)"
        required: true
        default: "3"
      bankroll:
        description: "Bankroll para Kelly"
        required: true
        default: "1000"
      kelly_fraction:
        description: "Kelly fraction (0..1)"
        required: true
        default: "0.5"
      kelly_cap:
        description: "Limite maximo por aposta (0..1)"
        required: true
        default: "0.1"
      kelly_top_n:
        description: "Qtd maxima de apostas"
        required: true
        default: "14"
      round_to:
        description: "Arredondamento do stake"
        required: true
        default: "1"
      regions:
        description: "Regioes TheOddsAPI (ex: uk,eu,us,au)"
        required: true
        default: "uk,eu,us,au"
      train_calibrator:
        description: "Treinar calibrador isotonico nesta execucao? (true/false)"
        required: true
        default: "false"

env:
  SEASON: ${{ github.event.inputs.season }}
  LOOKAHEAD_DAYS: ${{ github.event.inputs.lookahead_days }}
  REGIONS: ${{ github.event.inputs.regions }}
  BANKROLL: ${{ github.event.inputs.bankroll }}
  KELLY_FRACTION: ${{ github.event.inputs.kelly_fraction }}
  KELLY_CAP: ${{ github.event.inputs.kelly_cap }}
  KELLY_TOP_N: ${{ github.event.inputs.kelly_top_n }}
  ROUND_TO: ${{ github.event.inputs.round_to }}
  TRAIN_CALIBRATOR: ${{ github.event.inputs.train_calibrator }}
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_WARN_SCRIPT_LOCATION: "1"

jobs:
  loteca-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scipy scikit-learn requests unidecode pyarrow fastparquet

      - name: Prepare RUN_ID and OUT_DIR
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          OUT_DIR="data/out/${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}" "data/history"
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      - name: Prepare Matches Source (detect file and validate header)
        shell: bash
        run: |
          set -euo pipefail
          if [ -s "data/in/matches_sources.csv" ]; then
            SOURCE_CSV="data/in/matches_sources.csv"
          elif [ -s "data/in/matches_source.csv" ]; then
            SOURCE_CSV="data/in/matches_source.csv"
          else
            echo "::error::Arquivo de jogos nao encontrado. Crie 'data/in/matches_sources.csv' ou 'data/in/matches_source.csv' com cabecalho: match_id,home,away"
            exit 4
          fi
          echo "SOURCE_CSV=${SOURCE_CSV}" >> "$GITHUB_ENV"

          header="$(head -n1 "${SOURCE_CSV}" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' em ${SOURCE_CSV}"; exit 4; }
          done

          cp -f "${SOURCE_CSV}" "${OUT_DIR}/matches_whitelist.csv"

      # 1) UPDATE HISTORICAL DATA
      - name: Update Historical Data (mandatory)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/update_history.py ] || { echo "::error::scripts/update_history.py not found"; exit 1; }
          python -m scripts.update_history --since_days 14 --out "data/history/results.csv" || true
          if [ ! -s "data/history/results.csv" ]; then
            echo "::warning::Sem historico via API; criando seed minimo a partir do SOURCE_CSV."
            python - <<'PY'
import csv, os
src = os.environ["SOURCE_CSV"]
outp = "data/history/results.csv"
with open(src, newline='', encoding='utf-8') as f, open(outp, 'w', newline='', encoding='utf-8') as g:
    r = csv.DictReader(f)
    w = csv.DictWriter(g, fieldnames=["date","home","away","home_goals","away_goals"])
    w.writeheader()
    for row in r:
        w.writerow({"date":"2025-01-01","home":row["home"],"away":row["away"],"home_goals":1,"away_goals":1})
PY
          fi
          test -s "data/history/results.csv" || { echo "::error::history results.csv not generated"; exit 1; }

      # 2) FEATURE ENGINEERING
      - name: Build Features (mandatory)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --out "data/history/features.parquet" \
            --ewma 0.20
          test -s "data/history/features.parquet" || { echo "::error::features.parquet not generated"; exit 2; }

      # 3) TRAIN DYNAMIC MODEL
      - name: Train Dynamic Poisson Model
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 7; }
          python -m scripts.train_dynamic_model \
            --rodada "${OUT_DIR}" \
            --history "data/history/results.csv" \
            --features "data/history/features.parquet" \
            --ewma 0.20
          test -s "${OUT_DIR}/state_params.json" || { echo "::error::state_params.json not generated"; exit 7; }

      # 4) INGEST FUTURE MATCHES & ODDS
      - name: Ingest API-FOOTBALL
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          SOURCE_CSV: ${{ env.SOURCE_CSV }}
          SEASON: ${{ env.SEASON }}
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${API_FOOTBALL_KEY:-}" ]; then
            echo "::notice::API_FOOTBALL_KEY nao configurada; pulando ingest_odds_apifootball."
            exit 0
          fi
          [ -f scripts/ingest_odds_apifootball.py ] || { echo "::error::scripts/ingest_odds_apifootball.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              --source_csv "${SOURCE_CSV}" && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          [ -s "${OUT_DIR}/odds_apifootball.csv" ] || echo "::warning::odds_apifootball.csv not generated"

      - name: Ingest TheOddsAPI
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          SOURCE_CSV: ${{ env.SOURCE_CSV }}
          REGIONS: ${{ env.REGIONS }}
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${THEODDS_API_KEY:-}" ]; then
            echo "::notice::THEODDS_API_KEY nao configurada; pulando ingest_odds_theoddsapi."
            exit 0
          fi
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --source_csv "${SOURCE_CSV}" && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done
          [ -s "${OUT_DIR}/odds_theoddsapi.csv" ] || echo "::warning::odds_theoddsapi.csv not generated"

      # 5) CONSENSUS STRICT
      - name: Consensus Odds (strict)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      # 6) TRAIN CALIBRATOR (optional)
      - name: Train Calibrator (optional)
        if: ${{ env.TRAIN_CALIBRATOR == 'true' }}
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/train_calibrator.py ] || { echo "::error::scripts/train_calibrator.py not found"; exit 12; }
          python -m scripts.train_calibrator \
            --history "data/history/results.csv" \
            --pred_store "data/history/predictions.csv" \
            --out_dir "data/history/calibration"
          test -s "data/history/calibration/calibrator_home.pkl" || { echo "::error::calibrator files not generated"; exit 12; }

      # 7) PREDICT
      - name: Predict (Dynamic Bivariate Poisson)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 8; }
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}" --max_goals 10
          OUT="${OUT_DIR}/xg_bivariate.csv"
          test -s "$OUT" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      # 8) CALIBRATE
      - name: Calibrate probabilities
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/probs_calibrated.csv"
          test -s "$OUT" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      # 9) KELLY
      - name: Kelly bets
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          BANKROLL: ${{ env.BANKROLL }}
          KELLY_FRACTION: ${{ env.KELLY_FRACTION }}
          KELLY_CAP: ${{ env.KELLY_CAP }}
          KELLY_TOP_N: ${{ env.KELLY_TOP_N }}
          ROUND_TO: ${{ env.ROUND_TO }}
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}"
          OUT="${OUT_DIR}/kelly_stakes.csv"
          test -s "$OUT" || { echo "::error::kelly_stakes.csv not generated"; exit 10; }

      # 10) TICKET
      - name: Build Loteca ticket
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/loteca_ticket.csv"
          test -s "$OUT" || { echo "::error::loteca_ticket.csv not generated"; exit 11; }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rodada-${{ env.OUT_DIR }}
          path: |
            ${{ env.OUT_DIR }}/*.csv
            ${{ env.OUT_DIR }}/*.json
            data/history/*.csv
            data/history/*.parquet
            data/history/calibration/*.pkl