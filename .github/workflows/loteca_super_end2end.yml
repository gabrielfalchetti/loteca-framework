name: Loteca Super End2End

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Temporada (ex.: 2025)"
        required: true
        default: "2025"
      lookahead_days:
        description: "Dias à frente para buscar eventos (odds)"
        required: true
        default: "3"
      regions:
        description: "Regiões TheOddsAPI (ex.: uk,eu,us,au)"
        required: true
        default: "uk,eu,us,au"
      bankroll:
        description: "Bankroll para Kelly"
        required: true
        default: "1000"
      kelly_fraction:
        description: "Fração de Kelly"
        required: true
        default: "0.5"
      kelly_cap:
        description: "Teto de aposta (proporção do bankroll)"
        required: true
        default: "0.1"
      kelly_top_n:
        description: "Quantidade máxima de apostas"
        required: true
        default: "14"
      round_to:
        description: "Arredondar aposta para (unidade)"
        required: true
        default: "1"
      source_csv:
        description: "Arquivo de jogos de entrada"
        required: true
        default: "data/in/matches_source.csv"

  schedule:
    - cron: "15 09 * * 4"  # exemplo: toda quinta 09:15 UTC

env:
  SEASON: ${{ github.event.inputs.season || '2025' }}
  LOOKAHEAD_DAYS: ${{ github.event.inputs.lookahead_days || '3' }}
  REGIONS: ${{ github.event.inputs.regions || 'uk,eu,us,au' }}
  BANKROLL: ${{ github.event.inputs.bankroll || '1000' }}
  KELLY_FRACTION: ${{ github.event.inputs.kelly_fraction || '0.5' }}
  KELLY_CAP: ${{ github.event.inputs.kelly_cap || '0.1' }}
  KELLY_TOP_N: ${{ github.event.inputs.kelly_top_n || '14' }}
  ROUND_TO: ${{ github.event.inputs.round_to || '1' }}
  SOURCE_CSV: ${{ github.event.inputs.source_csv || 'data/in/matches_source.csv' }}

jobs:
  loteca-super:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      # Secrets mapeados aqui para ficarem disponíveis nos steps
      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY:   ${{ secrets.X_RAPIDAPI_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          # requirements do projeto (se existir)
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # garantias mínimas
          pip install pandas numpy pyarrow fastparquet requests python-dateutil unidecode scipy scikit-learn openpyxl

      - name: Prepare OUT_DIR
        id: prep
        run: |
          set -euo pipefail
          OUT_DIR="data/out/${{ github.run_id }}"
          echo "OUT_DIR=${OUT_DIR}" >> $GITHUB_ENV
          mkdir -p "${OUT_DIR}"

      # ============================
      # 0) Validação do SOURCE_CSV
      # ============================
      - name: Validate source CSV (match_id,home,away)
        run: |
          set -euo pipefail
          if [ ! -s "${SOURCE_CSV}" ]; then
            echo "::error::Arquivo ${SOURCE_CSV} não encontrado ou vazio. Crie-o com cabeçalho: match_id,home,away"
            exit 4
          fi
          header="$(head -n1 "${SOURCE_CSV}" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' em ${SOURCE_CSV}"; exit 4; }
          done
          cp -f "${SOURCE_CSV}" "${OUT_DIR}/matches_whitelist.csv"

      # ======================================
      # 1) Histórico via API-Football (+stub)
      # ======================================
      - name: Update history (API-Football → results.csv)
        run: |
          set -euo pipefail
          [ -f scripts/update_history.py ] || { echo "::error::scripts/update_history.py not found"; exit 1; }
          # tenta; se falhar, stub
          if ! python -m scripts.update_history --since_days 14 --out "data/history/results.csv"; then
            echo "::notice::update_history falhou; gerando stub..."
          fi
          if [ ! -s "data/history/results.csv" ] || [ "$(wc -l < data/history/results.csv)" -le 1 ]; then
            mkdir -p data/history
            printf "date,home,away,home_goals,away_goals\n1970-01-01,BOOT,BOOT,0,0\n" > data/history/results.csv
            echo "::notice::Stub criado (BOOT vs BOOT) para destravar features."
          fi
          header="$(head -n1 data/history/results.csv | tr -d '\r')"
          for c in date home away home_goals away_goals; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::history sem coluna '$c'"; exit 1; }
          done

      - name: Feature engineering (EWMA)
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --out "data/history/features.parquet" \
            --ewma 0.20
          test -s "data/history/features.parquet" || { echo "::error::features.parquet not generated"; exit 2; }

      # ==================================
      # 2) Normalizar nomes (PT/EN/acentos)
      # ==================================
      - name: Normalize team names (BR/intl)
        run: |
          set -euo pipefail
          [ -f scripts/normalize_matches.py ] || { echo "::error::scripts/normalize_matches.py not found"; exit 3; }
          python -m scripts.normalize_matches \
            --in_csv "${SOURCE_CSV}" \
            --out_csv "${OUT_DIR}/matches_norm.csv"
          test -s "${OUT_DIR}/matches_norm.csv" || { echo "::error::matches_norm.csv not generated"; exit 3; }

      # =====================================================
      # 3) Resolver IDs no API-Football (times/fixtures IDs)
      # =====================================================
      - name: Resolve IDs with API-Football (teams/fixtures)
        if: env.API_FOOTBALL_KEY != ''
        run: |
          set -euo pipefail
          [ -f scripts/resolve_ids_apifootball.py ] || { echo "::error::scripts/resolve_ids_apifootball.py not found"; exit 3; }
          python -m scripts.resolve_ids_apifootball \
            --in_csv  "${OUT_DIR}/matches_norm.csv" \
            --out_csv "${OUT_DIR}/matches_resolved.csv" \
            --season "${SEASON}"
          test -s "${OUT_DIR}/matches_resolved.csv" || { echo "::error::matches_resolved.csv not generated"; exit 3; }
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}

      # =======================================================
      # 4) Enriquecer features a partir do API-Football (pré-jogo)
      # =======================================================
      - name: Enrich features with API-Football
        if: env.API_FOOTBALL_KEY != ''
        run: |
          set -euo pipefail
          [ -f scripts/enrich_features_apifootball.py ] || { echo "::error::scripts/enrich_features_apifootball.py not found"; exit 3; }
          python -m scripts.enrich_features_apifootball \
            --matches "${OUT_DIR}/matches_resolved.csv" \
            --features_in "data/history/features.parquet" \
            --features_out "${OUT_DIR}/features_ext.parquet" \
            --season "${SEASON}"
          test -s "${OUT_DIR}/features_ext.parquet" || { echo "::error::features_ext.parquet not generated"; exit 3; }
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}

      # ======================
      # 5) Ingest de odds
      # ======================
      - name: Ingest odds (TheOddsAPI) — OBRIGATÓRIO
        run: |
          set -euo pipefail
          python -m scripts.ingest_odds_theoddsapi \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --source_csv "${OUT_DIR}/matches_norm.csv"
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}

      - name: Ingest odds (API-Football) — OPCIONAL
        if: env.API_FOOTBALL_KEY != ''
        run: |
          set -euo pipefail
          if [ -f scripts/ingest_odds_apifootball.py ]; then
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --source_csv "${OUT_DIR}/matches_norm.csv" || true
          else
            echo "::notice::sem scripts/ingest_odds_apifootball.py (ok)"
          fi
          [ -s "${OUT_DIR}/odds_apifootball.csv" ] || echo "::notice::odds_apifootball.csv não gerado (ok)"
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          X_RAPIDAPI_KEY:   ${{ secrets.X_RAPIDAPI_KEY }}

      # ======================
      # 6) Consenso de odds
      # ======================
      - name: Consensus odds (strict)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      # ======================
      # 7) xG bivariado
      # ======================
      - name: xG bivariado (predições)
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 7; }
          # usa features_ext se foi gerado; caso contrário, usa features base
          FEAT="data/history/features.parquet"
          if [ -s "${OUT_DIR}/features_ext.parquet" ]; then FEAT="${OUT_DIR}/features_ext.parquet"; fi
          python -m scripts.xg_bivariate \
            --odds "${OUT_DIR}/odds_consensus.csv" \
            --features "${FEAT}" \
            --out "${OUT_DIR}/pred_xg.csv"
          test -s "${OUT_DIR}/pred_xg.csv" || { echo "::error::pred_xg.csv not generated"; exit 7; }

      # ======================
      # 8) Kelly
      # ======================
      - name: Kelly bets
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 8; }
          python -m scripts.kelly_bets \
            --preds "${OUT_DIR}/pred_xg.csv" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --top_n "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}" \
            --out "${OUT_DIR}/bets.csv"
          test -s "${OUT_DIR}/bets.csv" || { echo "::error::bets.csv not generated"; exit 8; }

      # ==============================
      # 9) Montagem do Cartão Loteca
      # ==============================
      - name: Montar Cartão Loteca (planilha)
        run: |
          set -euo pipefail
          [ -f scripts/montar_cartao_loteca.py ] || { echo "::error::scripts/montar_cartao_loteca.py not found"; exit 9; }
          python -m scripts.montar_cartao_loteca \
            --matches "${OUT_DIR}/matches_norm.csv" \
            --odds "${OUT_DIR}/odds_consensus.csv" \
            --bets "${OUT_DIR}/bets.csv" \
            --out_xlsx "${OUT_DIR}/cartao_loteca.xlsx" \
            --out_csv  "${OUT_DIR}/cartao_loteca.csv"
          test -s "${OUT_DIR}/cartao_loteca.xlsx" || { echo "::error::cartao_loteca.xlsx not generated"; exit 9; }

      # ======================
      # 10) Artefatos
      # ======================
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: loteca_${{ github.run_id }}
          path: |
            ${{ env.OUT_DIR }}/matches_whitelist.csv
            ${{ env.OUT_DIR }}/matches_norm.csv
            ${{ env.OUT_DIR }}/matches_resolved.csv
            ${{ env.OUT_DIR }}/features_ext.parquet
            ${{ env.OUT_DIR }}/odds_theoddsapi.csv
            ${{ env.OUT_DIR }}/odds_apifootball.csv
            ${{ env.OUT_DIR }}/odds_consensus.csv
            ${{ env.OUT_DIR }}/pred_xg.csv
            ${{ env.OUT_DIR }}/bets.csv
            ${{ env.OUT_DIR }}/cartao_loteca.xlsx
            ${{ env.OUT_DIR }}/cartao_loteca.csv