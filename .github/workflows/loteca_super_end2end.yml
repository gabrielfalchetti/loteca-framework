name: Loteca Super End-to-End

on:
  workflow_dispatch:
  schedule:
    - cron: "15 12 * * 4"  # quinta 12:15 UTC

jobs:
  loteca:
    runs-on: ubuntu-latest

    env:
      SEASON: "2025"
      LOOKAHEAD_DAYS: "3"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      TRAIN_CALIBRATOR: "false"
      SOURCE_CSV: "data/in/matches_source.csv"
      # APIs
      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
      # Desliga Weights & Biases
      WANDB_DISABLED: "true"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (safe)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install pandas numpy scipy scikit-learn statsmodels pyarrow fastparquet python-dateutil pytz requests tqdm unidecode rapidfuzz matplotlib

      - name: Ensure data directories + base stubs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data/history data/in data/out data/aliases models
          # stubs seguros (somente se não existirem)
          if [ ! -s "data/history/results.csv" ]; then
            echo "date,home,away,home_goals,away_goals" > data/history/results.csv
            echo "1970-01-01,BOOT,BOOT,0,0" >> data/history/results.csv
          fi
          if [ ! -s "data/in/matches_source.csv" ]; then
            echo "match_id,home,away,date" > data/in/matches_source.csv
            echo "1,BOOT,BOOT,1970-01-01" >> data/in/matches_source.csv
          fi
          if [ ! -s "data/aliases/team_aliases.json" ]; then
            echo "{}" > data/aliases/team_aliases.json
          fi

      - name: Define run directories and env vars
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR="data/out/${GITHUB_RUN_ID}"
          mkdir -p "${OUT_DIR}"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          echo "FEATURES_PARQUET=data/history/features.parquet" >> "$GITHUB_ENV"
          echo "SOURCE_CSV_NORM=${OUT_DIR}/matches_norm.csv" >> "$GITHUB_ENV"
          echo "AUTO_ALIASES_JSON=data/aliases/auto_aliases.json" >> "$GITHUB_ENV"

      # ====================== HISTÓRICO ======================
      - name: Update history (with stub fallback)
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f scripts/update_history.py ]; then
            echo "::notice::scripts/update_history.py not found — usando stub existente"
          else
            python -m scripts.update_history --since_days 14 --out "data/history/results.csv" || echo "::notice::update_history falhou; mantendo stub"
          fi
          [ -s "data/history/results.csv" ] || { echo "::error::results.csv vazio"; exit 1; }

      - name: Feature engineering
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --out "${FEATURES_PARQUET}" \
            --ewma 0.20
          test -s "${FEATURES_PARQUET}" || { echo "::error::features.parquet not generated"; exit 2; }

      # ====================== ENRICH API-FOOTBALL ======================
      - name: Enrich features with API-Football (matches, injuries, stats)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${API_FOOTBALL_KEY:-}" ]; then
            echo "::notice::API_FOOTBALL_KEY não configurada; pulando enrich."
            exit 0
          fi
          if [ ! -f scripts/enrich_api_football.py ]; then
            echo "::notice::sem scripts/enrich_api_football.py"
            exit 0
          fi
          python -m scripts.enrich_api_football \
            --features_in "${FEATURES_PARQUET}" \
            --features_out "${FEATURES_PARQUET}" || true

      # ====================== TREINAMENTO ======================
      - name: Train dynamic model (Maher / Kalman)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 2; }
          python -m scripts.train_dynamic_model \
            --features "${FEATURES_PARQUET}" \
            --out_state "${OUT_DIR}/state_params.json" \
            --out_model "${OUT_DIR}/dynamic_model.pkl"
          test -s "${OUT_DIR}/state_params.json" || { echo "::error::state_params.json not generated"; exit 2; }

      # ====================== NORMALIZAÇÃO DOS JOGOS ======================
      - name: Normalize matches
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/normalize_matches.py ] || { echo "::error::scripts/normalize_matches.py not found"; exit 3; }
          python -m scripts.normalize_matches \
            --in_csv "${SOURCE_CSV}" \
            --out_csv "${SOURCE_CSV_NORM}"
          test -s "${SOURCE_CSV_NORM}" || { echo "::error::matches_norm.csv not generated"; exit 3; }

      # ====================== AUTO-ALIASES (GERAÇÃO AUTOMÁTICA) ======================
      - name: Harvest aliases (auto) for next matches
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data/aliases
          if [ ! -f scripts/harvest_aliases.py ]; then
            echo "::notice::sem scripts/harvest_aliases.py — criando auto_aliases.json vazio"
            echo "{}" > "${AUTO_ALIASES_JSON}"
          else
            python -m scripts.harvest_aliases \
              --source_csv "${SOURCE_CSV_NORM}" \
              --lookahead_hours 72 \
              --out_json "${AUTO_ALIASES_JSON}" || true
            # fallback se falhar/ficar vazio
            [ -s "${AUTO_ALIASES_JSON}" ] || echo "{}" > "${AUTO_ALIASES_JSON}"
          fi
          echo "::notice::auto_aliases.json pronto em ${AUTO_ALIASES_JSON}"

      # ====================== ODDS ======================
      - name: Ingest TheOddsAPI (main odds)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${THEODDS_API_KEY:-}" ]; then
            echo "::error::THEODDS_API_KEY não configurada"
            exit 5
          fi
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          python -m scripts.ingest_odds_theoddsapi \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --source_csv "${SOURCE_CSV_NORM}"
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }

      - name: Ingest API-Football odds (complementar)
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${API_FOOTBALL_KEY:-}" ]; then
            echo "::notice::API_FOOTBALL_KEY não configurada; pulando ingest complementar."
            exit 0
          fi
          if [ ! -f scripts/ingest_odds_apifootball.py ]; then
            echo "::notice::sem scripts/ingest_odds_apifootball.py"
            exit 0
          fi
          python -m scripts.ingest_odds_apifootball \
            --rodada "${OUT_DIR}" \
            --source_csv "${SOURCE_CSV_NORM}" || true
          # este é complementar; não falha se vazio

      - name: Consensus odds (multi-source)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "${OUT_FILE}" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "${OUT_FILE}" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "${header}" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      # ====================== PREVISÃO ======================
      - name: Predict xG bivariate
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/predict_xg_bivariate.py ] || { echo "::error::scripts/predict_xg_bivariate.py not found"; exit 7; }
          python -m scripts.predict_xg_bivariate \
            --matches "${SOURCE_CSV_NORM}" \
            --odds "${OUT_DIR}/odds_consensus.csv" \
            --state "${OUT_DIR}/state_params.json" \
            --out "${OUT_DIR}/pred_xg.csv"
          test -s "${OUT_DIR}/pred_xg.csv" || { echo "::error::pred_xg.csv not generated"; exit 7; }

      # ====================== CALIBRAÇÃO ======================
      - name: Calibrate probabilities
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 8; }
          CALIB=""
          if [ -f "models/calibrator.pkl" ]; then
            CALIB="--model models/calibrator.pkl"
          fi
          python -m scripts.calibrate_probs \
            --pred_in "${OUT_DIR}/pred_xg.csv" \
            --out "${OUT_DIR}/probs_calibrated.csv" \
            $CALIB
          test -s "${OUT_DIR}/probs_calibrated.csv" || { echo "::error::probs_calibrated.csv not generated"; exit 8; }

      # ====================== KELLY & CARTÃO ======================
      - name: Kelly bets
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 9; }
          python -m scripts.kelly_bets \
            --pred_in "${OUT_DIR}/probs_calibrated.csv" \
            --bankroll "${BANKROLL}" \
            --kelly_fraction "${KELLY_FRACTION}" \
            --kelly_cap "${KELLY_CAP}" \
            --top_n "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}" \
            --out "${OUT_DIR}/bets.csv"
          test -s "${OUT_DIR}/bets.csv" || { echo "::error::bets.csv not generated"; exit 9; }

      - name: Montar Cartão Loteca
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/montar_cartao_loteca.py ] || { echo "::error::scripts/montar_cartao_loteca.py not found"; exit 10; }
          python -m scripts.montar_cartao_loteca \
            --matches "${SOURCE_CSV_NORM}" \
            --pred "${OUT_DIR}/probs_calibrated.csv" \
            --bets "${OUT_DIR}/bets.csv" \
            --out_csv "${OUT_DIR}/cartao_loteca.csv"
          test -s "${OUT_DIR}/cartao_loteca.csv" || { echo "::error::cartao_loteca.csv not generated"; exit 10; }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: loteca_${{ github.run_id }}
          path: |
            data/out/**
            data/history/features.parquet
            data/aliases/auto_aliases.json
            data/aliases/team_aliases.json
          if-no-files-found: warn