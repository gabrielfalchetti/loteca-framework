name: Loteca Super End2End

on:
  workflow_dispatch:
    inputs:
      DEBUG:
        description: "Debug mode"
        required: false
        default: "false"

env:
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_WARN_SCRIPT_LOCATION: "1"

  # Parâmetros já usados no seu repo
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  LOOKAHEAD_DAYS: "3"

  # Parâmetros do Kelly
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"

permissions:
  contents: read

jobs:
  loteca:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências Py (pandas, numpy, rapidfuzz, unidecode)
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy rapidfuzz unidecode

      - name: Init run & OUT_DIR
        id: init
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" >> "$GITHUB_ENV"
          if [ "${{ github.event.inputs.DEBUG || 'false' }}" = "true" ] || [ "${{ github.event.inputs.DEBUG || 'false' }}" = "1" ]; then
            echo "DEBUG_FLAG=--debug" >> "$GITHUB_ENV"
          else
            echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          fi
          mkdir -p "data/in" "${OUT_DIR}"
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      # -----------------------------
      # 1) Normalização da whitelist
      # -----------------------------
      - name: Normalizar whitelist (matches_source -> matches_whitelist.csv)
        shell: bash
        run: |
          set -euo pipefail
          SRC="data/in/matches_source.csv"
          DST_RAW="${OUT_DIR}/matches_whitelist_raw.csv"
          DST_NORM="${OUT_DIR}/matches_whitelist.csv"

          tr -d '\r' < "$SRC" | sed -E 's/[[:space:]]+/ /g; s/ *, */,/g; s/^ //; s/ $//' > "$DST_RAW"

          header="$(head -n1 "$DST_RAW")"
          h_low="$(echo "$header" | tr '[:upper:]' '[:lower:]')"
          for need in match_id home away; do
            echo "$h_low" | grep -qiE "(^|,)$need(,|$)" || { echo "::error::missing column '$need' in matches_source.csv"; exit 2; }
          done

          awk -F',' -v OFS=',' '
            function rmuf(s){ gsub(/\/[A-Za-z]{2}($|[^A-Za-z])/, "", s); return s }
            function deacc(s){
              gsub(/á|à|ã|â|ä/,"a",s); gsub(/Á|À|Ã|Â|Ä/,"A",s);
              gsub(/é|ê|è|ë/,"e",s);  gsub(/É|Ê|È|Ë/,"E",s);
              gsub(/í|î|ì|ï/,"i",s);  gsub(/Í|Î|Ì|Ï/,"I",s);
              gsub(/ó|ô|ò|õ|ö/,"o",s); gsub(/Ó|Ô|Ò|Õ|Ö/,"O",s);
              gsub(/ú|û|ù|ü/,"u",s);  gsub(/Ú|Û|Ù|Ü/,"U",s);
              gsub(/ç/,"c",s);        gsub(/Ç/,"C",s);
              gsub(/ñ/,"n",s);        gsub(/Ñ/,"N",s);
              return s
            }
            function trim(s){ sub(/^ +/,"",s); sub(/ +$/,"",s); return s }
            NR==1{
              for(i=1;i<=NF;i++){
                k=tolower($i);
                if(k=="match_id") mi=i;
                if(k=="home")     hi=i;
                if(k=="away")     ai=i;
              }
              if(!(mi&&hi&&ai)){ print "::error::header mapping failed"; exit 2 }
              print "match_id","home","away";
              next
            }
            {
              mid=$mi; home=$hi; away=$ai;
              home=rmuf(home); away=rmuf(away);
              home=deacc(home); away=deacc(away);
              home=trim(home);  away=trim(away);
              if(mid=="" || home=="" || away==""){ print "::error::empty field on line " NR; exit 2 }
              if(seen[mid]++){ print "::error::duplicate match_id: " mid; exit 2 }
              print mid,home,away
            }
          ' "$DST_RAW" > "$DST_NORM"

          LINES=$(wc -l < "$DST_NORM" | tr -d " ")
          [ "$LINES" -ge 2 ] || { echo "::error::whitelist empty after normalization"; exit 3; }

          cp "$DST_NORM" "${OUT_DIR}/matches_whitelist.csv"
          echo "===== Preview normalized whitelist ====="
          head -n 30 "$DST_NORM" || true

      # -----------------------------
      # 2) Ingestão de odds (APIs OBRIGATÓRIAS)
      # -----------------------------
      - name: Ingest - API-Football via RapidAPI (obrigatória)
        shell: bash
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      - name: Ingest - TheOddsAPI (obrigatória)
        shell: bash
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/aliases.json" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      # -----------------------------
      # 3) Consenso (STRICT) — para aqui se faltar qualquer jogo
      # -----------------------------
      - name: Consenso de Odds (STRICT)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      # -----------------------------
      # 4) xG Univariado
      # -----------------------------
      - name: xG Univariado
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.xg_univariado --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/xg_univariate.csv" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      # -----------------------------
      # 5) xG Bivariado
      # -----------------------------
      - name: xG Bivariado
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.xg_bivariado --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/xg_bivariate.csv" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      # -----------------------------
      # 6) Calibração de probabilidades
      # -----------------------------
      - name: Calibração de Probabilidades
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.calibracao --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/probs_calibrated.csv" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      # -----------------------------
      # 7) Kelly (stake sizing)
      # -----------------------------
      - name: Kelly
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.kelly \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --top-n "${KELLY_TOP_N}" \
            --round-to "${ROUND_TO}" \
            ${DEBUG_FLAG}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv not generated"; exit 10; }

      # -----------------------------
      # 8) Montar Cartão da Loteca
      # -----------------------------
      - name: Montar Cartão da Loteca (14 jogos)
        shell: bash
        run: |
          set -euo pipefail
          python -m scripts.make_ticket --rodada "${OUT_DIR}" --top-n 14 ${DEBUG_FLAG}
          test -s "${OUT_DIR}/loteca_ticket.csv" || { echo "::error::loteca_ticket.csv not generated"; exit 11; }

      - name: Artefatos principais
        uses: actions/upload-artifact@v4
        with:
          name: loteca_${{ steps.init.outputs.RUN_ID }}
          path: |
            ${{ env.OUT_DIR }}/odds_consensus.csv
            ${{ env.OUT_DIR }}/xg_univariate.csv
            ${{ env.OUT_DIR }}/xg_bivariate.csv
            ${{ env.OUT_DIR }}/probs_calibrated.csv
            ${{ env.OUT_DIR }}/kelly_stakes.csv
            ${{ env.OUT_DIR }}/loteca_ticket.csv