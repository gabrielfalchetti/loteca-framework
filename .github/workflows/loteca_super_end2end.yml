name: loteca_super_end2end

on:
  workflow_dispatch:

env:
  # ===== Parâmetros de negócio =====
  SEASON: "2025"
  LOOKAHEAD_DAYS: "3"        # janela para localizar fixtures (dias à frente)
  REGIONS: "uk,eu,us,au"     # TheOddsAPI
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  ALIASES_JSON: "data/aliases.json"

  # ===== Chaves de API (TheOddsAPI e API-FOOTBALL direta) =====
  # - Use API_FOOTBALL_KEY (API-SPORTS) como padrão atual
  # - Se ainda usar RapidAPI, pode manter RAPIDAPI_KEY (opcional)
  API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
  RAPIDAPI_KEY:     ${{ secrets.RAPIDAPI_KEY }}
  X_RAPIDAPI_KEY:   ${{ secrets.X_RAPIDAPI_KEY }}  # retrocompatível, se existir
  THEODDS_API_KEY:  ${{ secrets.THEODDS_API_KEY }}

jobs:
  loteca:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests pandas numpy unidecode python-dateutil
          fi

      - name: Preflight – validar chaves de API
        run: |
          set -euo pipefail
          missing=0

          # API-Football: aceitar modo direto OU RapidAPI (retrocompatível)
          if [ -z "${API_FOOTBALL_KEY:-}" ] && [ -z "${RAPIDAPI_KEY:-}" ] && [ -z "${X_RAPIDAPI_KEY:-}" ]; then
            echo "::error::Falta API_FOOTBALL_KEY (API-FOOTBALL direta). Opcionalmente, pode usar RAPIDAPI_KEY/X_RAPIDAPI_KEY (modo antigo)."
            missing=1
          fi

          # TheOddsAPI é opcional (mas melhora consenso)
          if [ -z "${THEODDS_API_KEY:-}" ]; then
            echo "::warning::THEODDS_API_KEY ausente. O consenso terá menos fontes."
          fi

          [ $missing -eq 0 ] || exit 1

      - name: Definir OUT_DIR e DEBUG_FLAG
        id: init
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" | tee -a "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" | tee -a "$GITHUB_ENV"
          echo "DEBUG_FLAG=" | tee -a "$GITHUB_ENV"   # debug desligado
          mkdir -p "data/in" "data/out/${RUN_ID}"
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      # ========== Normalizar a whitelist ==========
      - name: Normalizar whitelist (matches_source.csv -> matches_whitelist.csv)
        shell: bash
        run: |
          set -euo pipefail

          SRC="data/in/matches_source.csv"
          DST_RAW="${OUT_DIR}/matches_whitelist_raw.csv"
          DST_NORM="${OUT_DIR}/matches_whitelist.csv"

          if [ ! -f "$SRC" ]; then
            echo "::error::Arquivo $SRC não encontrado."
            exit 3
          fi

          # normalização simples
          tr -d '\r' < "$SRC" | sed -E 's/[[:space:]]+/ /g; s/ *, */,/g; s/^ //; s/ $//' > "$DST_RAW"

          header="$(head -n1 "$DST_RAW" || true)"
          h_low="$(echo "$header" | tr '[:upper:]' '[:lower:]')"
          for need in match_id home away; do
            echo "$h_low" | grep -qiE "(^|,)$need(,|$)" || { echo "::error::missing column '$need' in matches_source.csv"; exit 3; }
          done

          awk -F',' -v OFS=',' '
            function rmuf(s){ gsub(/\/[A-Za-z]{2}($|[^A-Za-z])/, "", s); return s }
            function deacc(s){
              gsub(/á|à|ã|â|ä/,"a",s); gsub(/Á|À|Ã|Â|Ä/,"A",s);
              gsub(/é|ê|è|ë/,"e",s);  gsub(/É|Ê|È|Ë/,"E",s);
              gsub(/í|î|ì|ï/,"i",s);  gsub(/Í|Î|Ì|Ï/,"I",s);
              gsub(/ó|ô|ò|õ|ö/,"o",s); gsub(/Ó|Ô|Ò|Õ|Ö/,"O",s);
              gsub(/ú|û|ù|ü/,"u",s);  gsub(/Ú|Û|Ù|Ü/,"U",s);
              gsub(/ç/,"c",s);        gsub(/Ç/,"C",s);
              gsub(/ñ/,"n",s);        gsub(/Ñ/,"N",s);
              return s
            }
            function trim(s){ sub(/^ +/,"",s); sub(/ +$/,"",s); return s }
            function map_pt_en(s,  l){
              l=tolower(s)
              if(l=="estonia") return "Estonia"
              if(l=="italia") return "Italy"
              if(l=="bulgaria") return "Bulgaria"
              if(l=="turquia") return "Turkey"
              if(l=="espanha") return "Spain"
              if(l=="georgia") return "Georgia"
              if(l=="servia" || l=="serbia/ser" || l=="servia/ser" || l=="serbia") return "Serbia"
              if(l=="albania") return "Albania"
              if(l=="portugal") return "Portugal"
              if(l=="irlanda") return "Ireland"
              if(l=="holanda" || l=="paises baixos") return "Netherlands"
              if(l=="finlandia") return "Finland"
              if(l=="romenia") return "Romania"
              if(l=="austria") return "Austria"
              if(l=="dinamarca") return "Denmark"
              if(l=="grecia") return "Greece"
              if(l=="lituania") return "Lithuania"
              if(l=="polonia") return "Poland"
              if(l=="ponte preta") return "Ponte Preta"
              if(l=="guarani") return "Guarani"
              if(l=="palmeiras") return "Palmeiras"
              if(l=="juventude") return "Juventude"
              if(l=="criciuma") return "Criciuma"
              if(l=="america/mg" || l=="america mg" || l=="america-mg" || l=="america mineiro" || l=="america") return "America Mineiro"
              if(l=="cuiaba") return "Cuiaba"
              if(l=="coritiba") return "Coritiba"
              if(l=="novorizontino" || l=="gremio novorizontino" || l=="grêmio novorizontino") return "Gremio Novorizontino"
              if(l=="operario" || l=="operario pr" || l=="operario/pr" || l=="operário/pr") return "Operario PR"
              return s
            }
            NR==1{
              for(i=1;i<=NF;i++){
                k=tolower($i);
                if(k=="match_id") mi=i;
                if(k=="home") hi=i;
                if(k=="away") ai=i;
              }
              if(!(mi&&hi&&ai)){ print "::error::header mapping failed"; exit 2 }
              print "match_id","home","away";
              next
            }
            {
              mid=$mi; home=$hi; away=$ai;
              home=rmuf(home); away=rmuf(away);
              home=deacc(home); away=deacc(away);
              home=trim(home); away=trim(away);
              home=map_pt_en(home); away=map_pt_en(away);
              if(mid=="" || home=="" || away==""){ print "::error::empty field on line " NR; exit 2 }
              if(seen[mid]++){ print "::error::duplicate match_id: " mid; exit 2 }
              print mid,home,away
            }
          ' "$DST_RAW" > "$DST_NORM"

          LINES="$(wc -l < "$DST_NORM" | tr -d " ")"
          [ "$LINES" -ge 2 ] || { echo "::error::whitelist empty after normalization"; exit 3; }

          echo "===== Preview normalized whitelist ====="
          head -n 30 "$DST_NORM" || true

      # ========== API-FOOTBALL (direto ou RapidAPI – bimodal) ==========
      - name: Ingest – API-Football (bimodal)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] \
            || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py not found"; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }

          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      # ========== TheOddsAPI (opcional, mas recomendável) ==========
      - name: Ingest – TheOddsAPI (opcional)
        if: env.THEODDS_API_KEY != ''
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] \
            || { echo "::warning::scripts/ingest_odds_theoddsapi.py not found — pulando fonte TheOddsAPI"; exit 0; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }

          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      # ========== Consenso de odds ==========
      - name: Consenso – odds
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      # ========== xG UNIVARIADO ==========
      - name: xG Univariado
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_univariate.py ] || { echo "::error::scripts/xg_univariate.py not found"; exit 7; }
          python -m scripts.xg_univariate --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/xg_univariate.csv" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      # ========== xG BIVARIADO ==========
      - name: xG Bivariado
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 7; }
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/xg_bivariate.csv" || { echo "::error::xg_bivariate.csv not generated"; exit 7; }

      # ========== Calibração ==========
      - name: Calibração de probabilidades
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 8; }
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/probs_calibrated.csv" || { echo "::error::probs_calibrated.csv not generated"; exit 8; }

      # ========== Kelly ==========
      - name: Kelly
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 9; }
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round "${ROUND_TO}"
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv not generated"; exit 9; }

      # ========== Montar cartão ==========
      - name: Montar cartão da Loteca
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/build_loteca_ticket.py ] || { echo "::error::scripts/build_loteca_ticket.py not found"; exit 10; }
          python -m scripts.build_loteca_ticket --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_ticket.csv" || { echo "::error::loteca_ticket.csv not generated"; exit 10; }