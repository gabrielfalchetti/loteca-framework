name: Loteca Super End-to-End

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Temporada (ex: 2025)"
        required: true
        default: "2025"
      lookahead_days:
        description: "Dias à frente para odds (ex: 3)"
        required: true
        default: "3"
      bankroll:
        description: "Bankroll para Kelly"
        required: true
        default: "1000"
      kelly_fraction:
        description: "Kelly fraction (0..1)"
        required: true
        default: "0.5"
      kelly_cap:
        description: "Limite máximo por aposta (0..1)"
        required: true
        default: "0.1"
      kelly_top_n:
        description: "Qtd máxima de apostas"
        required: true
        default: "14"
      round_to:
        description: "Arredondamento do stake"
        required: true
        default: "1"
      regions:
        description: "Regiões TheOddsAPI (ex: uk,eu,us,au)"
        required: true
        default: "uk,eu,us,au"

env:
  SEASON: ${{ inputs.season }}
  LOOKAHEAD_DAYS: ${{ inputs.lookahead_days }}
  REGIONS: ${{ inputs.regions }}
  BANKROLL: ${{ inputs.bankroll }}
  KELLY_FRACTION: ${{ inputs.kelly_fraction }}
  KELLY_CAP: ${{ inputs.kelly_cap }}
  KELLY_TOP_N: ${{ inputs.kelly_top_n }}
  ROUND_TO: ${{ inputs.round_to }}
  ALIASES_JSON: data/aliases.json
  PYTHONUTF8: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1

jobs:
  loteca-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas numpy scipy unidecode

      - name: Prepare RUN_ID and OUT_DIR
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" | tee -a "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" | tee -a "$GITHUB_ENV"
          echo "DEBUG_FLAG=" | tee -a "$GITHUB_ENV"
          mkdir -p "data/in" "data/out/${RUN_ID}"
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      - name: Validate aliases.json (optional)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          if [ -f "${ALIASES_JSON}" ]; then
            python -c "import json; json.load(open('${ALIASES_JSON}','r',encoding='utf-8')); print('[ok] aliases.json valido')"
          else
            echo "::notice::Sem aliases.json — normalizacao automatica sera usada."
          fi

      # -------- Ingestão de odds: API-FOOTBALL --------
      - name: Ingest API-FOOTBALL
        if: env.API_FOOTBALL_KEY != ''
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball.py ] || { echo "::error::scripts/ingest_odds_apifootball.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::warning::odds_apifootball.csv not generated"; }

      # -------- Ingestão de odds: TheOddsAPI ----------
      - name: Ingest TheOddsAPI
        if: env.THEODDS_API_KEY != ''
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::warning::odds_theoddsapi.csv not generated"; }

      # -------- Consenso das odds (estrito: precisa whitelist) ----------
      - name: Consensus Odds (strict)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      # -------- Treino dinâmico (novo passo) ----------
      - name: Train Dynamic Poisson Model
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 7; }
          python -m scripts.train_dynamic_model --rodada "${OUT_DIR}" --history "data/history/results.csv" --ewma 0.20
          test -s "${OUT_DIR}/state_params.json" || { echo "::error::state_params.json not generated"; exit 7; }

      # -------- xG Univariado (obrigatório) ----------
      - name: xG Univariate (mandatory)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_univariate.py ] || { echo "::error::scripts/xg_univariate.py not found"; exit 7; }
          python -m scripts.xg_univariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_univariate.csv"
          test -s "$OUT" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      # -------- xG Bivariado (obrigatório) ----------
      - name: xG Bivariate (mandatory)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 8; }
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}" --max_goals 10
          OUT="${OUT_DIR}/xg_bivariate.csv"
          test -s "$OUT" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      # -------- Calibração (usa consenso/xg) ----------
      - name: Calibrate probabilities
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/probs_calibrated.csv"
          test -s "$OUT" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      # -------- Kelly bets ----------
      - name: Kelly bets
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}"
          OUT="${OUT_DIR}/kelly_stakes.csv"
          test -s "$OUT" || { echo "::error::kelly_stakes.csv not generated"; exit 10; }

      # -------- Ticket Loteca ----------
      - name: Build Loteca ticket
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/loteca_ticket.csv"
          test -s "$OUT" || { echo "::error::loteca_ticket.csv not generated"; exit 11; }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
            name: rodada-${{ env.OUT_DIR }}
            path: |
              ${{ env.OUT_DIR }}/*.csv
              ${{ env.OUT_DIR }}/*.json