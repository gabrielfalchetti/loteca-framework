name: Loteca - Super End2End

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  super-end2end:
    runs-on: ubuntu-latest

    env:
      SEASON: "2025"
      LOOKAHEAD_DAYS: "3"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      ALIASES_JSON: "data/aliases.json"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências (AGORA INCLUI SCIKIT-LEARN)
        run: |
          set -euo pipefail
          python -V
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install scikit-learn joblib
          else
            pip install pandas numpy requests python-dateutil unidecode scikit-learn joblib
          fi

      - name: Preparar diretórios e variáveis da rodada
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          OUT_DIR="data/out/${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}"
          mkdir -p models/calibration
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      - name: Validar aliases.json (tolerante)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${ALIASES_JSON}" ] && [ -f "${ALIASES_JSON}" ]; then
            python -c "import json, sys, codecs; json.loads(codecs.open('${ALIASES_JSON}', 'r', 'utf-8').read()); print('[ok] aliases.json válido')" \
            || { echo '::warning::aliases.json inválido — desabilitando nesta run.'; echo "ALIASES_JSON=" >> "$GITHUB_ENV"; }
          else
            echo "::notice::Sem aliases.json — normalização automática será usada."
          fi

      # ======================
      # INGESTÃO DE ODDS — API-FOOTBALL (DIRECT)
      # ======================
      - name: Ingestão API-FOOTBALL
        env:
          API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball.py ] || { echo "::error::scripts/ingest_odds_apifootball.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      # ======================
      # INGESTÃO DE ODDS — THEODDSAPI
      # ======================
      - name: Ingestão TheOddsAPI
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "${ALIASES_JSON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      # ======================
      # PREPARAR WHITELIST (SE AUSENTE)
      # ======================
      - name: Preparar whitelist (se ausente)
        shell: bash
        run: |
          set -euo pipefail
          # Chama o script Python dedicado para evitar erros de sintaxe YAML
          python -m scripts.prepare_whitelist --rodada "${OUT_DIR}"
          WL="${OUT_DIR}/matches_whitelist.csv"
          test -s "$WL" || echo "::notice::Whitelist não gerada (nenhum dado de odds encontrado)."

      # ======================
      # CONSENSO DE ODDS (MODO ESTRITO)
      # ======================
      - name: Consenso de odds (estrito)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      # ======================
      # TREINAMENTO: MODELO DINÂMICO BIVARIATE POISSON (AGORA CRÍTICO)
      # ======================
      - name: Treinar Modelo Dinâmico (State Space / Kalman Filter)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 12; }
          python -m scripts.train_dynamic_model --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/dynamic_params.json"
          test -s "$OUT" || { echo "::error::dynamic_params.json not generated"; exit 12; }

      # ======================
      # xG UNIVARIATE (OBRIGATÓRIO) - Mantido
      # ======================
      - name: xG Univariate (obrigatório)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_univariate.py ] || { echo "::error::scripts/xg_univariate.py not found"; exit 7; }
          python -m scripts.xg_univariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_univariate.csv"
          test -s "$OUT" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      # ======================
      # xG BIVARIATE (AGORA COM INTELIGÊNCIA DINÂMICA)
      # ======================
      - name: xG Bivariate (obrigatório)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 8; }
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/xg_bivariate.csv"
          test -s "$OUT" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      # ======================
      # CALIBRAÇÃO DE PROBABILIDADES (AGORA ESTATÍSTICA)
      # ======================
      - name: Calibrar probabilidades
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/probs_calibrated.csv"
          test -s "$OUT" || { echo "::error::probs_calibrated.csv not generated"; exit 9; }

      # ======================
      # APOSTAS (KELLY)
      # ======================
      - name: Gerar stakes (Kelly)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}"
          OUT="${OUT_DIR}/kelly_stakes.csv"
          test -s "$OUT" || { echo "::error::kelly_stakes.csv not generated"; exit 10; }

      # ======================
      # GERAR TICKET LOTECA
      # ======================
      - name: Montar ticket Loteca
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}"
          OUT="${OUT_DIR}/loteca_ticket.csv"
          test -s "$OUT" || { echo "::error::loteca_ticket.csv not generated"; exit 11; }

      - name: Publicar artefatos da rodada
        uses: actions/upload-artifact@v4
        with:
          name: loteca_${{ steps.prep.outputs.RUN_ID }}
          path: |
            ${{ env.OUT_DIR }}/*.csv
            ${{ env.OUT_DIR }}/*.json
            ${{ env.OUT_DIR }}/*.txt
          if-no-files-found: error
