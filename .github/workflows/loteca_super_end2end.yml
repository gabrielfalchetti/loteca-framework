name: Loteca Super End-to-End

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Temporada alvo (ex.: 2025)"
        required: false
        default: "2025"
      lookahead_days:
        description: "Dias à frente para buscar jogos/odds"
        required: false
        default: "3"
      regions:
        description: "Regiões TheOddsAPI (uk,eu,us,au)"
        required: false
        default: "uk,eu,us,au"
      bankroll:
        description: "Bankroll para Kelly"
        required: false
        default: "1000"
      kelly_fraction:
        description: "Fração de Kelly (0-1)"
        required: false
        default: "0.5"
      kelly_cap:
        description: "Teto por aposta (0-1)"
        required: false
        default: "0.1"
      kelly_top_n:
        description: "Número máximo de apostas"
        required: false
        default: "14"
      round_to:
        description: "Arredondamento de stake"
        required: false
        default: "1"
      train_calibrator:
        description: "Treinar calibrador? (true/false)"
        required: false
        default: "false"

  push:
    branches: [ "main" ]
    paths:
      - "scripts/**"
      - "data/in/**"
      - ".github/workflows/loteca_super_end2end.yml"
      - "requirements.txt"
      - "pyproject.toml"

concurrency:
  group: loteca-super-e2e
  cancel-in-progress: false

jobs:
  loteca:
    runs-on: ubuntu-latest
    env:
      SEASON: ${{ inputs.season || '2025' }}
      LOOKAHEAD_DAYS: ${{ inputs.lookahead_days || '3' }}
      REGIONS: ${{ inputs.regions || 'uk,eu,us,au' }}
      BANKROLL: ${{ inputs.bankroll || '1000' }}
      KELLY_FRACTION: ${{ inputs.kelly_fraction || '0.5' }}
      KELLY_CAP: ${{ inputs.kelly_cap || '0.1' }}
      KELLY_TOP_N: ${{ inputs.kelly_top_n || '14' }}
      ROUND_TO: ${{ inputs.round_to || '1' }}
      TRAIN_CALIBRATOR: ${{ inputs.train_calibrator || 'false' }}
      SOURCE_CSV: data/in/matches_source.csv

      # Segredos: certifique-se de configurá-los em Settings > Secrets and variables > Actions
      API_FOOTBALL_KEY: ${{ secrets.API_FOOTBALL_KEY }}
      THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (with parquet + matching)
        run: |
          set -euo pipefail
          python -m pip install -U pip wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Garantias para falhas anteriores:
          pip install \
            pandas numpy scipy scikit-learn statsmodels \
            pyarrow fastparquet \
            requests python-dateutil tqdm \
            unidecode rapidfuzz \
            pyyaml
          # (opcional) W&B
          if [ -n "${WANDB_API_KEY:-}" ]; then
            pip install wandb
          fi

      - name: Prepare OUT_DIR and whitelist
        run: |
          set -euo pipefail
          OUT_DIR="data/out/${{ github.run_id }}"
          echo "OUT_DIR=${OUT_DIR}" >> $GITHUB_ENV
          mkdir -p "${OUT_DIR}"

          # Validar fonte dos jogos
          if [ ! -s "${SOURCE_CSV}" ]; then
            echo "::error::Arquivo ${SOURCE_CSV} não encontrado ou vazio. Crie-o com cabeçalho: match_id,home,away"
            exit 4
          fi
          header="$(head -n1 "${SOURCE_CSV}" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' em ${SOURCE_CSV}"; exit 4; }
          done
          cp -f "${SOURCE_CSV}" "${OUT_DIR}/matches_whitelist.csv"
          echo "::notice::Whitelist copiada para ${OUT_DIR}/matches_whitelist.csv"

      - name: Update history (API-Football) + stub se falhar
        run: |
          set -euo pipefail
          # tenta baixar partidas finalizadas dos últimos 30 dias
          python -m scripts.update_history --since_days 30 --out "data/history/results.csv" || true

          # se não existe, vazio ou só cabeçalho, criamos um stub para destravar o pipeline
          if [ ! -s "data/history/results.csv" ] || [ "$(wc -l < data/history/results.csv)" -le 1 ]; then
            mkdir -p data/history
            printf "date,home,away,home_goals,away_goals\n1970-01-01,BOOT,BOOT,0,0\n" > data/history/results.csv
            echo "::notice::Sem histórico recente; criado stub (BOOT vs BOOT 0-0)."
          fi

          # sanidade de cabeçalhos
          header="$(head -n1 data/history/results.csv | tr -d '\r')"
          for c in date home away home_goals away_goals; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::history sem coluna '$c'"; exit 1; }
          done

          test -s "data/history/results.csv" || { echo "::error::history results.csv not generated"; exit 1; }

      - name: Feature engineering
        run: |
          set -euo pipefail
          [ -f scripts/feature_engineer.py ] || { echo "::error::scripts/feature_engineer.py not found"; exit 2; }
          python -m scripts.feature_engineer \
            --history "data/history/results.csv" \
            --out "data/history/features.parquet" \
            --ewma 0.20
          test -s "data/history/features.parquet" || { echo "::error::features.parquet not generated"; exit 2; }

      - name: Enrich features with API-Football
        run: |
          set -euo pipefail
          if [ -z "${API_FOOTBALL_KEY:-}" ]; then
            echo "::notice::API_FOOTBALL_KEY não configurada; pulando enrich_api_football."
            exit 0
          fi
          [ -f scripts/enrich_api_football.py ] || { echo "::notice::sem scripts/enrich_api_football.py (ok)"; exit 0; }
          python -m scripts.enrich_api_football \
            --features_in "data/history/features.parquet" \
            --features_out "${OUT_DIR}/features_ext.parquet" || true
          if [ -s "${OUT_DIR}/features_ext.parquet" ]; then
            echo "FEATURES_PARQUET=${OUT_DIR}/features_ext.parquet" >> $GITHUB_ENV
          else
            echo "::notice::Sem enrich; usando features originais."
            echo "FEATURES_PARQUET=data/history/features.parquet" >> $GITHUB_ENV
          fi

      - name: Train Dynamic Model (alpha/beta states)
        run: |
          set -euo pipefail
          [ -f scripts/train_dynamic_model.py ] || { echo "::error::scripts/train_dynamic_model.py not found"; exit 2; }
          python -m scripts.train_dynamic_model \
            --features "${FEATURES_PARQUET}" \
            --out_state "${OUT_DIR}/state_params.json"
          test -s "${OUT_DIR}/state_params.json" || { echo "::error::state_params.json not generated"; exit 2; }

      - name: Normalize matches (auto-PT/EN + BR clubes)
        run: |
          set -euo pipefail
          [ -f scripts/normalize_matches.py ] || { echo "::error::scripts/normalize_matches.py not found"; exit 3; }
          python -m scripts.normalize_matches \
            --in_csv  "${SOURCE_CSV}" \
            --out_csv "${OUT_DIR}/matches_norm.csv"
          test -s "${OUT_DIR}/matches_norm.csv" || { echo "::error::matches_norm.csv not generated"; exit 3; }

      - name: Ingest odds — TheOddsAPI (obrigatório)
        run: |
          set -euo pipefail
          if [ -z "${THEODDS_API_KEY:-}" ]; then
            echo "::error::THEODDS_API_KEY não configurada; não é possível consultar odds."
            exit 5
          fi
          python -m scripts.ingest_odds_theoddsapi \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --source_csv "${OUT_DIR}/matches_norm.csv"
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }

      - name: Ingest odds — API-Football (opcional, odds ou metadados de fixture)
        run: |
          set -euo pipefail
          if [ -z "${API_FOOTBALL_KEY:-}" ]; then
            echo "::notice::API_FOOTBALL_KEY não configurada; pulando ingest_odds_apifootball."
            exit 0
          fi
          if [ ! -f scripts/ingest_odds_apifootball.py ]; then
            echo "::notice::sem scripts/ingest_odds_apifootball.py (ok)"
            exit 0
          fi
          python -m scripts.ingest_odds_apifootball \
            --rodada "${OUT_DIR}" \
            --source_csv "${OUT_DIR}/matches_norm.csv" || true
          [ -s "${OUT_DIR}/odds_apifootball.csv" ] || echo "::notice::odds_apifootball.csv não gerado (ok)"

      - name: Consensus odds (strict)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

      - name: Predict — xG bivariado (usa state_params.json)
        run: |
          set -euo pipefail
          [ -f scripts/predict_bivariate_xg.py ] || { echo "::error::scripts/predict_bivariate_xg.py not found"; exit 7; }
          python -m scripts.predict_bivariate_xg \
            --state "${OUT_DIR}/state_params.json" \
            --matches "${OUT_DIR}/matches_norm.csv" \
            --odds "${OUT_DIR}/odds_consensus.csv" \
            --out   "${OUT_DIR}/pred_xg.csv"
          test -s "${OUT_DIR}/pred_xg.csv" || { echo "::error::pred_xg.csv not generated"; exit 7; }

      - name: (Opcional) Train Calibrator
        if: ${{ env.TRAIN_CALIBRATOR == 'true' }}
        run: |
          set -euo pipefail
          if [ ! -f scripts/train_calibrator.py ]; then
            echo "::notice::sem scripts/train_calibrator.py (ok, pulando)"
            exit 0
          fi
          python -m scripts.train_calibrator \
            --features "${FEATURES_PARQUET}" \
            --out      "${OUT_DIR}/calibrator.pkl"
          [ -s "${OUT_DIR}/calibrator.pkl" ] || echo "::notice::calibrator.pkl não gerado"

      - name: Calibrate probabilities (usa calibrator.pkl se existir)
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 8; }
          CALIB="${OUT_DIR}/calibrator.pkl"
          if [ -s "${CALIB}" ]; then
            python -m scripts.calibrate_probs \
              --in  "${OUT_DIR}/pred_xg.csv" \
              --cal "${CALIB}" \
              --out "${OUT_DIR}/probs_calibrated.csv"
          else
            echo "::notice::Sem calibrator.pkl — copiando probabilidades brutas"
            cp -f "${OUT_DIR}/pred_xg.csv" "${OUT_DIR}/probs_calibrated.csv"
          fi
          test -s "${OUT_DIR}/probs_calibrated.csv" || { echo "::error::probs_calibrated.csv not generated"; exit 8; }

      - name: Kelly bets
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 9; }
          python -m scripts.kelly_bets \
            --probs   "${OUT_DIR}/probs_calibrated.csv" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap      "${KELLY_CAP}" \
            --top_n    "${KELLY_TOP_N}" \
            --round_to "${ROUND_TO}" \
            --out      "${OUT_DIR}/kelly_bets.csv"
          test -s "${OUT_DIR}/kelly_bets.csv" || { echo "::error::kelly_bets.csv not generated"; exit 9; }

      - name: Montar Cartão Loteca
        run: |
          set -euo pipefail
          [ -f scripts/montar_cartao_loteca.py ] || { echo "::error::scripts/montar_cartao_loteca.py not found"; exit 10; }
          python -m scripts.montar_cartao_loteca \
            --matches "${OUT_DIR}/matches_norm.csv" \
            --bets    "${OUT_DIR}/kelly_bets.csv" \
            --out     "${OUT_DIR}/cartao_loteca.csv"
          test -s "${OUT_DIR}/cartao_loteca.csv" || { echo "::error::cartao_loteca.csv not generated"; exit 10; }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: loteca-${{ github.run_id }}
          path: |
            ${{ env.OUT_DIR }}/**
            data/history/results.csv
            data/history/features.parquet
          if-no-files-found: warn