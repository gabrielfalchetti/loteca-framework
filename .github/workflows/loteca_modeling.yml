name: Loteca Modeling (Fase 2)

on:
  workflow_dispatch:
    inputs:
      rodada:
        description: 'Identificador da rodada (ex.: 2025-10-05_14)'
        required: true
        type: string

jobs:
  modeling:
    runs-on: ubuntu-latest
    env:
      LOTECA_RODADA: ${{ inputs.rodada }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (modeling)
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy scikit-learn joblib

      # <<< NOVO: garante matches.csv se faltar >>>
      - name: Ensure matches.csv (auto-generate if missing)
        shell: bash
        run: |
          set -e
          if [ -s "data/out/${LOTECA_RODADA}/matches.csv" ]; then
            echo "[ensure] matches.csv já existe."
          else
            if [ -s "data/in/${LOTECA_RODADA}/matches_source.csv" ]; then
              echo "[ensure] Gerando matches.csv a partir de data/in/${LOTECA_RODADA}/matches_source.csv"
              python scripts/ingest_matches.py --rodada "${LOTECA_RODADA}"
            else
              echo "::error::data/in/${LOTECA_RODADA}/matches_source.csv ausente. Crie este arquivo (match_id,home,away[,date]) e rode novamente."
              echo "Exemplo de conteúdo:"
              cat <<'CSV'
match_id,home,away,date
1,Corinthians,Flamengo,
2,Fortaleza,Sport Recife,
3,Juventude,Internacional,
4,Vasco da Gama,Cruzeiro,
5,Athletico Paranaense,Operario PR,
6,Atletico Mineiro,Mirassol,
7,Gremio,Vitoria,
8,Aston Villa,Fulham,
9,Bahia,Palmeiras,
10,Fluminense,Botafogo,
11,Criciuma,Paysandu,
12,Newcastle United,Arsenal,
13,Bragantino,Santos,
14,Barcelona,Real Sociedad,
CSV
              exit 2
            fi
          fi
          test -s "data/out/${LOTECA_RODADA}/matches.csv" || { echo "::error::matches.csv ainda ausente."; exit 2; }

      - name: Gera xG e probs 1X2 (Poisson)
        run: |
          python scripts/features_xg.py --rodada "${LOTECA_RODADA}"
          test -s "data/out/${LOTECA_RODADA}/xg_features.csv" || { echo "::error::xg_features.csv ausente"; exit 2; }
          head -n 5 "data/out/${LOTECA_RODADA}/xg_features.csv" || true

      - name: Treina calibração isotônica (histórico)
        run: |
          if [ -s "data/history/calibration.csv" ]; then
            python scripts/calib_isotonic.py --history-path "data/history/calibration.csv" --out-path "models/calib_isotonic.pkl"
          else
            echo "[calib] histórico ausente; pulando calibração (stack usará probs sem isotônica)."
          fi
          ls -lah models || true

      - name: Stacking (consenso + xG) + calibração
        run: |
          test -s "data/out/${LOTECA_RODADA}/odds.csv" || { echo "::error::odds.csv ausente (rode pipeline principal antes)"; exit 2; }
          python scripts/stack_probs.py --rodada "${LOTECA_RODADA}" --w-consensus 0.6 --w-xg 0.4 --calib-path "models/calib_isotonic.pkl"
          test -s "data/out/${LOTECA_RODADA}/joined_stacked.csv" || { echo "::error::joined_stacked.csv ausente"; exit 2; }
          head -n 5 "data/out/${LOTECA_RODADA}/joined_stacked.csv" || true

      - name: Upload artifacts (modeling)
        uses: actions/upload-artifact@v4
        with:
          name: modeling-${{ inputs.rodada }}
          path: |
            data/out/${{ inputs.rodada }}/xg_features.csv
            data/out/${{ inputs.rodada }}/joined_stacked.csv
            models/calib_isotonic.pkl
          if-no-files-found: warn
