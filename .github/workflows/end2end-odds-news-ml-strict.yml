name: End2End Odds + News + ML (Strict)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_WARN_SCRIPT_LOCATION: "1"

  # ===== Defaults do pipeline =====
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  LOOKAHEAD_DAYS: "3"

  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"

  # Ativar logs extras nos scripts Python
  DEBUG: "true"

permissions:
  contents: read

jobs:
  # -------------------------------------------------------------------
  # Lint (não bloqueia o pipeline; roda em paralelo)
  # -------------------------------------------------------------------
  lint_workflows:
    name: Lint workflows (yamllint + actionlint)
    runs-on: ubuntu-24.04
    continue-on-error: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yamllint
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y yamllint
          yamllint --version

      - name: Install actionlint
        run: |
          set -euo pipefail
          ver="1.7.1"
          tgz="actionlint_${ver}_linux_amd64.tar.gz"
          url="https://github.com/rhysd/actionlint/releases/download/v${ver}/${tgz}"
          curl -sSL "$url" -o "$tgz"
          sudo tar -C /usr/local/bin -xzf "$tgz" actionlint
          actionlint -version

      - name: Run yamllint
        run: |
          set -euo pipefail
          yamllint .github/workflows/*.yml

      - name: Run actionlint (all workflows)
        run: |
          set -euo pipefail
          actionlint -color -verbose

  # -------------------------------------------------------------------
  # Pipeline end-to-end principal (completo)
  # -------------------------------------------------------------------
  e2e_odds_news_ml:
    name: End2End pipeline
    runs-on: ubuntu-24.04
    if: ${{ always() }}  # garante execução mesmo se o lint falhar

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system & Python deps
        run: |
          set -euo pipefail
          sudo apt-get update -qq
          sudo apt-get install -y jq moreutils
          python -m pip install --upgrade pip
          # Se existir requirements.txt, instala; caso contrário, segue
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Pacotes usados pelos scripts de ingest/consenso
          pip install unidecode requests pandas numpy python-dateutil

      - name: Init run id and env
        id: init
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" >> "$GITHUB_ENV"
          if [ "${DEBUG:-}" = "true" ] || [ "${DEBUG:-}" = "1" ]; then
            echo "DEBUG_FLAG=--debug" >> "$GITHUB_ENV"
          else
            echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          fi
          mkdir -p "data/in" "${OUT_DIR}"
          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      - name: Ensure input files exist
        shell: bash
        run: |
          set -euo pipefail
          # aliases.json padrão, se não existir
          if [ ! -s "data/in/aliases.json" ]; then
            echo '{"teams": {}}' > data/in/aliases.json
          fi
          # matches_source.csv é obrigatório
          if [ ! -s "data/in/matches_source.csv" ]; then
            echo "::error::Arquivo obrigatório ausente: data/in/matches_source.csv"
            exit 2
          fi

      - name: Normalize matches_source -> matches_whitelist (+ validação)
        shell: bash
        run: |
          set -euo pipefail
          SRC="data/in/matches_source.csv"
          DST_RAW="${OUT_DIR}/matches_whitelist_raw.csv"
          DST_NORM="${OUT_DIR}/matches_whitelist.csv"

          # Normalização básica de espaços e CRLF
          tr -d '\r' < "$SRC" \
            | sed -E 's/[[:space:]]+/ /g; s/ *, */,/g; s/^ //; s/ $//' > "$DST_RAW"

          header="$(head -n1 "$DST_RAW")"
          h_low="$(echo "$header" | tr '[:upper:]' '[:lower:]')"
          for need in match_id home away; do
            echo "$h_low" | grep -qiE "(^|,)$need(,|$)" \
              || { echo "::error::missing column '$need' in matches_source.csv"; exit 2; }
          done

          # Validação + mapeamentos PT->EN e remoção de UF
          awk -F',' -v OFS=',' '
            function rmuf(s){ gsub(/\/[A-Za-z]{2}($|[^A-Za-z])/, "", s); return s }
            function deacc(s){
              gsub(/á|à|ã|â|ä/,"a",s); gsub(/Á|À|Ã|Â|Ä/,"A",s);
              gsub(/é|ê|è|ë/,"e",s);  gsub(/É|Ê|È|Ë/,"E",s);
              gsub(/í|î|ì|ï/,"i",s);  gsub(/Í|Î|Ì|Ï/,"I",s);
              gsub(/ó|ô|ò|õ|ö/,"o",s); gsub(/Ó|Ô|Ò|Õ|Ö/,"O",s);
              gsub(/ú|û|ù|ü/,"u",s);  gsub(/Ú|Û|Ù|Ü/,"U",s);
              gsub(/ç/,"c",s);        gsub(/Ç/,"C",s);
              gsub(/ñ/,"n",s);        gsub(/Ñ/,"N",s); return s
            }
            function trim(s){ sub(/^ +/,"",s); sub(/ +$/,"",s); return s }
            function map_pt_en(s,  l){
              l=tolower(s)
              if(l=="estonia") return "Estonia"
              if(l=="italia") return "Italy"
              if(l=="bulgaria") return "Bulgaria"
              if(l=="turquia") return "Turkey"
              if(l=="espanha") return "Spain"
              if(l=="georgia") return "Georgia"
              if(l=="servia" || l=="serbia/ser" || l=="serbia") return "Serbia"
              if(l=="albania") return "Albania"
              if(l=="portugal") return "Portugal"
              if(l=="irlanda") return "Ireland"
              if(l=="holanda" || l=="paises baixos") return "Netherlands"
              if(l=="finlandia") return "Finland"
              if(l=="romenia") return "Romania"
              if(l=="austria") return "Austria"
              if(l=="dinamarca") return "Denmark"
              if(l=="grecia") return "Greece"
              if(l=="lituania") return "Lithuania"
              if(l=="polonia") return "Poland"
              if(l=="ponte preta") return "Ponte Preta"
              if(l=="guarani") return "Guarani"
              if(l=="palmeiras") return "Palmeiras"
              if(l=="juventude") return "Juventude"
              if(l=="criciuma") return "Criciuma"
              if(l=="america/mg" || l=="america mg" || l=="america-mg" || l=="america mineiro")
                return "America Mineiro"
              if(l=="cuiaba") return "Cuiaba"
              if(l=="coritiba") return "Coritiba"
              if(l=="novorizontino" || l=="gremio novorizontino" || l=="grêmio novorizontino")
                return "Gremio Novorizontino"
              if(l=="operario" || l=="operario pr" || l=="operario/pr" || l=="operário/pr")
                return "Operario PR"
              return s
            }
            NR==1{
              for(i=1;i<=NF;i++){
                k=tolower($i);
                if(k=="match_id") mi=i;
                if(k=="home") hi=i;
                if(k=="away") ai=i;
              }
              if(!(mi&&hi&&ai)){ print "::error::header mapping failed"; exit 2 }
              print "match_id","home","away"; next
            }
            {
              mid=$mi; home=$hi; away=$ai;
              home=rmuf(home); away=rmuf(away);
              home=deacc(home); away=deacc(away);
              home=trim(home);  away=trim(away);
              home=map_pt_en(home); away=map_pt_en(away);
              if(mid=="" || home=="" || away==""){
                print "::error::empty field on line " NR; exit 2
              }
              if(seen[mid]++){ print "::error::duplicate match_id: " mid; exit 2 }
              print mid,home,away
            }' "$DST_RAW" > "$DST_NORM"

          LINES=$(wc -l < "$DST_NORM" | tr -d " ")
          [ "$LINES" -ge 2 ] || {
            echo "::error::whitelist empty after normalization"; exit 3; }

          echo "===== Preview normalized whitelist ====="
          head -n 30 "$DST_NORM" || true

      - name: Ingest odds — API-Football (RapidAPI)
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] \
            || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py not found"; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1))
            echo "retry apifootball: $a/3"
            sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" \
            || { echo "::error::odds_apifootball.csv not generated"; exit 5; }

          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      - name: Ingest odds — TheOddsAPI
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] \
            || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/in/aliases.json" \
              ${DEBUG_FLAG} && break
            a=$((a+1))
            echo "retry theodds: $a/3"
            sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" \
            || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }

          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      - name: Consensus odds (strict)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] \
            || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }

          python -m scripts.consensus_odds_safe \
            --rodada "${OUT_DIR}" \
            --strict

          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" \
            || { echo "::error::odds_consensus.csv not generated"; exit 6; }

          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" \
              || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done

          echo "===== odds_consensus preview ====="
          head -n 20 "$OUT_FILE" || true

      - name: Upload OUT_DIR artifact
        uses: actions/upload-artifact@v4
        with:
          name: end2end-${{ steps.init.outputs.RUN_ID }}
          path: ${{ env.OUT_DIR }}
          if-no-files-found: error