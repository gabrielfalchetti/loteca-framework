name: End2End Odds + News + ML

on:
  workflow_dispatch:
    inputs:
      matches_inline:
        description: 'CSV inline para data/in/matches_source.csv (opcional)'
        required: false
        default: ""
  schedule:
    - cron: '0 12 * * *'

jobs:
  end2end:
    runs-on: ubuntu-latest

    env:
      SEASON: 2025
      REGIONS: uk,eu,us,au
      BANKROLL: 1000
      KELLY_FRACTION: 0.5
      KELLY_CAP: 0.1
      ROUND_TO: 1
      KELLY_TOP_N: 14
      DEBUG: true

      # >>> PARA ARGENTINA (seus jogos de teste de hoje)
      ODDS_SPORTS: soccer_argentina_primera_division,soccer_argentina_primera_nacional

      # Se não for usar API-Football agora, deixe vazio:
      APIFOOT_LEAGUE_IDS: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Definir identificadores
        id: ids
        run: |
          # O consenso/predict/build_cartao/publish_kelly esperam SÓ o ID,
          # pois eles mesmos prefixam "data/out/".
          echo "RODADA_ID=${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "OUT_DIR=data/out/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "rodada_id=${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT
          echo "out_dir=data/out/${GITHUB_RUN_ID}" >> $GITHUB_OUTPUT

      - name: Criar data/in e matches_source.csv (se veio inline)
        run: |
          set -e
          mkdir -p data/in
          if [ -n "${{ github.event.inputs.matches_inline }}" ]; then
            echo "${{ github.event.inputs.matches_inline }}" > data/in/matches_source.csv
          fi

      - name: Verificar matches_source.csv
        run: |
          set -e
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Arquivo $FILE não encontrado. Crie-o com colunas: home,away"
            exit 2
          fi
          echo "Entrada OK: $FILE"
          echo "==== CONTEÚDO matches_source.csv ===="
          cat "$FILE" || true
          echo "====================================="

      - name: Coletar odds (TheOddsAPI) -> grava em ${OUT_DIR}
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -e
          python scripts/ingest_odds_theoddsapi_safe.py \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --debug

          ls -la "${OUT_DIR}" || true
          echo "==== odds_theoddsapi.csv (preview) ===="
          (head -n 20 "${OUT_DIR}/odds_theoddsapi.csv" || true)
          echo "======================================="

      # Se quiser ligar o API-Football depois, mantemos este passo opcional:
      - name: (Opcional) Coletar odds via API-Football (RapidAPI)
        if: ${{ env.APIFOOT_LEAGUE_IDS != '' }}
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -e
          python -m scripts.ingest_odds_apifootball_rapidapi \
            --rodada "${RODADA_ID}" \
            --season "${SEASON}" \
            --window 2 \
            --aliases "data/aliases_br.json" \
            --debug || true
          # Esse coletor escreve em data/out/${RODADA_ID}/odds_apifootball.csv
          ls -la "data/out/${RODADA_ID}" || true

      - name: Montar consenso de odds
        run: |
          set -e
          # ATENÇÃO: consenso espera SÓ o ID.
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          echo "==== odds_consensus.csv (preview) ===="
          (head -n 20 "data/out/${RODADA_ID}/odds_consensus.csv" || true)
          echo "======================================"

      - name: Prever resultados a partir das odds
        run: |
          set -e
          # predict também espera SÓ o ID
          python scripts/predict_from_odds.py --rodada "${RODADA_ID}" --debug
          ls -la "data/out/${RODADA_ID}" || true
          echo "==== predictions_market.csv (preview) ===="
          (head -n 20 "data/out/${RODADA_ID}/predictions_market.csv" || true)
          echo "=========================================="

      - name: Montar cartão (Loteca)
        run: |
          set -e
          python scripts/build_cartao.py --rodada "${RODADA_ID}"
          echo "==== loteca_cartao.txt ===="
          cat "data/out/${RODADA_ID}/loteca_cartao.txt" || true
          echo "==========================="

      - name: Kelly (publicação das stakes)
        run: |
          set -e
          python scripts/publish_kelly.py --rodada "${RODADA_ID}" --debug
          echo "==== kelly_stakes.csv (preview) ===="
          (head -n 20 "data/out/${RODADA_ID}/kelly_stakes.csv" || true)
          echo "===================================="

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: loteca_full_${{ steps.ids.outputs.rodada_id }}
          path: |
            data/out/${{ steps.ids.outputs.rodada_id }}/odds_theoddsapi.csv
            data/out/${{ steps.ids.outputs.rodada_id }}/unmatched_theoddsapi.csv
            data/out/${{ steps.ids.outputs.rodada_id }}/odds_apifootball.csv
            data/out/${{ steps.ids.outputs.rodada_id }}/unmatched_apifootball.csv
            data/out/${{ steps.ids.outputs.rodada_id }}/odds_consensus.csv
            data/out/${{ steps.ids.outputs.rodada_id }}/predictions_market.csv
            data/out/${{ steps.ids.outputs.rodada_id }}/loteca_cartao.txt
            data/out/${{ steps.ids.outputs.rodada_id }}/kelly_stakes.csv