name: end2end-odds-news-ml

on:
  workflow_dispatch: {}
  push:
    paths:
      - ".github/workflows/end2end-odds-news-ml.yml"
      - "scripts/**"
      - "data/in/matches_source.csv"
      - "requirements.txt"

jobs:
  end2end:
    runs-on: ubuntu-latest
    env:
      # === Configs padrão (ajuste se quiser) ===
      SEASON: "2025"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      ROUND_TO: "1"
      KELLY_TOP_N: "14"
      DEBUG: "true"
      # habilite/desabilite as integrações (true/false)
      APIFOOT_ENABLED: "true"
      NEWS_ENABLED: "true"
      INJURIES_ENABLED: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Garantias mínimas
          pip install pandas numpy requests scikit-learn

      - name: Prepare run IDs and folders
        id: prep
        run: |
          set -e
          # Um ID estável por execução
          export RODADA_ID="${GITHUB_RUN_ID}"
          export OUT_DIR="data/out/${RODADA_ID}"
          echo "RODADA_ID=${RODADA_ID}" >> $GITHUB_ENV
          echo "OUT_DIR=${OUT_DIR}" >> $GITHUB_ENV

          mkdir -p "${OUT_DIR}"
          echo "Saída: ${OUT_DIR}"

          # matches_source centralizado (sem subpasta por rodada)
          FILE_IN="data/in/matches_source.csv"
          if [ ! -f "${FILE_IN}" ]; then
            echo "::error::Arquivo obrigatório não encontrado: ${FILE_IN}"
            exit 2
          fi
          echo "Entrada OK: ${FILE_IN}"

      - name: Optional login to Weights & Biases
        if: env.WANDB_API_KEY != ''
        env:
          WANDB_API_KEY: ${{ env.WANDB_API_KEY }}
        run: |
          set -e
          echo "W&B login..."
          python - << 'PY'
import os, subprocess
key=os.environ.get("WANDB_API_KEY")
raise SystemExit(0) if not key else subprocess.run(["wandb","login",key], check=False)
PY

      # =========================
      # 1) COLETA DE ODDS
      # =========================
      - name: Ingest TheOddsAPI
        env:
          THEODDS_API_KEY: ${{ env.THEODDS_API_KEY }}
        run: |
          set -e
          if [ -z "${THEODDS_API_KEY}" ]; then
            echo "::error::THEODDS_API_KEY não definido."
            exit 3
          fi
          if [ ! -f "scripts/ingest_odds_theoddsapi_safe.py" ]; then
            echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."
            exit 4
          fi
          python scripts/ingest_odds_theoddsapi_safe.py \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --debug

          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado."; exit 5; }

      - name: Ingest API-Football (enabled only if APIFOOT_ENABLED=true)
        if: env.APIFOOT_ENABLED == 'true'
        env:
          X_RAPIDAPI_KEY: ${{ env.X_RAPIDAPI_KEY }}
        run: |
          set -e
          echo "[apifootball] enabled=${APIFOOT_ENABLED}"
          if [ -z "${X_RAPIDAPI_KEY}" ]; then
            echo "::error::X_RAPIDAPI_KEY não definido (API-Football)."
            exit 6
          fi
          if [ ! -f "scripts/ingest_odds_apifootball_rapidapi.py" ]; then
            echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."
            exit 7
          fi
          # OBS: este script NÃO aceita --leagues; usa janela/fuzzy/aliases internos
          python -m scripts.ingest_odds_apifootball_rapidapi \
            --rodada "${OUT_DIR}" \
            --season "${SEASON}" \
            --debug || { echo "::warning::Falha API-Football odds. Continuando com fontes disponíveis."; }

      - name: API-Football disabled notice
        if: env.APIFOOT_ENABLED != 'true'
        run: echo "[notice] API-Football desabilitado por configuração."

      # =========================
      # 2) CONSOLIDAÇÃO DE ODDS
      # =========================
      - name: Consensus Odds
        run: |
          set -e
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          test -s "data/out/${RODADA_ID}/odds_consensus.csv" || { echo "::error::odds_consensus.csv não gerado."; exit 8; }
          head -n 20 "data/out/${RODADA_ID}/odds_consensus.csv" || true

      # =========================
      # 3) SINAIS EXTERNOS (ANTES DE PREVER)
      # =========================
      - name: Ingest News (optional)
        if: env.NEWS_ENABLED == 'true'
        env:
          NEWSAPI_KEY: ${{ env.NEWSAPI_KEY }}
        run: |
          set -e
          if [ ! -f "scripts/news_ingest_safe.py" ]; then
            echo "::warning::news_ingest_safe.py ausente — pulando news."
            exit 0
          fi
          if [ -z "${NEWSAPI_KEY}" ]; then
            echo "::warning::NEWSAPI_KEY ausente — pulando news."
            exit 0
          fi
          python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}" || echo "::warning::Falha news — continuando"
          ls -la "${OUT_DIR}" || true

      - name: Injuries via API-Football (optional)
        if: env.INJURIES_ENABLED == 'true'
        env:
          X_RAPIDAPI_KEY: ${{ env.X_RAPIDAPI_KEY }}
        run: |
          set -e
          if [ ! -f "scripts/apifootball_injuries_safe.py" ]; then
            echo "::warning::apifootball_injuries_safe.py ausente — pulando injuries."
            exit 0
          fi
          if [ -z "${X_RAPIDAPI_KEY}" ]; then
            echo "::warning::X_RAPIDAPI_KEY ausente — pulando injuries."
            exit 0
          fi
          python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" || echo "::warning::Falha injuries — continuando"

      # =========================
      # 4) PREVISÃO + KELLY
      # =========================
      - name: Predict from Market Odds
        run: |
          set -e
          if [ ! -f "scripts/predict_from_odds.py" ]; then
            echo "::error::scripts/predict_from_odds.py não encontrado."
            exit 9
          fi
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado."; exit 10; }

      - name: Kelly publish
        run: |
          set -e
          if [ ! -f "scripts/publish_kelly.py" ]; then
            echo "::error::scripts/publish_kelly.py não encontrado."
            exit 11
          fi
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado."; exit 12; }

      # =========================
      # 5) SANITY / REALIDADE (antes do cartão)
      # =========================
      - name: Sanity and Reality Check
        run: |
          set -e
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"
          # hard guard: todos os artefatos essenciais precisam existir
          for f in odds_theoddsapi.csv odds_consensus.csv predictions_market.csv kelly_stakes.csv; do
            test -s "${OUT_DIR}/${f}" || { echo "::error::Arquivo obrigatório ausente: ${OUT_DIR}/${f}"; exit 14; }
          done

      # =========================
      # 6) CARTÃO
      # =========================
      - name: Build Loteca Card
        run: |
          set -e
          if [ ! -f "scripts/build_cartao.py" ]; then
            echo "::error::scripts/build_cartao.py não encontrado."
            exit 15
          fi
          python scripts/build_cartao.py --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_cartao.txt" || { echo "::error::loteca_cartao.txt não gerado."; exit 16; }
          echo "==== CARTÃO ===="
          cat "${OUT_DIR}/loteca_cartao.txt" || true
          echo "================"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: loteca_full_${{ env.RODADA_ID }}
          path: |
            ${{ env.OUT_DIR }}/*.csv
            ${{ env.OUT_DIR }}/*.txt
          if-no-files-found: error