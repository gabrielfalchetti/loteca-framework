name: End2End Odds + News + ML

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Season year"
        required: true
        default: "2025"
      regions:
        description: "TheOdds regions (comma)"
        required: true
        default: "uk,eu,us,au"
      lookahead_days:
        description: "Days ahead to look"
        required: true
        default: "3"
      bankroll:
        description: "Bankroll base"
        required: true
        default: "1000"
      kelly_fraction:
        description: "Kelly fraction"
        required: true
        default: "0.5"
      kelly_cap:
        description: "Kelly cap"
        required: true
        default: "0.1"
      kelly_top_n:
        description: "Kelly top N"
        required: true
        default: "14"
      round_to:
        description: "Round stakes to"
        required: true
        default: "1"
      debug:
        description: "Enable debug logs"
        required: true
        default: "true"
  push:
    branches:
      - main
      - master

env:
  SEASON: ${{ github.event.inputs.season || '2025' }}
  REGIONS: ${{ github.event.inputs.regions || 'uk,eu,us,au' }}
  LOOKAHEAD_DAYS: ${{ github.event.inputs.lookahead_days || '3' }}
  BANKROLL: ${{ github.event.inputs.bankroll || '1000' }}
  KELLY_FRACTION: ${{ github.event.inputs.kelly_fraction || '0.5' }}
  KELLY_CAP: ${{ github.event.inputs.kelly_cap || '0.1' }}
  KELLY_TOP_N: ${{ github.event.inputs.kelly_top_n || '14' }}
  ROUND_TO: ${{ github.event.inputs.round_to || '1' }}
  DEBUG: ${{ github.event.inputs.debug || 'true' }}

jobs:
  odds-news-ml:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (strict)
        shell: bash
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # garantias mínimas
          pip install requests pandas numpy unidecode pyyaml

      # ---------- PREP & INPUTS ----------
      - name: Prepare run folders and env
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID=$(date +%s)
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${GITHUB_WORKSPACE}/data/out/${RUN_ID}"

          # Aliases padrão (se faltar)
          if [ ! -s "data/in/aliases.json" ]; then
            echo '{"teams": {}}' > data/in/aliases.json
          fi

          # matches_source.csv é obrigatório
          if [ ! -s "data/in/matches_source.csv" ]; then
            echo "::error::Arquivo obrigatório ausente: data/in/matches_source.csv"
            exit 2
          fi

          # flag de debug
          if [ "${DEBUG}" = "true" ]; then
            echo "DEBUG_FLAG=--debug" >> "$GITHUB_ENV"
          else
            echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          fi

      # ---------- NORMALIZAÇÃO & VALIDAÇÃO (ANTES DO INGEST) ----------
      - name: Normalize and validate matches_source (REQUIRED)
        shell: bash
        run: |
          set -euo pipefail
          SRC="data/in/matches_source.csv"
          DST_RAW="${OUT_DIR}/matches_whitelist_raw.csv"
          DST_NORM="${OUT_DIR}/matches_whitelist.csv"

          # normaliza CRLF, espaços e vírgulas
          tr -d '\r' < "$SRC" | sed -E 's/[[:space:]]+/ /g; s/ *, */,/g; s/^ //; s/ $//' > "$DST_RAW"

          header="$(head -n1 "$DST_RAW")"
          h_low="$(echo "$header" | tr '[:upper:]' '[:lower:]')"
          for need in match_id home away; do
            echo "$h_low" | grep -qiE "(^|,)$need(,|$)" || { echo "::error::missing column '$need' in matches_source.csv"; exit 2; }
          done

          # mapeia PT->EN básico e remove UF
          awk -F',' -v OFS=',' '
            function rmuf(s){ gsub(/\/[A-Za-z]{2}($|[^A-Za-z])/, "", s); return s }
            function deacc(s){
              gsub(/á|à|ã|â|ä/,"a",s); gsub(/Á|À|Ã|Â|Ä/,"A",s);
              gsub(/é|ê|è|ë/,"e",s);  gsub(/É|Ê|È|Ë/,"E",s);
              gsub(/í|î|ì|ï/,"i",s);  gsub(/Í|Î|Ì|Ï/,"I",s);
              gsub(/ó|ô|ò|õ|ö/,"o",s); gsub(/Ó|Ô|Ò|Õ|Ö/,"O",s);
              gsub(/ú|û|ù|ü/,"u",s);  gsub(/Ú|Û|Ù|Ü/,"U",s);
              gsub(/ç/,"c",s);        gsub(/Ç/,"C",s);
              gsub(/ñ/,"n",s);        gsub(/Ñ/,"N",s);
              return s
            }
            function trim(s){ sub(/^ +/,"",s); sub(/ +$/,"",s); return s }
            function map_pt_en(s,  l){
              l=tolower(s)
              if(l=="estonia") return "Estonia"
              if(l=="italia") return "Italy"
              if(l=="bulgaria") return "Bulgaria"
              if(l=="turquia") return "Turkey"
              if(l=="espanha") return "Spain"
              if(l=="georgia") return "Georgia"
              if(l=="servia" || l=="serbia/ser" || l=="serbia") return "Serbia"
              if(l=="albania") return "Albania"
              if(l=="portugal") return "Portugal"
              if(l=="irlanda") return "Ireland"
              if(l=="holanda" || l=="paises baixos") return "Netherlands"
              if(l=="finlandia") return "Finland"
              if(l=="romenia") return "Romania"
              if(l=="austria") return "Austria"
              if(l=="dinamarca") return "Denmark"
              if(l=="grecia") return "Greece"
              if(l=="lituania") return "Lithuania"
              if(l=="polonia") return "Poland"
              if(l=="ponte preta") return "Ponte Preta"
              if(l=="guarani") return "Guarani"
              if(l=="palmeiras") return "Palmeiras"
              if(l=="juventude") return "Juventude"
              if(l=="criciuma") return "Criciuma"
              if(l=="america/mg" || l=="america mg" || l=="america-mg" || l=="america mineiro") return "America Mineiro"
              if(l=="cuiaba") return "Cuiaba"
              if(l=="coritiba") return "Coritiba"
              if(l=="novorizontino" || l=="gremio novorizontino" || l=="grêmio novorizontino") return "Gremio Novorizontino"
              if(l=="operario" || l=="operario pr" || l=="operario/pr" || l=="operário/pr") return "Operario PR"
              return s
            }
            NR==1{
              for(i=1;i<=NF;i++){
                k=tolower($i);
                if(k=="match_id") mi=i;
                if(k=="home") hi=i;
                if(k=="away") ai=i;
              }
              if(!(mi&&hi&&ai)){ print "::error::header mapping failed"; exit 2 }
              print "match_id","home","away";
              next
            }
            {
              mid=$mi; home=$hi; away=$ai;
              home=rmuf(home); away=rmuf(away);
              home=deacc(home); away=deacc(away);
              home=trim(home); away=trim(away);
              home=map_pt_en(home); away=map_pt_en(away);
              if(mid=="" || home=="" || away==""){ print "::error::empty field on line " NR; exit 2 }
              if(seen[mid]++){ print "::error::duplicate match_id: " mid; exit 2 }
              print mid,home,away
            }
          ' "$DST_RAW" > "$DST_NORM"

          LINES=$(wc -l < "$DST_NORM" | tr -d " ")
          [ "$LINES" -ge 2 ] || { echo "::error::whitelist empty after normalization"; exit 3; }

          echo "===== Preview normalized whitelist ====="
          head -n 30 "$DST_NORM" || true

      - name: Validate team names list (REQUIRED)
        shell: bash
        run: |
          set -euo pipefail
          file="${OUT_DIR}/matches_whitelist.csv"
          test -s "$file" || { echo "::error::matches_whitelist.csv not found"; exit 3; }
          echo "===== Unique teams (home+away) ====="
          awk -F',' 'NR>1{print $2; print $3}' "$file" | sort -u | nl -ba

      # ---------- INGEST APIs (OBRIGATÓRIAS) ----------
      - name: Ingest API-Football (RapidAPI) (REQUIRED)
        shell: bash
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py not found"; exit 5; }
          [ -n "${X_RAPIDAPI_KEY:-}" ] || { echo "::error::X_RAPIDAPI_KEY secret not set"; exit 5; }

          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      - name: Ingest TheOddsAPI (REQUIRED)
        shell: bash
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::THEODDS_API_KEY secret not set"; exit 5; }

          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/in/aliases.json" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      # ---------- CONSENSO ----------
      - name: Consensus odds (STRICT)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          echo "===== Preview odds_consensus.csv ====="
          head -n 20 "$OUT_FILE" || true

      # ---------- XG (UNI & BI) ----------
      - name: XG features - Univariate (REQUIRED)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_univariate.py ] || { echo "::error::scripts/xg_univariate.py not found"; exit 7; }
          python -m scripts.xg_univariate --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/xg_univariate.csv" || { echo "::error::xg_univariate.csv not generated"; exit 7; }

      - name: XG features - Bivariate (REQUIRED)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariate.py ] || { echo "::error::scripts/xg_bivariate.py not found"; exit 8; }
          python -m scripts.xg_bivariate --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/xg_bivariate.csv" || { echo "::error::xg_bivariate.csv not generated"; exit 8; }

      # ---------- KELLY ----------
      - name: Kelly stakes (REQUIRED)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/kelly_stake.py ] || { echo "::error::scripts/kelly_stake.py not found"; exit 9; }
          python -m scripts.kelly_stake \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --top-n "${KELLY_TOP_N}" \
            --round-to "${ROUND_TO}" \
            ${DEBUG_FLAG}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv not generated"; exit 9; }

      # ---------- CARTÃO LOTECA ----------
      - name: Build loteca card (REQUIRED)
        shell: bash
        run: |
          set -euo pipefail
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv not found"; exit 26; }

          # cria cabeçalho markdown seguro para YAML
          cat <<'EOF' > "${OUT_DIR}/loteca_card.md"
# Cartao Loteca

EOF

          # acrescenta linhas com awk (formatação segura p/ YAML)
          awk -F',' '
            BEGIN { OFS="," }
            NR==1 {
              for (i=1; i<=NF; i++) {
                k=tolower($i)
                if (k=="team_home") hi=i
                if (k=="team_away") ai=i
                if (k=="pick") pi=i
                if (k=="stake") si=i
              }
              next
            }
            {
              home=$hi; away=$ai; pick=$pi; stake=$si
              gsub(/^ +| +$/,"",home); gsub(/^ +| +$/,"",away)
              pickU=toupper(pick)
              printf("- **%s x %s** — palpite: %s  |  stake: %s\n", home, away, pickU, stake)
            }
          ' "${OUT_DIR}/kelly_stakes.csv" >> "${OUT_DIR}/loteca_card.md"

          test -s "${OUT_DIR}/loteca_card.md" || { echo "::error::loteca_card.md not generated"; exit 26; }
          echo "===== Preview loteca_card.md ====="
          head -n 50 "${OUT_DIR}/loteca_card.md" || true

      # ---------- ARTEFATOS ----------
      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: "loteca-${{ steps.prep.outputs.RUN_ID }}"
          path: "${{ env.OUT_DIR }}"
          if-no-files-found: "error"