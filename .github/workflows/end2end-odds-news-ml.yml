name: Loteca End-to-End (Hardened)

on:
  workflow_dispatch:
    inputs:
      commit_outputs:
        description: "Commitar outputs (cartão/CSV/JSON) no repositório?"
        type: boolean
        default: false

permissions:
  contents: write    # necessário apenas se usar o commit automático
  actions: read
  checks: read

concurrency:
  group: loteca-end2end-${{ github.ref }}
  cancel-in-progress: false

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  DEBUG: "true"
  PYTHONUNBUFFERED: "1"

jobs:
  loteca:
    name: loteca
    runs-on: ubuntu-24.04
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências (requirements.txt se existir)
        shell: bash
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install \
              numpy==1.26.4 pandas==2.2.2 scipy==1.13.1 scikit-learn==1.5.2 \
              requests==2.32.3 python-dateutil==2.9.0.post0 pytz==2024.1 \
              pyarrow==17.0.0 rich==13.9.2 tqdm==4.66.4 beautifulsoup4==4.12.3 \
              lxml==5.2.2 tabulate==0.9.0 matplotlib==3.8.4 PyYAML==6.0.2
          fi

      - name: Preparar rodada / OUT_DIR
        id: prep
        shell: bash
        run: |
          set -euxo pipefail
          RID="$(date +%s)"
          OUT_DIR="data/out/$RID"
          echo "RODADA_ID=$RID" >> "$GITHUB_ENV"
          echo "OUT_DIR=$OUT_DIR" >> "$GITHUB_ENV"
          mkdir -p "data/in" "$OUT_DIR"
          echo "Rodada: $RID"
          echo "OUT_DIR: $OUT_DIR"

      - name: Validar input (matches_source.csv)
        shell: bash
        run: |
          set -euxo pipefail
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Entrada $FILE não encontrada."
            echo "Cabeçalho OBRIGATÓRIO: match_id,home,away,source,lat,lon"
            exit 3
          fi
          HEADER="$(head -n1 "$FILE" | tr -d '\r')"
          need() { echo "$HEADER" | grep -qiE "(^|,)$1(,|$)"; }
          miss=()
          for col in match_id home away source lat lon; do
            need "$col" || miss+=("$col")
          done
          if [ "${#miss[@]}" -gt 0 ]; then
            echo "::error::Cabeçalhos ausentes: ${miss[*]}"
            echo "Use: match_id,home,away,source,lat,lon"
            exit 3
          fi
          [ "$(wc -l < "$FILE")" -gt 1 ] || { echo "::error::Nenhum jogo listado em $FILE"; exit 3; }
          echo "Entrada OK."

      # ============= ODDS SOURCES =============
      - name: Ingest TheOddsAPI (mercado)
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euxo pipefail
          [ -n "${THEODDS_API_KEY}" ] || { echo "::error::THEODDS_API_KEY ausente em Secrets"; exit 4; }
          [ -f scripts/ingest_odds_theoddsapi_safe.py ] || { echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."; exit 4; }
          python scripts/ingest_odds_theoddsapi_safe.py \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --debug
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          head -n 10 "${OUT_DIR}/odds_theoddsapi.csv" || true

      - name: Ingest API-Football via RapidAPI (odds) — tolerante a vazio
        continue-on-error: true
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euxo pipefail
          if [ -z "${X_RAPIDAPI_KEY:-}" ]; then
            echo "::warning::X_RAPIDAPI_KEY ausente — pulando APIFootball Odds."
            # cria um CSV vazio com header padrão para não quebrar próximos passos
            echo "team_home,team_away,match_key,odds_home,odds_draw,odds_away" > "${OUT_DIR}/odds_apifootball.csv"
            exit 0
          fi
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          python -m scripts.ingest_odds_apifootball_rapidapi \
            --rodada "${OUT_DIR}" \
            --season "${SEASON}" \
            --debug || echo "::warning::APIFootball Odds retornou vazio/erro — seguindo."
          # se não existir, cria header vazio para downstream
          if [ ! -s "${OUT_DIR}/odds_apifootball.csv" ]; then
            echo "team_home,team_away,match_key,odds_home,odds_draw,odds_away" > "${OUT_DIR}/odds_apifootball.csv"
          fi
          head -n 10 "${OUT_DIR}/odds_apifootball.csv" || true

      - name: Construir consenso de odds
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          OUT_FILE="data/out/${RODADA_ID}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          # Checa colunas críticas (sem 'match_key' por enquanto; é derivado depois)
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          head -n 10 "$OUT_FILE" || true

      # ============= NEWS =============
      - name: News ingest (NewsAPI)
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        shell: bash
        run: |
          set -euxo pipefail
          [ -n "${NEWSAPI_KEY}" ] || { echo "::error::NEWSAPI_KEY ausente em Secrets"; exit 16; }
          [ -f scripts/news_ingest_safe.py ] || { echo "::error::scripts/news_ingest_safe.py não encontrado"; exit 16; }
          python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}"
          test -s "${OUT_DIR}/news.csv" || { echo "::error::news.csv não gerado"; exit 16; }
          head -n 5 "${OUT_DIR}/news.csv" || true

      # ============= WEATHER =============
      - name: Clima por jogo (per-match) com fallback
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/weather_per_match_safe.py ]; then
            python scripts/weather_per_match_safe.py --in "data/in/matches_source.csv" --out-dir "${OUT_DIR}"
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado pelo per-match"; exit 17; }
          else
            [ -f scripts/weather_snapshot_safe.py ] || { echo "::error::scripts/weather_snapshot_safe.py não encontrado"; exit 17; }
            [ -n "${WEATHER_LAT:-}" ] && [ -n "${WEATHER_LON:-}" ] || { echo "::error::WEATHER_LAT/WEATHER_LON não definidos (repo Vars)"; exit 17; }
            python scripts/weather_snapshot_safe.py --out-dir "${OUT_DIR}" --lat "${WEATHER_LAT}" --lon "${WEATHER_LON}"
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado"; exit 17; }
          fi
          head -n 5 "${OUT_DIR}/weather.csv" || true

      # ============= INJURIES =============
      - name: Injuries/Suspensions (API-Football via RapidAPI)
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euxo pipefail
          [ -n "${X_RAPIDAPI_KEY}" ] || { echo "::error::X_RAPIDAPI_KEY ausente em Secrets"; exit 18; }
          [ -f scripts/apifootball_injuries_safe.py ] || { echo "::error::scripts/apifootball_injuries_safe.py não encontrado"; exit 18; }
          python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/injuries.csv" || { echo "::error::injuries.csv não gerado"; exit 18; }
          head -n 5 "${OUT_DIR}/injuries.csv" || true

      # ============= MODELAGEM A PARTIR DAS ODDS =============
      - name: Probabilidades de mercado (a partir do consenso)
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }
          head -n 20 "${OUT_DIR}/predictions_market.csv" || true

      - name: Features univariado
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/features_univariado.py ] || { echo "::error::scripts/features_univariado.py não encontrado"; exit 21; }
          python scripts/features_univariado.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }
          head -n 10 "${OUT_DIR}/features_univariado.csv" || true

      - name: Features bivariado + xG (proxy)
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/features_bivariado_xg.py ] || { echo "::error::scripts/features_bivariado_xg.py não encontrado"; exit 22; }
          python scripts/features_bivariado_xg.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 22; }
          head -n 10 "${OUT_DIR}/features_bivariado.csv" || true

      - name: Blend de modelos
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          python scripts/blend_models.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_blend.csv" || { echo "::error::predictions_blend.csv não gerado"; exit 24; }
          head -n 10 "${OUT_DIR}/predictions_blend.csv" || true

      - name: Calibrar probabilidades
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }
          head -n 10 "${OUT_DIR}/calibrated_probs.csv" || true

      - name: Publicar Kelly Stakes
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }
          head -n 20 "${OUT_DIR}/kelly_stakes.csv" || true

      - name: Build Cartão Loteca
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/build_cartao.py ] || { echo "::error::scripts/build_cartao.py não encontrado"; exit 26; }
          python scripts/build_cartao.py --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_cartao.txt" || { echo "::error::loteca_cartao.txt não gerado"; exit 26; }
          echo "==== CARTÃO LOTECA ===="
          cat "${OUT_DIR}/loteca_cartao.txt" || true
          echo "========================"

      - name: Sanity / Reality Check
        shell: bash
        run: |
          set -euxo pipefail
          [ -f scripts/sanity_reality_check.py ] || { echo "::error::scripts/sanity_reality_check.py não encontrado"; exit 27; }
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"
          echo "Sanity OK."

      - name: Publicar no Weights & Biases (opcional)
        if: always()
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f scripts/wandb_publish.py ] && [ -n "${WANDB_API_KEY:-}" ]; then
            python scripts/wandb_publish.py --rodada "${OUT_DIR}" || echo "::warning::Falha ao publicar no W&B (continuando)."
          else
            echo "::notice::wandb_publish.py ausente ou chave WANDB_API_KEY não definida — pulando publicação."
          fi

      - name: Adicionar cartão ao resumo do job
        if: always()
        shell: bash
        run: |
          set -euxo pipefail
          echo "## Cartão Loteca — Rodada $RODADA_ID" >> "$GITHUB_STEP_SUMMARY"
          echo '' >> "$GITHUB_STEP_SUMMARY"
          if [ -s "${OUT_DIR}/loteca_cartao.txt" ]; then
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            cat "${OUT_DIR}/loteca_cartao.txt" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_Cartão não encontrado._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload artifacts da rodada (cartão + saídas)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: loteca-${{ env.RODADA_ID }}
          path: |
            ${{ env.OUT_DIR }}/loteca_cartao.txt
            ${{ env.OUT_DIR }}/*.csv
            ${{ env.OUT_DIR }}/*.json
            ${{ env.OUT_DIR }}/*.txt
          if-no-files-found: warn
          retention-days: 14

      - name: Publicar arquivos da rodada no repositório (opcional)
        if: ${{ github.event.inputs.commit_outputs == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: publica outputs de rodada ${{ env.RODADA_ID }} (cartão/CSV/JSON)"
          file_pattern: |
            data/out/${{ env.RODADA_ID }}/loteca_cartao.txt
            data/out/${{ env.RODADA_ID }}/*.csv
            data/out/${{ env.RODADA_ID }}/*.json
            data/out/${{ env.RODADA_ID }}/*.txt