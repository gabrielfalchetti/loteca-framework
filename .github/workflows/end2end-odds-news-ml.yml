name: end2end-odds-news-ml

on:
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug logs"
        required: false
        default: true
        type: boolean
  schedule:
    - cron: "15 09 * * 4,5"

permissions:
  contents: read

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  LOOKAHEAD_DAYS: "3"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: "Setup Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Cache pip"
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Install deps"
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pandas numpy rapidfuzz requests pytz python-dateutil Unidecode

      - name: "Prepare run folders"
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          OUT_DIR="data/out/${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}"

          if [ ! -s "data/in/matches_source.csv" ]; then
            echo "::error::Missing required file: data/in/matches_source.csv"
            exit 2
          fi
          if [ -z "${{ secrets.X_RAPIDAPI_KEY }}" ]; then
            echo "::error::Missing secret X_RAPIDAPI_KEY"
            exit 2
          fi
          if [ -z "${{ secrets.THEODDS_API_KEY }}" ]; then
            echo "::error::Missing secret THEODDS_API_KEY"
            exit 2
          fi

          if [ ! -s "data/in/aliases.json" ]; then
            echo '{"teams": {}}' > data/in/aliases.json
          fi

      - name: "Set DEBUG_FLAG"
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.debug }}" = "true" ]; then
            echo "DEBUG_FLAG=--debug" >> "$GITHUB_ENV"
          else
            echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          fi

      - name: "Validate and normalize whitelist names"
        shell: bash
        run: |
          set -euo pipefail
          SRC="data/in/matches_source.csv"
          TMP_RAW="${OUT_DIR}/matches_whitelist_raw.csv"
          TMP_NORM="${OUT_DIR}/matches_whitelist_norm.csv"
          FINAL="${OUT_DIR}/matches_whitelist.csv"

          tr -d '\r' < "$SRC" | sed -E 's/[[:space:]]+/ /g; s/ *, */,/g; s/^ //; s/ $//' > "$TMP_RAW"

          header="$(head -n1 "$TMP_RAW")"
          h_low="$(echo "$header" | tr '[:upper:]' '[:lower:]')"
          for need in match_id home away; do
            echo "$h_low" | grep -qiE "(^|,)$need(,|$)" || { echo "::error::missing column '$need' in matches_source.csv"; exit 2; }
          done

          awk -F',' -v OFS=',' '
            function rmuf(s){ gsub(/\/[A-Za-z]{2}($|[^A-Za-z])/, "", s); return s }
            function deacc(s){
              gsub(/á|à|ã|â|ä/,"a",s); gsub(/Á|À|Ã|Â|Ä/,"A",s);
              gsub(/é|ê|è|ë/,"e",s);  gsub(/É|Ê|È|Ë/,"E",s);
              gsub(/í|î|ì|ï/,"i",s);  gsub(/Í|Î|Ì|Ï/,"I",s);
              gsub(/ó|ô|ò|õ|ö/,"o",s); gsub(/Ó|Ô|Ò|Õ|Ö/,"O",s);
              gsub(/ú|û|ù|ü/,"u",s);  gsub(/Ú|Û|Ù|Ü/,"U",s);
              gsub(/ç/,"c",s);        gsub(/Ç/,"C",s);
              gsub(/ñ/,"n",s);        gsub(/Ñ/,"N",s);
              return s
            }
            function trim(s){ sub(/^ +/,"",s); sub(/ +$/,"",s); return s }
            function map_pt_en(s,  l){
              l=tolower(s)
              if(l=="estonia") return "Estonia"
              if(l=="italia") return "Italy"
              if(l=="bulgaria") return "Bulgaria"
              if(l=="turquia") return "Turkey"
              if(l=="espanha") return "Spain"
              if(l=="georgia") return "Georgia"
              if(l=="servia" || l=="serbia/ser" || l=="serbia") return "Serbia"
              if(l=="albania") return "Albania"
              if(l=="portugal") return "Portugal"
              if(l=="irlanda") return "Ireland"
              if(l=="holanda" || l=="paises baixos") return "Netherlands"
              if(l=="finlandia") return "Finland"
              if(l=="romenia") return "Romania"
              if(l=="austria") return "Austria"
              if(l=="dinamarca") return "Denmark"
              if(l=="grecia") return "Greece"
              if(l=="lituania") return "Lithuania"
              if(l=="polonia") return "Poland"
              if(l=="ponte preta") return "Ponte Preta"
              if(l=="guarani") return "Guarani"
              if(l=="palmeiras") return "Palmeiras"
              if(l=="juventude") return "Juventude"
              if(l=="criciuma") return "Criciuma"
              if(l=="america/mg" || l=="america mg" || l=="america-mg" || l=="america mineiro") return "America Mineiro"
              if(l=="cuiaba") return "Cuiaba"
              if(l=="coritiba") return "Coritiba"
              if(l=="novorizontino" || l=="gremio novorizontino" || l=="grêmio novorizontino") return "Gremio Novorizontino"
              if(l=="operario" || l=="operario pr" || l=="operario/pr" || l=="operário/pr") return "Operario PR"
              return s
            }
            NR==1{
              for(i=1;i<=NF;i++){
                k=tolower($i);
                if(k=="match_id") mi=i;
                if(k=="home") hi=i;
                if(k=="away") ai=i;
              }
              if(!(mi&&hi&&ai)){ print "::error::header mapping failed"; exit 2 }
              print "match_id","home","away"; next
            }
            {
              mid=$mi; home=$hi; away=$ai;
              home=rmuf(home); away=rmuf(away);
              home=deacc(home); away=deacc(away);
              home=trim(home); away=trim(away);
              home=map_pt_en(home); away=map_pt_en(away);
              if(mid=="" || home=="" || away==""){ print "::error::empty field on line " NR; exit 2 }
              if(seen[mid]++){ print "::error::duplicate match_id: " mid; exit 2 }
              print mid,home,away
            }
          ' "$TMP_RAW" > "$TMP_NORM"

          LINES=$(wc -l < "$TMP_NORM" | tr -d " ")
          [ "$LINES" -ge 2 ] || { echo "::error::whitelist empty after normalization"; exit 3; }

          mv "$TMP_NORM" "$FINAL"
          echo "===== Preview normalized whitelist ====="
          head -n 30 "$FINAL" || true

      - name: "Ingest odds (API-Football via RapidAPI) REQUIRED"
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py not found"; exit 5; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      - name: "Ingest odds (TheOddsAPI) REQUIRED"
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/in/aliases.json" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      - name: "Consensus odds (REQUIRED)"
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      - name: "Predict from odds (REQUIRED)"
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py not found"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv not generated"; exit 7; }

      - name: "Build features (univariado) REQUIRED"
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/feature_build_univariado.py ] || { echo "::error::scripts/feature_build_univariado.py not found"; exit 21; }
          python scripts/feature_build_univariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv not generated"; exit 21; }

      - name: "Build features (bivariado) REQUIRED"
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/feature_build_bivariado.py ]; then
            python scripts/feature_build_bivariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          elif [ -f scripts/feature_bivariado.py ]; then
            python scripts/feature_bivariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          else
            echo "::error::bivariate features script not found (feature_build_bivariado.py or feature_bivariado.py)"
            exit 22
          fi
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv not generated"; exit 22; }

      - name: "Build xG (univariado) REQUIRED"
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/feature_xg_univariado.py ]; then
            python scripts/feature_xg_univariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          elif [ -f scripts/xg_univariado.py ]; then
            python scripts/xg_univariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          else
            echo "::error::xG univariado script not found (feature_xg_univariado.py or xg_univariado.py)"
            exit 31
          fi
          test -s "${OUT_DIR}/xg_univariado.csv" || { echo "::error::xg_univariado.csv not generated"; exit 31; }

      - name: "Build xG (bivariado) REQUIRED"
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/feature_xg_bivariado.py ]; then
            python scripts/feature_xg_bivariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          elif [ -f scripts/xg_bivariado.py ]; then
            python scripts/xg_bivariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          else
            echo "::error::xG bivariado script not found (feature_xg_bivariado.py or xg_bivariado.py)"
            exit 32
          fi
          test -s "${OUT_DIR}/xg_bivariado.csv" || { echo "::error::xg_bivariado.csv not generated"; exit 32; }

      - name: "Merge features -> features_all.csv (REQUIRED output)"
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/merge_features.py ]; then
            python scripts/merge_features.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          else
            python - <<'PY'
import os, pandas as pd
out=os.environ["OUT_DIR"]
cands=["features_univariado.csv","features_bivariado.csv","xg_univariado.csv","xg_bivariado.csv","predictions_market.csv"]
dfs=[]
for f in cands:
    p=os.path.join(out,f)
    if os.path.exists(p) and os.path.getsize(p)>0:
        dfs.append(pd.read_csv(p))
if not dfs:
    raise SystemExit("::error::no features to merge")
base=dfs[0]
for d in dfs[1:]:
    base=base.merge(d, how="outer")
base.to_csv(os.path.join(out,"features_all.csv"), index=False)
PY
          fi
          test -s "${OUT_DIR}/features_all.csv" || { echo "::error::features_all.csv not generated"; exit 23; }

      - name: "Publish Kelly stakes (REQUIRED)"
        shell: bash
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py not found"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv not generated"; exit 25; }

      - name: "Build loteca card (REQUIRED)"
        shell: bash
        run: |
          set -euo pipefail
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv not found"; exit 26; }
          {
            echo "# Cartao Loteca"
            echo
            awk -F',' '
              NR==1{
                for(i=1;i<=NF;i++){
                  k=tolower($i)
                  if(k=="team_home") hi=i
                  if(k=="team_away") ai=i
                  if(k=="pick") pi=i
                  if(k=="stake") si=i
                }
                next
              }
              {
                home=$hi; away=$ai; pick=$pi; stake=$si;
                gsub(/^ +| +$/,"",home); gsub(/^ +| +$/,"",away);
                printf("- **%s x %s** — palpite: %s  |  stake: %s\n", home, away, toupper(pick), stake)
              }
            ' "${OUT_DIR}/kelly_stakes.csv"
          } > "${OUT_DIR}/loteca_card.md"
          test -s "${OUT_DIR}/loteca_card.md" || { echo "::error::loteca_card.md not generated"; exit 26; }
          echo "===== Preview loteca_card.md ====="
          head -n 50 "${OUT_DIR}/loteca_card.md" || true

      - name: "Upload artifacts"
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: loteca-${{ steps.prep.outputs.RUN_ID }}
          path: ${{ env.OUT_DIR }}
          if-no-files-found: error