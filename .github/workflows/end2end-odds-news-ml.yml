name: Loteca End-to-End (Hardened)

on:
  workflow_dispatch:
  schedule:
    - cron: "15 */6 * * *"  # opcional: roda a cada 6h no minuto 15

permissions:
  contents: read
  packages: read
  metadata: read

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  DEBUG: "true"

jobs:
  loteca:
    name: loteca
    runs-on: ubuntu-24.04

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Python
      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) Dependências (fix: fecha o 'if' com 'fi')
      - name: Instalar dependências
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install numpy==1.26.4 pandas==2.2.2 scipy==1.13.1 scikit-learn==1.5.2 \
                        requests==2.32.3 python-dateutil==2.9.0.post0 pytz==2024.1 \
                        pyarrow==17.0.0 rich==13.9.2 tqdm==4.66.4 beautifulsoup4==4.12.3 \
                        lxml==5.2.2 tabulate==0.9.0 matplotlib==3.8.4 PyYAML==6.0.2
          fi

      # 4) Preparar rodada / diretórios
      - name: Preparar rodada
        shell: bash
        run: |
          set -e
          RID="$(date +%s)"
          OUT_DIR="data/out/$RID"
          echo "RODADA_ID=$RID" >> "$GITHUB_ENV"
          echo "OUT_DIR=$OUT_DIR" >> "$GITHUB_ENV"
          mkdir -p "data/in" "$OUT_DIR"
          echo "Rodada: $RID"
          echo "OUT_DIR: $OUT_DIR"

      # 5) Validar entrada (matches_source.csv com lat/lon)
      - name: Validar entrada de jogos
        shell: bash
        run: |
          set -e
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Entrada $FILE não encontrada."
            echo "Cabeçalho OBRIGATÓRIO: match_id,home,away,source,lat,lon"
            exit 3
          fi
          HEADER="$(head -n1 "$FILE" | tr -d '\r')"
          need() { echo "$HEADER" | grep -qiE "(^|,)$1(,|$)"; }
          miss=()
          for col in match_id home away source lat lon; do
            need "$col" || miss+=("$col")
          done
          if [ "${#miss[@]}" -gt 0 ]; then
            echo "::error::Cabeçalhos ausentes: ${miss[*]}"
            echo "Use: match_id,home,away,source,lat,lon"
            exit 3
          fi
          [ "$(wc -l < "$FILE")" -gt 1 ] || { echo "::error::Nenhum jogo listado em $FILE"; exit 3; }
          echo "Entrada OK."

      # 6) Ingestão de odds (TheOddsAPI)
      - name: Ingest – TheOddsAPI (H2H)
        shell: bash
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -e
          [ -n "${THEODDS_API_KEY}" ] || { echo "::error::THEODDS_API_KEY ausente em Secrets"; exit 4; }
          [ -f scripts/ingest_odds_theoddsapi_safe.py ] || { echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."; exit 4; }
          python scripts/ingest_odds_theoddsapi_safe.py \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --debug
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          head -n 10 "${OUT_DIR}/odds_theoddsapi.csv" || true

      # 7) Ingestão de odds (API-Football via RapidAPI) – opcional porém validado
      - name: Ingest – API-Football (RapidAPI)
        shell: bash
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -e
          [ -n "${X_RAPIDAPI_KEY}" ] || { echo "::error::X_RAPIDAPI_KEY ausente em Secrets"; exit 5; }
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          python -m scripts.ingest_odds_apifootball_rapidapi \
            --rodada "${OUT_DIR}" \
            --season "${SEASON}" \
            --debug
          test -s "${OUT_DIR}/odds_apifootball.csv" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          head -n 10 "${OUT_DIR}/odds_apifootball.csv" || true
          # marcador para sanity
          echo '9:Marcador requerido pelo workflow: "apifootball-safe"'
          echo "team_home,team_away,match_key,odds_home,odds_draw,odds_away"

      # 8) Consenso de odds (usa RODADA_ID, não OUT_DIR)
      - name: Consolidar odds (consensus)
        shell: bash
        run: |
          set -e
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          OUT_FILE="data/out/${RODADA_ID}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          head -n 10 "$OUT_FILE" || true

      # 9) News
      - name: Ingest – News
        shell: bash
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        run: |
          set -e
          [ -n "${NEWSAPI_KEY}" ] || { echo "::error::NEWSAPI_KEY ausente em Secrets"; exit 16; }
          [ -f scripts/news_ingest_safe.py ] || { echo "::error::scripts/news_ingest_safe.py não encontrado"; exit 16; }
          python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}"
          test -s "${OUT_DIR}/news.csv" || { echo "::error::news.csv não gerado"; exit 16; }
          head -n 5 "${OUT_DIR}/news.csv" || true

      # 10) Clima por jogo (usa lat/lon do matches_source.csv); fallback para snapshot global
      - name: Weather por jogo (preferencial) ou snapshot (fallback)
        shell: bash
        env:
          WEATHER_LAT: ${{ vars.WEATHER_LAT }}
          WEATHER_LON: ${{ vars.WEATHER_LON }}
        run: |
          set -e
          if [ -f scripts/weather_per_match_safe.py ]; then
            python scripts/weather_per_match_safe.py --in "data/in/matches_source.csv" --out-dir "${OUT_DIR}"
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado pelo per-match"; exit 17; }
          else
            [ -f scripts/weather_snapshot_safe.py ] || { echo "::error::scripts/weather_snapshot_safe.py não encontrado"; exit 17; }
            [ -n "${WEATHER_LAT}" ] && [ -n "${WEATHER_LON}" ] || { echo "::error::WEATHER_LAT/WEATHER_LON não definidos (repo Vars)"; exit 17; }
            python scripts/weather_snapshot_safe.py --out-dir "${OUT_DIR}" --lat "${WEATHER_LAT}" --lon "${WEATHER_LON}"
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado"; exit 17; }
          fi
          head -n 5 "${OUT_DIR}/weather.csv" || true

      # 11) Lesões/Suspensões – API-Football via RapidAPI (com robustez)
      - name: Injuries & Suspensions – API-Football (RapidAPI)
        shell: bash
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -e
          [ -n "${X_RAPIDAPI_KEY}" ] || { echo "::error::X_RAPIDAPI_KEY ausente em Secrets"; exit 18; }
          [ -f scripts/apifootball_injuries_safe.py ] || { echo "::error::scripts/apifootball_injuries_safe.py não encontrado"; exit 18; }
          python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/injuries.csv" || { echo "::error::injuries.csv não gerado"; exit 18; }
          head -n 5 "${OUT_DIR}/injuries.csv" || true

      # 12) Prob. de mercado a partir das odds de consenso
      - name: Prever pelo mercado (odds→probs base)
        shell: bash
        run: |
          set -e
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }
          head -n 20 "${OUT_DIR}/predictions_market.csv" || true

      # 13) Features univariado (derivações de odds)
      - name: Features – Univariado
        shell: bash
        run: |
          set -e
          [ -f scripts/features_univariado.py ] || { echo "::error::scripts/features_univariado.py não encontrado"; exit 21; }
          python scripts/features_univariado.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }
          head -n 10 "${OUT_DIR}/features_univariado.csv" || true

      # 14) Features bivariado + proxy xG
      - name: Features – Bivariado & xG (proxy)
        shell: bash
        run: |
          set -e
          [ -f scripts/features_bivariado_xg.py ] || { echo "::error::scripts/features_bivariado_xg.py não encontrado"; exit 22; }
          python scripts/features_bivariado_xg.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 22; }
          head -n 10 "${OUT_DIR}/features_bivariado.csv" || true

      # 15) Blend dos modelos (usa calibrated_probs se existir)
      - name: Blend – Market + ML
        shell: bash
        run: |
          set -e
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          python scripts/blend_models.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_blend.csv" || { echo "::error::predictions_blend.csv não gerado"; exit 24; }
          head -n 10 "${OUT_DIR}/predictions_blend.csv" || true

      # 16) Calibração de probabilidades (Dirichlet / Platt / Isotonic)
      - name: Calibrar probabilidades
        shell: bash
        run: |
          set -e
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }
          head -n 10 "${OUT_DIR}/calibrated_probs.csv" || true

      # 17) Kelly staking
      - name: Kelly staking
        shell: bash
        run: |
          set -e
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }
          head -n 20 "${OUT_DIR}/kelly_stakes.csv" || true

      # 18) Construção do cartão Loteca (DEVE ser por último)
      - name: Montar cartão Loteca
        shell: bash
        run: |
          set -e
          [ -f scripts/build_cartao.py ] || { echo "::error::scripts/build_cartao.py não encontrado"; exit 26; }
          python scripts/build_cartao.py --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_cartao.txt" || { echo "::error::loteca_cartao.txt não gerado"; exit 26; }
          echo "==== CARTÃO LOTECA ===="
          cat "${OUT_DIR}/loteca_cartao.txt" || true
          echo "========================"

      # 19) Sanity / reality check de outputs
      - name: Sanity & Reality Check
        shell: bash
        run: |
          set -e
          [ -f scripts/sanity_reality_check.py ] || { echo "::error::scripts/sanity_reality_check.py não encontrado"; exit 27; }
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"
          echo "Sanity OK."

      # 20) (Opcional) Publicação no Weights & Biases
      - name: Publicar no W&B (opcional)
        shell: bash
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          set -e
          if [ -f scripts/wandb_publish.py ]; then
            python scripts/wandb_publish.py --rodada "${OUT_DIR}" || echo "::warning::Falha ao publicar no W&B (continuando)."
          else
            echo "::notice::wandb_publish.py ausente — pulando publicação."
          fi