name: Loteca End-to-End (v4.3 Hardened)

on:
  workflow_dispatch:

env:
  SEASON: 2025
  REGIONS: uk,eu,us,au
  BANKROLL: 1000
  KELLY_FRACTION: 0.5
  KELLY_CAP: 0.1
  KELLY_TOP_N: 14
  ROUND_TO: 1
  DEBUG: true

jobs:
  loteca-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # === BOOTSTRAP PYTHON DEPS ===
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify critical libs (fail fast)
        run: |
          python - <<'PY'
          import pandas, numpy, sklearn
          print("OK pandas", pandas.__version__)
          print("OK numpy", numpy.__version__)
          print("OK sklearn", sklearn.__version__)
          PY
      # === FIM BOOTSTRAP ===

      - name: Create rodada and dirs
        run: |
          set -e
          RID="$(date +%s)"
          echo "RODADA_ID=$RID" >> "$GITHUB_ENV"
          echo "OUT_DIR=data/out/$RID" >> "$GITHUB_ENV"
          mkdir -p "data/in" "$OUT_DIR"
          echo "Rodada: $RID"
          echo "OUT_DIR: $OUT_DIR"

      - name: Validate input matches
        run: |
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Entrada $FILE não encontrada."
            echo "Cabeçalho OBRIGATÓRIO: match_id,home,away,source,lat,lon"
            exit 3
          fi
          HEADER="$(head -n1 "$FILE" | tr -d '\r')"
          need() { echo "$HEADER" | grep -qiE "(^|,)$1(,|$)"; }
          miss=()
          for col in match_id home away source lat lon; do
            need "$col" || miss+=("$col")
          done
          if [ "${#miss[@]}" -gt 0 ]; then
            echo "::error::Cabeçalhos ausentes: ${miss[*]}"
            echo "Use: match_id,home,away,source,lat,lon"
            exit 3
          fi
          [ "$(wc -l < "$FILE")" -gt 1 ] || { echo "::error::Nenhum jogo listado em $FILE"; exit 3; }
          echo "Entrada OK."

      - name: Ingest odds - API Football
        run: |
          set -e
          [ -n "${X_RAPIDAPI_KEY}" ] || { echo "::error::X_RAPIDAPI_KEY ausente em Secrets"; exit 5; }
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado"; exit 5; }
          python scripts/ingest_odds_apifootball_rapidapi.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/odds_apifootball.csv" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }

      - name: Ingest odds - TheOddsAPI
        run: |
          set -e
          [ -n "${THEODDS_API_KEY}" ] || { echo "::error::THEODDS_API_KEY ausente em Secrets"; exit 5; }
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py não encontrado"; exit 5; }
          python scripts/ingest_odds_theoddsapi.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 5; }

      - name: Consensus odds (multi-bookmaker)
        run: |
          set -e
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          test -s "data/out/${RODADA_ID}/odds_consensus.csv" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }

      - name: Predict from odds (market)
        run: |
          set -e
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }

      - name: Injuries ingest
        run: |
          set -e
          [ -f scripts/apifootball_injuries_safe.py ] || { echo "::error::scripts/apifootball_injuries_safe.py não encontrado."; exit 6; }
          python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" --season "${SEASON}" --debug
          test -f "${OUT_DIR}/injuries.csv" || { echo "::error::injuries.csv não gerado"; exit 6; }

      - name: Weather snapshot granular por jogo
        run: |
          set -e
          FILE="data/in/matches_source.csv"
          [ -f scripts/weather_snapshot_safe.py ] || { echo "::error::scripts/weather_snapshot_safe.py não encontrado"; exit 17; }
          while IFS=, read -r match_id home away source lat lon; do
            [[ "$match_id" == "match_id" ]] && continue
            if [ -n "$lat" ] && [ -n "$lon" ]; then
              echo "[weather] Capturando clima para $home x $away ($lat,$lon)"
              python scripts/weather_snapshot_safe.py --out-dir "${OUT_DIR}" --lat "$lat" --lon "$lon" || echo "::warning::Falha clima $home x $away"
            else
              echo "::warning::Sem coordenadas para $home x $away"
            fi
          done < "$FILE"
          test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado"; exit 17; }

      - name: News ingest
        run: |
          set -e
          [ -f scripts/news_ingest_safe.py ] || { echo "::error::scripts/news_ingest_safe.py não encontrado"; exit 16; }
          python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}"
          test -s "${OUT_DIR}/news.csv" || { echo "::error::news.csv não gerado"; exit 16; }

      - name: Features - Univariado
        run: |
          set -e
          [ -f scripts/features_univariado.py ] || { echo "::error::scripts/features_univariado.py não encontrado"; exit 21; }
          python scripts/features_univariado.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }

      - name: Features - Bivariado (xG)
        run: |
          set -e
          [ -f scripts/features_bivariado_xg.py ] || { echo "::error::scripts/features_bivariado_xg.py não encontrado"; exit 22; }
          python scripts/features_bivariado_xg.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 22; }

      - name: Calibrate probabilities (Dirichlet + Isotonic)
        run: |
          set -e
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }

      - name: Blend models (final inference)
        run: |
          set -e
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          python scripts/blend_models.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_blend.csv" || { echo "::error::predictions_blend.csv não gerado"; exit 24; }

      - name: Publish Kelly stakes
        run: |
          set -e
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }

      - name: Sanity / reality checks
        run: |
          set -e
          [ -f scripts/sanity_reality_check.py ] || { echo "::error::scripts/sanity_reality_check.py não encontrado"; exit 26; }
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"