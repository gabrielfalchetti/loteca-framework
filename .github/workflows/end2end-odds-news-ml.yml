name: end2end-odds-news-ml

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Temporada base (ex.: 2025)"
        required: true
        default: "2025"
      regions:
        description: "Regiões de odds (theoddsapi) — csv"
        required: true
        default: "uk,eu,us,au"
      lookahead_days:
        description: "Janela (dias) para buscar jogos futuros"
        required: true
        default: "3"
      bankroll:
        description: "Bankroll inicial para Kelly"
        required: true
        default: "1000"
      kelly_fraction:
        description: "Fração de Kelly"
        required: true
        default: "0.5"
      kelly_cap:
        description: "Aposta máxima (fração do bankroll)"
        required: true
        default: "0.1"
      kelly_top_n:
        description: "Top N apostas"
        required: true
        default: "14"
      round_to:
        description: "Arredondamento (unidade monetária)"
        required: true
        default: "1"
      debug:
        description: "Logs detalhados"
        required: true
        default: "true"

permissions:
  contents: read

jobs:
  end2end:
    runs-on: ubuntu-latest
    env:
      SEASON: ${{ inputs.season }}
      REGIONS: ${{ inputs.regions }}
      LOOKAHEAD_DAYS: ${{ inputs.lookahead_days }}
      BANKROLL: ${{ inputs.bankroll }}
      KELLY_FRACTION: ${{ inputs.kelly_fraction }}
      KELLY_CAP: ${{ inputs.kelly_cap }}
      KELLY_TOP_N: ${{ inputs.kelly_top_n }}
      ROUND_TO: ${{ inputs.round_to }}
      DEBUG: ${{ inputs.debug }}
      THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
      NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Pacotes que falharam anteriormente ou que são necessários
          pip install pandas numpy scipy scikit-learn xgboost \
                      requests python-dateutil pytz tqdm beautifulsoup4 \
                      rapidfuzz Unidecode

      - name: Prepare run folders and OUT_DIR
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID=$(date +%s)
          echo "RUN_ID=$RUN_ID" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}" "data/config"
          # Flags de presença de secrets (APIs são OBRIGATÓRIAS)
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::Faltando secret THEODDS_API_KEY"; exit 2; }
          [ -n "${X_RAPIDAPI_KEY:-}" ] || { echo "::error::Faltando secret X_RAPIDAPI_KEY"; exit 2; }
          [ -n "${NEWSAPI_KEY:-}" ] || echo "::notice::NEWSAPI_KEY ausente — módulos de notícias podem ser ignorados, se existirem."

      - name: Seed default config files (aliases / league_map)
        run: |
          set -euo pipefail
          mkdir -p data/config
          # aliases.json
          if [ ! -s data/config/aliases.json ]; then
            cat > data/config/aliases.json <<'JSON'
{"teams": {}, "leagues": {}}
JSON
          fi
          # league_map.json
          if [ ! -s data/config/league_map.json ]; then
            cat > data/config/league_map.json <<'JSON'
{"mapping": {}}
JSON
          fi

      # ============================================================
      # 1) Construir WHITELIST automaticamente (sem input manual)
      #    Gera data/in/matches_whitelist.csv e copia para ${OUT_DIR}
      # ============================================================
      - name: Build whitelist from APIs (strict)
        run: |
          set -euo pipefail
          [ -f scripts/build_whitelist_from_apis.py ] || { echo "::error::scripts/build_whitelist_from_apis.py não encontrado"; exit 3; }

          a=0
          until [ $a -ge 3 ]; do
            python scripts/build_whitelist_from_apis.py \
              --out data/in/matches_whitelist.csv \
              --season "${SEASON}" \
              --regions "${REGIONS}" \
              --lookahead-days "${LOOKAHEAD_DAYS}" \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry whitelist: $a/3"; sleep $((5*a))
          done

          WL="data/in/matches_whitelist.csv"
          test -s "$WL" || { echo "::error::Whitelist não gerada"; exit 3; }

          header="$(head -n1 "$WL" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Whitelist sem coluna '$c'"; exit 3; }
          done

          LINES=$(wc -l < "$WL" | tr -d ' ')
          [ "$LINES" -ge 2 ] || { echo "::error::Whitelist sem jogos (mínimo 1 linha além do cabeçalho)"; exit 3; }

          cp "$WL" "${OUT_DIR}/matches_whitelist.csv"
          # Também gerar um matches_source.csv (alguns scripts esperam esse nome)
          cp "$WL" "${OUT_DIR}/matches_source.csv"

          echo "===== Preview whitelist ====="
          head -n 20 "$WL" || true

      # ============================================================
      # 2) Ingestão de odds — TheOddsAPI (OBRIGATÓRIO)
      # ============================================================
      - name: Ingest TheOddsAPI (strict)
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py não encontrado."; exit 4; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases data/config/aliases.json \
              --league_map data/config/league_map.json \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id team_home team_away odds_home odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_theoddsapi.csv"; exit 4; }
          done
          # odds_draw pode faltar (mercado 2-way); não é obrigatório aqui.

      # ============================================================
      # 3) Ingestão de odds — API-Football via RapidAPI (OBRIGATÓRIO)
      # ============================================================
      - name: Ingest API-Football (strict)
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }

          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              --aliases data/config/aliases.json \
              --league_map data/config/league_map.json \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id team_home team_away odds_home odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_apifootball.csv"; exit 5; }
          done

      # ============================================================
      # 4) Consensus de odds (OBRIGATÓRIO e STRICT)
      # ============================================================
      - name: Build odds consensus (strict)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }

          python -m scripts.consensus_odds_safe \
            --rodada "${OUT_DIR}" \
            --strict \
            ${DEBUG:+--debug}

          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          echo "===== Preview odds_consensus ====="
          head -n 20 "$OUT_FILE" || true

      # ============================================================
      # 5) Predição a partir das odds (aceitando 2-way e 3-way)
      # ============================================================
      - name: Predict from odds (market model)
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }

          python scripts/predict_from_odds.py \
            --rodada "${OUT_DIR}" \
            --allow-two-way \
            ${DEBUG:+--debug}

          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }
          head -n 20 "${OUT_DIR}/predictions_market.csv" || true

      # ============================================================
      # 6) Calibração de probabilidades
      # ============================================================
      - name: Calibrate probabilities
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }

          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }
          head -n 20 "${OUT_DIR}/calibrated_probs.csv" || true

      # ============================================================
      # 7) XG Univariado (gera features_univariado.csv)
      # ============================================================
      - name: XG Univariado
        run: |
          set -euo pipefail
          [ -f scripts/xg_univariado.py ] || { echo "::error::scripts/xg_univariado.py não encontrado"; exit 26; }

          python scripts/xg_univariado.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 26; }
          head -n 10 "${OUT_DIR}/features_univariado.csv" || true

      # ============================================================
      # 8) XG Bivariado (gera features_bivariado.csv)
      # ============================================================
      - name: XG Bivariado
        run: |
          set -euo pipefail
          [ -f scripts/xg_bivariado.py ] || { echo "::error::scripts/xg_bivariado.py não encontrado"; exit 27; }

          python scripts/xg_bivariado.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 27; }
          head -n 10 "${OUT_DIR}/features_bivariado.csv" || true

      # ============================================================
      # 9) Contexto (join com clima / notícias se houver) — requer os dois XG
      # ============================================================
      - name: Join contexto (XG + extras)
        run: |
          set -euo pipefail
          [ -f scripts/feature_join_context.py ] || { echo "::error::scripts/feature_join_context.py não encontrado"; exit 28; }

          if [ ! -s "${OUT_DIR}/features_univariado.csv" ] || [ ! -s "${OUT_DIR}/features_bivariado.csv" ]; then
            echo "::error::features_univariado.csv e/or features_bivariado.csv ausentes em ${OUT_DIR}. Gere-as nas etapas de XG antes desta junção."
            exit 28
          fi

          python scripts/feature_join_context.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/context_features.csv" || { echo "::error::context_features.csv não gerado"; exit 28; }
          head -n 10 "${OUT_DIR}/context_features.csv" || true

      # ============================================================
      # 10) Blend (market + calibrated + contexto)
      # ============================================================
      - name: Blend models
        run: |
          set -euo pipefail
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }

          python scripts/blend_models.py \
            --rodada "${OUT_DIR}" \
            --w_calib 0.65 \
            --w_market 0.35 \
            --use-context \
            --context-strength 0.15 \
            ${DEBUG:+--debug}

          test -s "${OUT_DIR}/predictions_final.csv" || { echo "::error::predictions_final.csv não gerado"; exit 24; }
          head -n 20 "${OUT_DIR}/predictions_final.csv" || true

      # ============================================================
      # 11) Kelly e publicação
      # ============================================================
      - name: Kelly stakes
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }

          export BANKROLL="${BANKROLL}"
          export KELLY_FRACTION="${KELLY_FRACTION}"
          export KELLY_CAP="${KELLY_CAP}"
          export KELLY_TOP_N="${KELLY_TOP_N}"
          export ROUND_TO="${ROUND_TO}"

          python scripts/publish_kelly.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }
          head -n 20 "${OUT_DIR}/kelly_stakes.csv" || true