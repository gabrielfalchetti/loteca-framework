name: End2End - Odds ‚Üí Consenso ‚Üí Predi√ß√µes (xG & Calib) ‚Üí Kelly ‚Üí Cart√£o

on:
  workflow_dispatch: {}

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  ODDS_SPORTS: "soccer_brazil_campeonato,soccer_brazil_serie_b,soccer_argentina_primera_division,soccer_argentina_primera_nacional"

  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  ROUND_TO: "1"
  KELLY_TOP_N: "14"

  APIFOOT_LEAGUE_IDS: ""

jobs:
  end2end:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

      - name: Definir RODADA_ID/OUT_DIR + validar e copiar entrada
        run: |
          set -e
          echo "RODADA_ID=${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "OUT_DIR=data/out/${GITHUB_RUN_ID}" >> $GITHUB_ENV
          mkdir -p "data/out/${GITHUB_RUN_ID}"

          SRC="data/in/matches_source.csv"
          if [ ! -f "$SRC" ]; then
            echo "::error::Arquivo $SRC n√£o encontrado. Crie com cabe√ßalho: home,away"
            exit 2
          fi
          python - <<'PY'
import sys,pandas as pd
df=pd.read_csv("data/in/matches_source.csv")
miss=[c for c in["home","away"] if c not in df.columns]
if miss:
  print(f"::error::Faltam colunas no matches_source.csv: {miss}")
  sys.exit(2)
print("[entrada] matches_source.csv OK:",len(df),"linhas")
PY
          # üëá NOVO: garantir que a rodada tenha o matches_source
          cp "data/in/matches_source.csv" "data/out/${GITHUB_RUN_ID}/"

      # ---------- COLETA ----------
      - name: Coletar odds (TheOddsAPI)
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -e
          if [ -z "${THEODDS_API_KEY}" ]; then
            echo "[theoddsapi] AVISO: THEODDS_API_KEY n√£o definida ‚Äî pulando."
          else
            if [ ! -f "scripts/ingest_odds_theoddsapi_safe.py" ]; then
              echo "::error::scripts/ingest_odds_theoddsapi_safe.py n√£o encontrado."
              exit 4
            fi
            python scripts/ingest_odds_theoddsapi_safe.py \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --debug
          fi
          ls -la "${OUT_DIR}" || true

      - name: Coletar odds/fixtures (API-Football via RapidAPI)
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -e
          if [ -z "${X_RAPIDAPI_KEY}" ]; then
            echo "[apifootball] AVISO: X_RAPIDAPI_KEY n√£o definida ‚Äî pulando."
          else
            if [ -f "scripts/ingest_odds_apifootball_rapidapi.py" ]; then
              python scripts/ingest_odds_apifootball_rapidapi.py \
                --rodada "${OUT_DIR}" \
                --season "${SEASON}" \
                --leagues "${APIFOOT_LEAGUE_IDS}" \
                --debug || true
            else
              echo "[apifootball] AVISO: scripts/ingest_odds_apifootball_rapidapi.py n√£o encontrado ‚Äî pulando."
            fi
          fi
          ls -la "${OUT_DIR}" || true

      - name: Sincronizar OUT_DIR ‚Üí data/out/$RODADA_ID (para o consenso)
        run: |
          set -e
          rsync -a "${OUT_DIR}/" "data/out/${RODADA_ID}/"
          ls -la "data/out/${RODADA_ID}" || true

      # ---------- DADOS AUXILIARES (opcionais) ----------
      - name: Ingest√£o de News (opcional)
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        run: |
          set -e
          if [ -z "${NEWSAPI_KEY}" ]; then
            echo "[news] AVISO: NEWSAPI_KEY n√£o definida ‚Äî pulando."
          else
            if [ -f "scripts/news_ingest_safe.py" ]; then
              python scripts/news_ingest_safe.py --rodada "${OUT_DIR}" --debug || true
              rsync -a "${OUT_DIR}/" "data/out/${RODADA_ID}/" || true
            else
              echo "[news] AVISO: scripts/news_ingest_safe.py n√£o encontrado ‚Äî pulando."
            fi
          fi

      - name: Ingest√£o de Injuries (API-Football, opcional)
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -e
          if [ -z "${X_RAPIDAPI_KEY}" ]; then
            echo "[injuries] AVISO: X_RAPIDAPI_KEY n√£o definida ‚Äî pulando."
          else
            if [ -f "scripts/injuries_apifootball_safe.py" ]; then
              python scripts/injuries_apifootball_safe.py --rodada "${OUT_DIR}" --debug || true
              rsync -a "${OUT_DIR}/" "data/out/${RODADA_ID}/" || true
            else
              echo "[injuries] AVISO: scripts/injuries_apifootball_safe.py n√£o encontrado ‚Äî pulando."
            fi
          fi

      - name: Ingest√£o de Weather (opcional)
        env:
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
        run: |
          set -e
          if [ -z "${WEATHER_API_KEY}" ]; then
            echo "[weather] AVISO: WEATHER_API_KEY n√£o definida ‚Äî pulando."
          else
            if [ -f "scripts/weather_ingest_safe.py" ]; then
              python scripts/weather_ingest_safe.py --rodada "${OUT_DIR}" --debug || true
              rsync -a "${OUT_DIR}/" "data/out/${RODADA_ID}/" || true
            else
              echo "[weather] AVISO: scripts/weather_ingest_safe.py n√£o encontrado ‚Äî pulando."
            fi
          fi

      - name: Login no Weights & Biases (opcional)
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          set -e
          if [ -z "${WANDB_API_KEY}" ]; then
            echo "[wandb] AVISO: WANDB_API_KEY n√£o definida ‚Äî pulando login."
          else
            python - <<'PY'
import os,subprocess
key=os.environ.get("WANDB_API_KEY","").strip()
if key: subprocess.run(["bash","-lc", f'wandb login {key}'], check=False)
print("[wandb] login executado (se a key estiver correta).")
PY
          fi

      # ---------- CONSENSO & PREDI√á√ïES ----------
      - name: Consolidar odds (consensus)
        run: |
          set -e
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          echo "==== odds_consensus.csv (preview) ===="
          head -n 30 "data/out/${RODADA_ID}/odds_consensus.csv" || true

      - name: Predizer por odds de mercado (baseline)
        run: |
          set -e
          python scripts/predict_from_odds.py --rodada "data/out/${RODADA_ID}" --debug
          echo "==== predictions_market.csv (preview) ===="
          head -n 20 "data/out/${RODADA_ID}/predictions_market.csv" || true

      - name: xG Univariado (opcional)
        run: |
          set -e
          if [ -f "scripts/predict_xg_univariate.py" ]; then
            python scripts/predict_xg_univariate.py --rodada "data/out/${RODADA_ID}" --debug || true
            head -n 10 "data/out/${RODADA_ID}/predictions_xg_uni.csv" || true
          else
            echo "[xg-uni] AVISO: scripts/predict_xg_univariate.py n√£o encontrado ‚Äî pulando."
          fi

      - name: xG Bivariado (opcional)
        run: |
          set -e
          if [ -f "scripts/predict_xg_bivariate.py" ]; then
            python scripts/predict_xg_bivariate.py --rodada "data/out/${RODADA_ID}" --debug || true
            head -n 10 "data/out/${RODADA_ID}/predictions_xg_bi.csv" || true
          else
            echo "[xg-bi] AVISO: scripts/predict_xg_bivariate.py n√£o encontrado ‚Äî pulando."
          fi

      - name: Calibra√ß√£o de probabilidades (opcional)
        run: |
          set -e
          if [ -f "scripts/calibrate_probs.py" ]; then
            python scripts/calibrate_probs.py --rodada "data/out/${RODADA_ID}" --debug || true
            head -n 10 "data/out/${RODADA_ID}/predictions_calibrated.csv" || true
          else
            echo "[calib] AVISO: scripts/calibrate_probs.py n√£o encontrado ‚Äî pulando."
          fi

      - name: Stacking / Ensemble (opcional)
        run: |
          set -e
          if [ -f "scripts/stack_predictions.py" ]; then
            python scripts/stack_predictions.py --rodada "data/out/${RODADA_ID}" --debug || true
            head -n 10 "data/out/${RODADA_ID}/predictions_stacked.csv" || true
          else
            echo "[stack] AVISO: scripts/stack_predictions.py n√£o encontrado ‚Äî pulando."
          fi

      - name: Sanity check (opcional, n√£o bloqueia)
        run: |
          set -e
          if [ -f "scripts/sanity_reality_check.py" ]; then
            python scripts/sanity_reality_check.py --rodada "data/out/${RODADA_ID}" --strict || true
          else
            echo "[reality] AVISO: scripts/sanity_reality_check.py n√£o encontrado ‚Äî pulando."
          fi

      # ---------- KELLY & CART√ÉO ----------
      - name: Publicar Kelly
        env:
          BANKROLL: ${{ env.BANKROLL }}
          KELLY_FRACTION: ${{ env.KELLY_FRACTION }}
          KELLY_CAP: ${{ env.KELLY_CAP }}
          ROUND_TO: ${{ env.ROUND_TO }}
          KELLY_TOP_N: ${{ env.KELLY_TOP_N }}
        run: |
          set -e
          python scripts/publish_kelly.py --rodada "data/out/${RODADA_ID}" --debug
          head -n 30 "data/out/${RODADA_ID}/kelly_stakes.csv" || true

      - name: Gerar cart√£o da Loteca (ap√≥s Kelly)
        run: |
          set -e
          python scripts/build_cartao.py --rodada "data/out/${RODADA_ID}"
          echo "==== loteca_cartao.txt ===="
          cat "data/out/${RODADA_ID}/loteca_cartao.txt" || true

      - name: Upload artefatos
        uses: actions/upload-artifact@v4
        with:
          name: loteca_full_${{ env.RODADA_ID }}
          path: |
            data/out/${{ env.RODADA_ID }}/matches_source.csv
            data/out/${{ env.RODADA_ID }}/odds_theoddsapi.csv
            data/out/${{ env.RODADA_ID }}/unmatched_theoddsapi.csv
            data/out/${{ env.RODADA_ID }}/odds_apifootball.csv
            data/out/${{ env.RODADA_ID }}/unmatched_apifootball.csv
            data/out/${{ env.RODADA_ID }}/news.csv
            data/out/${{ env.RODADA_ID }}/weather.csv
            data/out/${{ env.RODADA_ID }}/injuries.csv
            data/out/${{ env.RODADA_ID }}/odds_consensus.csv
            data/out/${{ env.RODADA_ID }}/predictions_market.csv
            data/out/${{ env.RODADA_ID }}/predictions_xg_uni.csv
            data/out/${{ env.RODADA_ID }}/predictions_xg_bi.csv
            data/out/${{ env.RODADA_ID }}/predictions_calibrated.csv
            data/out/${{ env.RODADA_ID }}/predictions_stacked.csv
            data/out/${{ env.RODADA_ID }}/kelly_stakes.csv
            data/out/${{ env.RODADA_ID }}/loteca_cartao.txt
            data/out/${{ env.RODADA_ID }}/debug/**