name: Loteca End-to-End (Hardened)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: read

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  DEBUG: "true"

jobs:
  loteca:
    name: loteca
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (pinned)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install \
              numpy==1.26.4 pandas==2.2.2 scipy==1.13.1 scikit-learn==1.5.2 \
              requests==2.32.3 python-dateutil==2.9.0.post0 pytz==2024.1 \
              pyarrow==17.0.0 rich==13.9.2 tqdm==4.66.4 beautifulsoup4==4.12.3 \
              lxml==5.2.2 tabulate==0.9.0 matplotlib==3.8.4 PyYAML==6.0.2
          fi

      - name: Init rodada / folders
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          set -e
          RID="$(date +%s)"
          OUT_DIR="data/out/$RID"
          echo "RODADA_ID=$RID" >> "$GITHUB_ENV"
          echo "OUT_DIR=$OUT_DIR" >> "$GITHUB_ENV"
          mkdir -p "data/in" "$OUT_DIR"
          echo "Rodada: $RID"
          echo "OUT_DIR: $OUT_DIR"

      - name: Validate matches_source.csv
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          RODADA_ID: ${{ env.RODADA_ID }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Entrada $FILE não encontrada."
            echo "Cabeçalho OBRIGATÓRIO: match_id,home,away,source,lat,lon"
            exit 3
          fi
          HEADER="$(head -n1 "$FILE" | tr -d '\r')"
          need() { echo "$HEADER" | grep -qiE "(^|,)$1(,|$)"; }
          miss=()
          for col in match_id home away source lat lon; do
            need "$col" || miss+=("$col")
          done
          if [ "${#miss[@]}" -gt 0 ]; then
            echo "::error::Cabeçalhos ausentes: ${miss[*]}"
            echo "Use: match_id,home,away,source,lat,lon"
            exit 3
          fi
          [ "$(wc -l < "$FILE")" -gt 1 ] || { echo "::error::Nenhum jogo listado em $FILE"; exit 3; }
          echo "Entrada OK."

      # >>> NOVO PASSO OBRIGATÓRIO <<<
      - name: Build Matches Whitelist
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          RODADA_ID: ${{ env.RODADA_ID }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          [ -f scripts/match_whitelist.py ] || { echo "::error::scripts/match_whitelist.py não encontrado"; exit 6; }
          python -m scripts.match_whitelist --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/matches_whitelist.csv" || { echo "::error::matches_whitelist.csv não gerado"; exit 6; }
          echo "[whitelist] preview:"
          head -n 10 "${OUT_DIR}/matches_whitelist.csv" || true

      - name: Ingest TheOddsAPI (odds)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
          REGIONS: ${{ env.REGIONS }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euxo pipefail
          [ -n "${THEODDS_API_KEY}" ] || { echo "::error::THEODDS_API_KEY ausente em Secrets"; exit 4; }
          [ -f scripts/ingest_odds_theoddsapi_safe.py ] || { echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."; exit 4; }
          python scripts/ingest_odds_theoddsapi_safe.py --rodada "${OUT_DIR}" --regions "${REGIONS}" --debug
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          head -n 10 "${OUT_DIR}/odds_theoddsapi.csv" || true

      - name: Ingest API-Football odds (via RapidAPI) — opcional
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
          SEASON: ${{ env.SEASON }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          if [ -z "${X_RAPIDAPI_KEY}" ]; then
            echo "::notice::X_RAPIDAPI_KEY ausente — pulando ingest_odds_apifootball_rapidapi."
            exit 0
          fi
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          python -m scripts.ingest_odds_apifootball_rapidapi --rodada "${OUT_DIR}" --season "${SEASON}" --debug || true
          # o script já lida com vazio; apenas tente mostrar se existir
          [ -s "${OUT_DIR}/odds_apifootball.csv" ] && head -n 10 "${OUT_DIR}/odds_apifootball.csv" || echo "::notice::odds_apifootball.csv não gerado (ok)."

      - name: Consensus Odds (theoddsapi + apifootball)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          RODADA_ID: ${{ env.RODADA_ID }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          # usa matches_whitelist.csv gerado no passo anterior
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          OUT_FILE="data/out/${RODADA_ID}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          head -n 10 "$OUT_FILE" || true

      - name: News ingest (NEWSAPI)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        run: |
          set -e -o pipefail
          [ -n "${NEWSAPI_KEY}" ] || { echo "::error::NEWSAPI_KEY ausente em Secrets"; exit 16; }
          [ -f scripts/news_ingest_safe.py ] || { echo "::error::scripts/news_ingest_safe.py não encontrado"; exit 16; }
          python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}"
          test -s "${OUT_DIR}/news.csv" || { echo "::error::news.csv não gerado"; exit 16; }
          head -n 5 "${OUT_DIR}/news.csv" || true

      - name: Weather per match (Open-Meteo)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          if [ -f scripts/weather_per_match_safe.py ]; then
            python scripts/weather_per_match_safe.py --in "data/in/matches_source.csv" --out-dir "${OUT_DIR}"
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado pelo per-match"; exit 17; }
          else
            echo "::error::scripts/weather_per_match_safe.py não encontrado"; exit 17;
          fi
          head -n 5 "${OUT_DIR}/weather.csv" || true

      - name: API-Football Injuries/Suspensions — opcional
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
          SEASON: ${{ env.SEASON }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        run: |
          set -e -o pipefail
          if [ -z "${X_RAPIDAPI_KEY}" ]; then
            echo "::notice::X_RAPIDAPI_KEY ausente — pulando apifootball_injuries."
            exit 0
          fi
          [ -f scripts/apifootball_injuries_safe.py ] || { echo "::error::scripts/apifootball_injuries_safe.py não encontrado"; exit 18; }
          python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" --season "${SEASON}" --debug || true
          [ -s "${OUT_DIR}/injuries.csv" ] && head -n 5 "${OUT_DIR}/injuries.csv" || echo "::notice::injuries.csv vazio/ausente (ok)."

      - name: Predict from odds (market)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }
          head -n 20 "${OUT_DIR}/predictions_market.csv" || true

      - name: Features univariado
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
          SEASON: ${{ env.SEASON }}
        run: |
          set -e -o pipefail
          [ -f scripts/features_univariado.py ] || { echo "::error::scripts/features_univariado.py não encontrado"; exit 21; }
          python scripts/features_univariado.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }
          head -n 10 "${OUT_DIR}/features_univariado.csv" || true

      - name: Features bivariado + xG proxies
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
          SEASON: ${{ env.SEASON }}
        run: |
          set -e -o pipefail
          [ -f scripts/features_bivariado_xg.py ] || { echo "::error::scripts/features_bivariado_xg.py não encontrado"; exit 22; }
          python scripts/features_bivariado_xg.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 22; }
          head -n 10 "${OUT_DIR}/features_bivariado.csv" || true
          [ -s "${OUT_DIR}/features_xg.csv" ] && head -n 10 "${OUT_DIR}/features_xg.csv" || true

      - name: Blend models
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          python scripts/blend_models.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_blend.csv" || { echo "::error::predictions_blend.csv não gerado"; exit 24; }
          head -n 10 "${OUT_DIR}/predictions_blend.csv" || true

      - name: Calibrate probabilities
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euxo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }
          head -n 10 "${OUT_DIR}/calibrated_probs.csv" || true

      - name: Publish Kelly (stakes)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
          BANKROLL: ${{ env.BANKROLL }}
          KELLY_FRACTION: ${{ env.KELLY_FRACTION }}
          KELLY_CAP: ${{ env.KELLY_CAP }}
          KELLY_TOP_N: ${{ env.KELLY_TOP_N }}
          ROUND_TO: ${{ env.ROUND_TO }}
        run: |
          set -e -o pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }
          head -n 20 "${OUT_DIR}/kelly_stakes.csv" || true

      - name: Build Cartão Loteca
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -e -o pipefail
          [ -f scripts/build_cartao.py ] || { echo "::error::scripts/build_cartao.py não encontrado"; exit 26; }
          python scripts/build_cartao.py --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_cartao.txt" || { echo "::error::loteca_cartao.txt não gerado"; exit 26; }
          echo "==== CARTÃO LOTECA ===="
          cat "${OUT_DIR}/loteca_cartao.txt" || true
          echo "========================"

      - name: Sanity / Reality Check
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
          RODADA_ID: ${{ env.RODADA_ID }}
        run: |
          set -e -o pipefail
          [ -f scripts/sanity_reality_check.py ] || { echo "::error::scripts/sanity_reality_check.py não encontrado"; exit 27; }
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"
          echo "Sanity OK."

      - name: Publicar no Weights & Biases (opcional)
        shell: bash
        env:
          PYTHONPATH: ${{ github.workspace }}
          OUT_DIR: ${{ env.OUT_DIR }}
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          set -e -o pipefail
          if [ -z "${WANDB_API_KEY}" ]; then
            echo "Biblioteca 'wandb' não instalada ou chave ausente. Pulando publicação."
            exit 0
          fi
          if [ ! -f scripts/wandb_publish.py ]; then
            echo "::notice::wandb_publish.py ausente — pulando publicação."
            exit 0
          fi
          python scripts/wandb_publish.py --rodada "${OUT_DIR}" || echo "::warning::Falha ao publicar no W&B (continuando)."