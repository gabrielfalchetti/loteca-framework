name: end2end-odds-news-ml

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      # ===== Parâmetros do run =====
      SEASON: "2025"
      REGIONS: "uk,eu,us,au"
      LOOKAHEAD_DAYS: "3"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      DEBUG: "true"

      # ===== Chaves obrigatórias (sem fallback) =====
      THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY:  ${{ secrets.X_RAPIDAPI_KEY }}
      NEWSAPI_KEY:     ${{ secrets.NEWSAPI_KEY }}
      WANDB_API_KEY:   ${{ secrets.WANDB_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências Python (obrigatório)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy requests rapidfuzz Unidecode scikit-learn xgboost matplotlib wandb pyyaml python-dateutil pytz
          fi

      - name: Validar segredos obrigatórios
        shell: bash
        run: |
          set -euo pipefail
          miss=0
          for v in THEODDS_API_KEY X_RAPIDAPI_KEY NEWSAPI_KEY WANDB_API_KEY; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Segredo obrigatório ausente: $v"
              miss=1
            fi
          done
          [ "$miss" -eq 0 ] || exit 2

      - name: Inicializar diretórios e variáveis de execução
        id: init
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          OUT_DIR="data/out/${RUN_ID}"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}" "data/in/${OUT_DIR}"
          # aliases.json default (evita JSONDecodeError se estiver vazio/inexistente)
          if [ ! -s "data/in/aliases.json" ]; then
            echo '{"teams":{}}' > "data/in/aliases.json"
          fi

      # =====================
      # 1) WHITELIST AUTO
      # =====================
      - name: Construir whitelist a partir das APIs (obrigatório)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          a=0
          until [ $a -ge 3 ]; do
            python scripts/build_whitelist_from_apis.py \
              --out data/in/matches_whitelist.csv \
              --season "${SEASON}" \
              --regions "${REGIONS}" \
              --lookahead-days "${LOOKAHEAD_DAYS}" \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry whitelist: $a/3"; sleep $((5*a))
          done
          WL="data/in/matches_whitelist.csv"
          test -s "$WL" || { echo "::error::Whitelist não gerada"; exit 3; }
          header="$(head -n1 "$WL" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Whitelist sem coluna '$c'"; exit 3; }
          done
          LINES=$(wc -l < "$WL" | tr -d ' ')
          [ "$LINES" -ge 2 ] || { echo "::error::Whitelist sem jogos"; exit 3; }
          # Copiar para ambos os locais aguardados pelos scripts
          cp "$WL" "${OUT_DIR}/matches_whitelist.csv"
          cp "$WL" "${OUT_DIR}/matches_source.csv"
          mkdir -p "data/in/${OUT_DIR}"
          cp "$WL" "data/in/${OUT_DIR}/matches_source.csv"
          echo "===== Preview whitelist ====="
          head -n 20 "$WL" || true

      # =====================
      # 2) INGEST DE ODDS (2 FONTES OBRIGATÓRIAS)
      # =====================
      - name: Ingest TheOddsAPI (obrigatório)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py não encontrado."; exit 4; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/in/aliases.json" \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_theoddsapi.csv"; exit 4; }
          done

      - name: Ingest API-Football via RapidAPI (obrigatório)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_apifootball.csv"; exit 5; }
          done

      # =====================
      # 3) CONSENSO (ESTRITO) + HIGIENE PARA 3 VIAS
      # =====================
      - name: Gerar odds consenso (estrito)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          # Manter apenas linhas com as 3 odds válidas (>1.0) para evitar esportes de 2 vias
          awk -F',' 'NR==1 || ($3+0>1 && $4+0>1 && $5+0>1)' "$OUT_FILE" > "${OUT_FILE}.tmp" && mv "${OUT_FILE}.tmp" "$OUT_FILE"
          LINES=$(wc -l < "$OUT_FILE" | tr -d ' ')
          [ "$LINES" -ge 2 ] || { echo "::error::Consenso sem jogos 3-way válidos."; exit 6; }
          echo "===== Preview consensus ====="
          head -n 20 "$OUT_FILE" || true

      # =====================
      # 4) PREVISÃO MARKET -> CALIBRAÇÃO
      # =====================
      - name: Prever a partir das odds de mercado
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }

      - name: Calibrar probabilidades
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }

      # =====================
      # 5) XG UNIVARIADO & BIVARIADO (OBRIGATÓRIO)
      # =====================
      - name: XG Univariado
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/feature_xgboost_univariado.py ] || { echo "::error::scripts/feature_xgboost_univariado.py não encontrado"; exit 26; }
          python scripts/feature_xgboost_univariado.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 26; }

      - name: XG Bivariado
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/feature_xgboost_bivariado.py ] || { echo "::error::scripts/feature_xgboost_bivariado.py não encontrado"; exit 27; }
          python scripts/feature_xgboost_bivariado.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 27; }

      # =====================
      # 6) CONTEXTO (NEWS/WEATHER) + JOIN
      # =====================
      - name: Clima por jogo (tolerante a falha de GEO, mas precisa gerar arquivo)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          if [ -f scripts/weather_per_match_safe.py ]; then
            python scripts/weather_per_match_safe.py --in "${OUT_DIR}/matches_whitelist.csv" --out-dir "${OUT_DIR}" || true
          elif [ -f scripts/weather_snapshot_safe.py ] && [ -n "${WEATHER_LAT:-}" ] && [ -n "${WEATHER_LON:-}" ]; then
            python scripts/weather_snapshot_safe.py --out-dir "${OUT_DIR}" --lat "${WEATHER_LAT}" --lon "${WEATHER_LON}" || true
          fi
          # Garante arquivo (pode estar vazio, mas existente)
          [ -s "${OUT_DIR}/weather.csv" ] || : > "${OUT_DIR}/weather.csv"

      - name: Unir features com contexto
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/feature_join_context.py ] || { echo "::error::scripts/feature_join_context.py não encontrado"; exit 28; }
          # As duas features são obrigatórias neste fluxo
          if [ ! -s "${OUT_DIR}/features_univariado.csv" ] || [ ! -s "${OUT_DIR}/features_bivariado.csv" ]; then
            echo "::error::features_univariado.csv e/ou features_bivariado.csv ausentes em ${OUT_DIR}. Gere-as nas etapas de XG."
            exit 28
          fi
          python scripts/feature_join_context.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/context_features.csv" || { echo "::error::context_features.csv não gerado"; exit 28; }

      # =====================
      # 7) BLEND & KELLY
      # =====================
      - name: Blend de modelos (com contexto)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          python scripts/blend_models.py --rodada "${OUT_DIR}" --w_calib 0.65 --w_market 0.35 --use-context --context-strength 0.15 ${DEBUG:+--debug}
          test -s "${OUT_DIR}/predictions_blend.csv" || { echo "::error::predictions_blend.csv não gerado"; exit 24; }
          # Gera predictions_final.csv se o script já não o fizer
          if [ ! -s "${OUT_DIR}/predictions_final.csv" ] && [ -s "${OUT_DIR}/predictions_blend.csv" ]; then
            cp "${OUT_DIR}/predictions_blend.csv" "${OUT_DIR}/predictions_final.csv"
          fi
          test -s "${OUT_DIR}/predictions_final.csv" || { echo "::error::predictions_final.csv não gerado"; exit 24; }

      - name: Cálculo de stakes (Kelly)
        shell: bash
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          BANKROLL: ${{ env.BANKROLL }}
          KELLY_FRACTION: ${{ env.KELLY_FRACTION }}
          KELLY_CAP: ${{ env.KELLY_CAP }}
          KELLY_TOP_N: ${{ env.KELLY_TOP_N }}
          ROUND_TO: ${{ env.ROUND_TO }}
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }

      # =====================
      # 8) ARTEFATOS
      # =====================
      - name: Publicar artefatos
        uses: actions/upload-artifact@v4
        with:
          name: run-${{ steps.init.outputs.RUN_ID }}
          path: |
            ${{ env.OUT_DIR }}/**
            data/in/matches_whitelist.csv
            data/in/aliases.json