name: End-to-End • Odds + News + ML (STRICT)

on:
  workflow_dispatch:
    inputs:
      regions:
        description: "Regiões do TheOddsAPI"
        required: false
        default: "uk,eu,us,au"
      odds_sports:
        description: "Esportes do TheOddsAPI (vírgula)"
        required: false
        default: "soccer_brazil_campeonato,soccer_brazil_serie_b,soccer_argentina_primera_division,soccer_argentina_primera_nacional"
      season:
        description: "Temporada API-Football/OpenWeather"
        required: false
        default: "2025"
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:
  e2e:
    name: End-to-End pipeline (STRICT)
    runs-on: ubuntu-latest
    env:
      # Parâmetros padrão (podem ser sobrescritos no dispatch)
      REGIONS: ${{ inputs.regions || 'uk,eu,us,au' }}
      ODDS_SPORTS: ${{ inputs.odds_sports || 'soccer_brazil_campeonato,soccer_brazil_serie_b,soccer_argentina_primera_division,soccer_argentina_primera_nacional' }}
      SEASON: ${{ inputs.season || '2025' }}

      # Parâmetros do framework
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      DEBUG: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps (strict)
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Garantias mínimas:
          pip install --upgrade pip
          pip install requests pandas numpy scikit-learn wandb python-dateutil

      - name: Prepare OUT_DIR / IDs
        id: mkid
        shell: bash
        run: |
          set -e
          RID="$(date +%s)"
          echo "RODADA_ID=$RID" >> "$GITHUB_ENV"
          echo "OUT_DIR=data/out/$RID" >> "$GITHUB_ENV"
          mkdir -p "data/in" "$OUT_DIR"
          echo "Rodada: $RID"
          echo "OUT_DIR: $OUT_DIR"

      - name: Check entrada • data/in/matches_source.csv
        run: |
          set -e
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Entrada $FILE não encontrada. Crie com cabeçalho: match_id,home,away,source"
            exit 3
          fi
          header="$(head -n1 "$FILE" | tr -d '\r')"
          for col in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$col(,|$)" || { echo "::error::Cabeçalho '$col' ausente em $FILE"; exit 3; }
          done
          lines="$(wc -l < "$FILE")"
          [ "$lines" -ge 2 ] || { echo "::error::Nenhuma linha de jogo em $FILE"; exit 3; }
          echo "Entrada OK: $FILE (linhas=$lines)"

      # ======= Contexto (NÃO opcional) =======

      - name: Injuries via API-Football (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/apifootball_injuries_safe.py" ]; then
            echo "::error::scripts/apifootball_injuries_safe.py não encontrado."
            exit 6
          fi
          python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/injuries.csv" || { echo "::error::injuries.csv não gerado"; exit 6; }
          echo "==== injuries.csv (preview) ===="
          head -n 10 "${OUT_DIR}/injuries.csv" || true
          echo "================================"
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}

      - name: Weather via OpenWeather (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/weather_ingest_safe.py" ]; then
            echo "::error::scripts/weather_ingest_safe.py não encontrado."
            exit 8
          fi
          python scripts/weather_ingest_safe.py --out-dir "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado"; exit 8; }
          echo "==== weather.csv (preview) ===="
          head -n 10 "${OUT_DIR}/weather.csv" || true
          echo "==============================="
        env:
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}

      - name: News via NewsAPI (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/news_ingest_safe.py" ]; then
            echo "::error::scripts/news_ingest_safe.py não encontrado."
            exit 7
          fi
          python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/news.csv" || { echo "::error::news.csv não gerado"; exit 7; }
          echo "==== news.csv (preview) ===="
          head -n 5 "${OUT_DIR}/news.csv" || true
          echo "============================"
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}

      # ======= Odds (fonte 1) =======

      - name: TheOddsAPI (STRICT) — coleta odds
        run: |
          set -e
          if [ ! -f "scripts/ingest_odds_theoddsapi_safe.py" ]; then
            echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."
            exit 4
          fi
          echo "[theoddsapi] usando esportes: ${ODDS_SPORTS}"
          python scripts/ingest_odds_theoddsapi_safe.py \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --sports "${ODDS_SPORTS}" \
            --debug
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          echo "==== odds_theoddsapi.csv (preview) ===="
          head -n 20 "${OUT_DIR}/odds_theoddsapi.csv" || true
          echo "======================================="
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}

      # ======= Odds (consenso + pipeline) =======

      - name: Consenso de odds (STRICT)
        run: |
          set -e
          # consenso espera somente o ID e lê data/out/<ID>/*
          if ! python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"; then
            echo "::error::Falha em scripts.consensus_odds_safe"
            exit 5
          fi
          test -s "data/out/${RODADA_ID}/odds_consensus.csv" || { echo "::error::odds_consensus.csv não gerado"; exit 5; }
          echo "==== odds_consensus.csv (preview) ===="
          head -n 20 "data/out/${RODADA_ID}/odds_consensus.csv" || true
          echo "======================================"

      - name: Previsão a partir das odds (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/predict_from_odds.py" ]; then
            echo "::error::scripts/predict_from_odds.py não encontrado."
            exit 11
          fi
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 11; }
          echo "==== predictions_market.csv (preview) ===="
          head -n 20 "${OUT_DIR}/predictions_market.csv" || true
          echo "=========================================="

      - name: Kelly staking (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/publish_kelly.py" ]; then
            echo "::error::scripts/publish_kelly.py não encontrado."
            exit 12
          fi
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 12; }
          echo "==== kelly_stakes.csv (preview) ===="
          head -n 20 "${OUT_DIR}/kelly_stakes.csv" || true
          echo "===================================="

      - name: Montagem do Cartão Loteca (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/build_cartao.py" ]; then
            echo "::error::scripts/build_cartao.py não encontrado."
            exit 13
          fi
          python scripts/build_cartao.py --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_cartao.txt" || { echo "::error::loteca_cartao.txt não gerado"; exit 13; }
          echo "==== loteca_cartao.txt ===="
          cat "${OUT_DIR}/loteca_cartao.txt" || true
          echo "==========================="

      - name: Sanity & Reality Check (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/sanity_reality_check.py" ]; then
            echo "::error::scripts/sanity_reality_check.py não encontrado."
            exit 14
          fi
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"
          # se esse script gerar relatórios, opcionalmente liste
          ls -la "${OUT_DIR}" || true

      - name: Publicar artefatos no W&B (STRICT)
        run: |
          set -e
          if [ ! -f "scripts/wandb_log_safe.py" ]; then
            echo "::error::scripts/wandb_log_safe.py não encontrado."
            exit 15
          fi
          python scripts/wandb_log_safe.py --rodada "${OUT_DIR}" --project "loteca" --entity "SEU_WORKSPACE" --debug
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}