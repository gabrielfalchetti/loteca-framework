name: loteca - end2end (odds + news + ml)

on:
  workflow_dispatch:
    inputs:
      season:
        description: "Temporada (ex.: 2025)"
        required: true
        default: "2025"

env:
  SEASON: ${{ inputs.season }}
  REGIONS: uk,eu,us,au
  BANKROLL: 1000
  KELLY_FRACTION: 0.5
  KELLY_CAP: 0.1
  KELLY_TOP_N: 14
  ROUND_TO: 1
  DEBUG: "true"
  PYTHONPATH: ${{ github.workspace }}

jobs:
  loteca:
    runs-on: ubuntu-24.04

    steps:
      # ------------------- Infra básica -------------------
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install numpy==1.26.4 pandas==2.2.2 scipy==1.13.1 scikit-learn==1.5.2 \
              requests==2.32.3 python-dateutil==2.9.0.post0 pytz==2024.1 pyarrow==17.0.0 \
              rich==13.9.2 tqdm==4.66.4 beautifulsoup4==4.12.3 lxml==5.2.2 tabulate==0.9.0 \
              matplotlib==3.8.4 PyYAML==6.0.2
          fi

      - name: Prepare rodada dirs
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          RID="$(date +%s)"
          OUT_DIR="data/out/${RID}"
          echo "RODADA_ID=${RID}" >> "$GITHUB_ENV"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}"
          echo "Rodada: ${RID}"
          echo "OUT_DIR: ${OUT_DIR}"

      # ------------------- Regras: APIs obrigatórias -------------------
      - name: Assert required secrets (APIs OBRIGATÓRIAS)
        shell: bash
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
          X_RAPIDAPI_KEY:  ${{ secrets.X_RAPIDAPI_KEY }}
          NEWSAPI_KEY:     ${{ secrets.NEWSAPI_KEY }}
          WANDB_API_KEY:   ${{ secrets.WANDB_API_KEY }}
        run: |
          set -euo pipefail
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::THEODDS_API_KEY ausente"; exit 2; }
          [ -n "${X_RAPIDAPI_KEY:-}" ]  || { echo "::error::X_RAPIDAPI_KEY ausente"; exit 2; }
          [ -n "${NEWSAPI_KEY:-}" ]     || { echo "::error::NEWSAPI_KEY ausente"; exit 2; }
          [ -n "${WANDB_API_KEY:-}" ]   || { echo "::error::WANDB_API_KEY ausente"; exit 2; }
          # Expor em GITHUB_ENV para os scripts
          {
            echo "THEODDS_API_KEY=${THEODDS_API_KEY}"
            echo "X_RAPIDAPI_KEY=${X_RAPIDAPI_KEY}"
            echo "NEWSAPI_KEY=${NEWSAPI_KEY}"
            echo "WANDB_API_KEY=${WANDB_API_KEY}"
          } >> "$GITHUB_ENV"

      # ------------------- Entrada -------------------
      - name: Validate input (matches_source.csv)
        shell: bash
        run: |
          set -euo pipefail
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Entrada $FILE não encontrada."
            echo "Cabeçalho OBRIGATÓRIO: match_id,home,away,source,lat,lon"
            exit 3
          fi
          HEADER="$(head -n1 "$FILE" | tr -d '\r')"
          need() { echo "$HEADER" | grep -qiE "(^|,)$1(,|$)"; }
          miss=()
          for col in match_id home away source lat lon; do
            need "$col" || miss+=("$col")
          done
          if [ "${#miss[@]}" -gt 0 ]; then
            echo "::error::Cabeçalhos ausentes: ${miss[*]}"
            echo "Use: match_id,home,away,source,lat,lon"
            exit 3
          fi
          [ "$(wc -l < "$FILE")" -gt 1 ] || { echo "::error::Nenhum jogo listado em $FILE"; exit 3; }
          echo "Entrada OK."

      - name: Build whitelist
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/match_whitelist.py ] || { echo "::error::scripts/match_whitelist.py não encontrado"; exit 6; }
          python -m scripts.match_whitelist --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/matches_whitelist.csv" || { echo "::error::matches_whitelist.csv não gerado"; exit 6; }

      # ------------------- Coleta de odds (OBRIGATÓRIA) -------------------
      - name: Ingest odds — TheOddsAPI (OBRIGATÓRIO com retry)
        shell: bash
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi_safe.py ] || { echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."; exit 4; }
          a=0; until [ $a -ge 3 ]; do
            python scripts/ingest_odds_theoddsapi_safe.py --rodada "${OUT_DIR}" --regions "${REGIONS}" --debug && break
            a=$((a+1)); echo "retry theoddsapi: $a/3"; sleep $((5*a))
          done
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }

      - name: Ingest odds — API-Football (OBRIGATÓRIO com retry)
        shell: bash
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
          SEASON: ${{ env.SEASON }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi --rodada "${OUT_DIR}" --season "${SEASON}" --debug && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          # schema mínimo obrigatório
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_apifootball.csv"; exit 5; }
          done

      - name: Odds consensus (STRICT, OBRIGATÓRIO)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict true
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done

      # ------------------- News / Weather / Injuries (OBRIGATÓRIOS) -------------------
      - name: News (OBRIGATÓRIO com retry)
        shell: bash
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/news_ingest_safe.py ] || { echo "::error::scripts/news_ingest_safe.py não encontrado"; exit 16; }
          a=0; until [ $a -ge 3 ]; do
            python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}" && break
            a=$((a+1)); echo "retry news: $a/3"; sleep $((5*a))
          done
          test -s "${OUT_DIR}/news.csv" || { echo "::error::news.csv não gerado"; exit 16; }

      - name: Weather per match (OBRIGATÓRIO com retry/backoff)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/weather_per_match_safe.py ]; then
            a=0; until [ $a -ge 4 ]; do
              python scripts/weather_per_match_safe.py --in "data/in/matches_source.csv" --out-dir "${OUT_DIR}" && break
              a=$((a+1)); echo "retry weather: $a/4"; sleep $((10*a))
            done
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado pelo per-match"; exit 17; }
          else
            echo "::error::scripts/weather_per_match_safe.py não encontrado"; exit 17
          fi

      - name: Injuries (OBRIGATÓRIO com retry)
        shell: bash
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
          SEASON: ${{ env.SEASON }}
        run: |
          set -euo pipefail
          [ -f scripts/apifootball_injuries_safe.py ] || { echo "::error::scripts/apifootball_injuries_safe.py não encontrado"; exit 18; }
          a=0; until [ $a -ge 3 ]; do
            python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" --season "${SEASON}" --debug && break
            a=$((a+1)); echo "retry injuries: $a/3"; sleep $((5*a))
          done
          test -s "${OUT_DIR}/injuries.csv" || { echo "::error::injuries.csv não gerado"; exit 18; }

      # ------------------- Market → Probs -------------------
      - name: Predict from odds (market)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          test -s "${OUT_DIR}/odds_consensus.csv" || { echo "::error::odds_consensus.csv está vazio em ${OUT_DIR}/odds_consensus.csv."; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }

      # ------------------- Features -------------------
      - name: Build features (univariado)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/features_univariado.py ] || { echo "::error::scripts/features_univariado.py não encontrado"; exit 21; }
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv ausente"; exit 21; }
          python scripts/features_univariado.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }

      - name: Build features (bivariado + xg)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/features_bivariado_xg.py ] || { echo "::error::scripts/features_bivariado_xg.py não encontrado"; exit 22; }
          python scripts/features_bivariado_xg.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 22; }
          test -s "${OUT_DIR}/features_xg.csv" || { echo "::error::features_xg.csv não gerado"; exit 22; }

      - name: Join context features (weather/news/injuries + features)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/feature_join_context.py ] || { echo "::error::scripts/feature_join_context.py não encontrado"; exit 28; }
          python scripts/feature_join_context.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/context_features.csv" || { echo "::error::context_features.csv não gerado"; exit 28; }

      # ------------------- Blend + Calibração -------------------
      - name: Calibrate probabilities
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }

      - name: Blend models (+ contexto)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          python scripts/blend_models.py --rodada "${OUT_DIR}" --w_calib 0.65 --w_market 0.35 --use-context --context-strength 0.15 --debug
          test -s "${OUT_DIR}/predictions_blend.csv" || { echo "::error::predictions_blend.csv não gerado"; exit 24; }
          # (opcionalmente, alguns repos salvam o final como predictions_final.csv)
          cp "${OUT_DIR}/predictions_blend.csv" "${OUT_DIR}/predictions_final.csv"

      # ------------------- Apostas / Cartão -------------------
      - name: Publish Kelly
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }

      - name: Build cartão Loteca
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/build_cartao.py ] || { echo "::error::scripts/build_cartao.py não encontrado"; exit 26; }
          python scripts/build_cartao.py --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_cartao.txt" || { echo "::error::loteca_cartao.txt não gerado"; exit 26; }
          echo "==== CARTÃO LOTECA ===="
          cat "${OUT_DIR}/loteca_cartao.txt" || true
          echo "======================="

      - name: Sanity / reality checks
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/sanity_reality_check.py ] || { echo "::error::scripts/sanity_reality_check.py não encontrado"; exit 27; }
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"
          echo "Sanity OK."

      # ------------------- Publicação -------------------
      - name: Publish to Weights & Biases (OBRIGATÓRIO)
        shell: bash
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          set -euo pipefail
          if [ -f scripts/wandb_publish.py ]; then
            python scripts/wandb_publish.py --rodada "${OUT_DIR}"
          else
            echo "::error::wandb_publish.py ausente — publicação é obrigatória pelo modo STRICT"; exit 29
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: loteca-${{ env.RODADA_ID }}
          path: ${{ env.OUT_DIR }}
          if-no-files-found: error
          compression-level: 6