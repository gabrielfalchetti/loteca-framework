name: End2End Odds + News + ML

on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable verbose debug logs'
        required: false
        default: 'true'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_WARN_SCRIPT_LOCATION: "1"
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  LOOKAHEAD_DAYS: "3"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  DEBUG: "true"

jobs:
  lint:
    name: Lint workflows (yamllint + actionlint)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yamllint
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y yamllint

      - name: Run yamllint
        run: |
          yamllint .github/workflows/*.yml || true

      - name: Install actionlint
        run: |
          curl -sSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash -s -- -b "${HOME}/.local/bin" latest
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      - name: Run actionlint (all workflows)
        run: |
          actionlint -color -verbose || true

  end2end:
    name: End2End pipeline
    runs-on: ubuntu-24.04
    needs: [lint]
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Garantias pontuais usadas nos scripts
          pip install --upgrade unidecode pandas numpy scikit-learn xgboost pyyaml

      # =========================
      # INIT (CORREÇÃO DO OUT_DIR)
      # =========================
      - name: Init run id & dirs
        id: init
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          OUT_DIR="data/out/${RUN_ID}"         # <<< define no shell atual (corrige 'unbound variable')
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          printf 'OUT_DIR=%s\n' "$OUT_DIR" >> "$GITHUB_ENV"

          if [ "${DEBUG:-}" = "true" ] || [ "${DEBUG:-}" = "1" ]; then
            DEBUG_FLAG="--debug"
          else
            DEBUG_FLAG=""
          fi
          printf 'DEBUG_FLAG=%s\n' "$DEBUG_FLAG" >> "$GITHUB_ENV"

          mkdir -p "data/in" "$OUT_DIR"
          # Arquivos mínimos
          [ -s "data/in/aliases.json" ] || echo '{"teams": {}}' > data/in/aliases.json
          [ -s "data/in/matches_source.csv" ] || { echo "::error::Arquivo obrigatório ausente: data/in/matches_source.csv"; exit 2; }

          echo "RUN_ID=${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}"

      # =========================
      # NORMALIZAÇÃO + VALIDAÇÃO WHITELIST
      # =========================
      - name: Normalize + validate whitelist names (pre-ingest)
        run: |
          set -euo pipefail
          SRC="data/in/matches_source.csv"
          DST_RAW="${OUT_DIR}/matches_whitelist_raw.csv"
          DST_NORM="${OUT_DIR}/matches_whitelist.csv"

          tr -d '\r' < "$SRC" | sed -E 's/[[:space:]]+/ /g; s/ *, */,/g; s/^ //; s/ $//' > "$DST_RAW"

          header="$(head -n1 "$DST_RAW")"
          h_low="$(echo "$header" | tr '[:upper:]' '[:lower:]')"
          for need in match_id home away; do
            echo "$h_low" | grep -qiE "(^|,)$need(,|$)" || { echo "::error::missing column '$need' in matches_source.csv"; exit 2; }
          done

          awk -F',' -v OFS=',' '
            function rmuf(s){ gsub(/\/[A-Za-z]{2}($|[^A-Za-z])/, "", s); return s }
            function deacc(s){
              gsub(/á|à|ã|â|ä/,"a",s); gsub(/Á|À|Ã|Â|Ä/,"A",s);
              gsub(/é|ê|è|ë/,"e",s);  gsub(/É|Ê|È|Ë/,"E",s);
              gsub(/í|î|ì|ï/,"i",s);  gsub(/Í|Î|Ì|Ï/,"I",s);
              gsub(/ó|ô|ò|õ|ö/,"o",s); gsub(/Ó|Ô|Ò|Õ|Ö/,"O",s);
              gsub(/ú|û|ù|ü/,"u",s);  gsub(/Ú|Û|Ù|Ü/,"U",s);
              gsub(/ç/,"c",s);        gsub(/Ç/,"C",s);
              gsub(/ñ/,"n",s);        gsub(/Ñ/,"N",s);
              return s
            }
            function trim(s){ sub(/^ +/,"",s); sub(/ +$/,"",s); return s }
            function map_pt_en(s,  l){
              l=tolower(s)
              if(l=="estonia") return "Estonia"
              if(l=="italia") return "Italy"
              if(l=="bulgaria") return "Bulgaria"
              if(l=="turquia") return "Turkey"
              if(l=="espanha") return "Spain"
              if(l=="georgia") return "Georgia"
              if(l=="servia" || l=="serbia/ser" || l=="serbia") return "Serbia"
              if(l=="albania") return "Albania"
              if(l=="portugal") return "Portugal"
              if(l=="irlanda") return "Ireland"
              if(l=="holanda" || l=="paises baixos") return "Netherlands"
              if(l=="finlandia") return "Finland"
              if(l=="romenia") return "Romania"
              if(l=="austria") return "Austria"
              if(l=="dinamarca") return "Denmark"
              if(l=="grecia") return "Greece"
              if(l=="lituania") return "Lithuania"
              if(l=="polonia") return "Poland"
              if(l=="ponte preta") return "Ponte Preta"
              if(l=="guarani") return "Guarani"
              if(l=="palmeiras") return "Palmeiras"
              if(l=="juventude") return "Juventude"
              if(l=="criciuma") return "Criciuma"
              if(l=="america/mg" || l=="america mg" || l=="america-mg" || l=="america mineiro") return "America Mineiro"
              if(l=="cuiaba") return "Cuiaba"
              if(l=="coritiba") return "Coritiba"
              if(l=="novorizontino" || l=="gremio novorizontino" || l=="grêmio novorizontino") return "Gremio Novorizontino"
              if(l=="operario" || l=="operario pr" || l=="operario/pr" || l=="operário/pr") return "Operario PR"
              return s
            }
            NR==1{
              for(i=1;i<=NF;i++){
                k=tolower($i);
                if(k=="match_id") mi=i;
                if(k=="home") hi=i;
                if(k=="away") ai=i;
              }
              if(!(mi&&hi&&ai)){ print "::error::header mapping failed"; exit 2 }
              print "match_id","home","away";
              next
            }
            {
              mid=$mi; home=$hi; away=$ai;
              home=rmuf(home); away=rmuf(away);
              home=deacc(home); away=deacc(away);
              home=trim(home); away=trim(away);
              home=map_pt_en(home); away=map_pt_en(away);
              if(mid=="" || home=="" || away==""){ print "::error::empty field on line " NR; exit 2 }
              if(seen[mid]++){ print "::error::duplicate match_id: " mid; exit 2 }
              print mid,home,away
            }
          ' "$DST_RAW" > "$DST_NORM"

          LINES=$(wc -l < "$DST_NORM" | tr -d " ")
          [ "$LINES" -ge 2 ] || { echo "::error::whitelist empty after normalization"; exit 3; }
          echo "===== Preview normalized whitelist ====="
          head -n 30 "$DST_NORM" || true

      # =========================
      # INGEST DAS 2 APIs (OBRIGATÓRIAS)
      # =========================
      - name: Ingest API-Football (RapidAPI) – obrigatório
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
          SEASON: ${{ env.SEASON }}
          DEBUG_FLAG: ${{ env.DEBUG_FLAG }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py not found"; exit 5; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_apifootball.csv"; exit 5; }
          done

      - name: Ingest TheOddsAPI – obrigatório
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
          REGIONS: ${{ env.REGIONS }}
          DEBUG_FLAG: ${{ env.DEBUG_FLAG }}
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py not found"; exit 5; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/in/aliases.json" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv not generated"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_theoddsapi.csv"; exit 5; }
          done

      # =========================
      # CONSENSO DE ODDS (STRICT)
      # =========================
      - name: Build consensus odds (strict)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py not found"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv not generated"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::missing column '$c' in odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      # =========================
      # FEATURE ENGINEERING
      # =========================
      - name: Build features (univariate + bivariate)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/features_univariate.py ] || { echo "::error::scripts/features_univariate.py not found"; exit 7; }
          [ -f scripts/features_bivariate.py ] || { echo "::error::scripts/features_bivariate.py not found"; exit 7; }
          python -m scripts.features_univariate --rodada "${OUT_DIR}"
          python -m scripts.features_bivariate  --rodada "${OUT_DIR}"

      # =========================
      # MODELAGEM XGBOOST
      # =========================
      - name: Train + predict (XGB Univariate)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/xgb_univariate.py ] || { echo "::error::scripts/xgb_univariate.py not found"; exit 8; }
          python -m scripts.xgb_univariate --rodada "${OUT_DIR}"

      - name: Train + predict (XGB Bivariate)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/xgb_bivariate.py ] || { echo "::error::scripts/xgb_bivariate.py not found"; exit 8; }
          python -m scripts.xgb_bivariate --rodada "${OUT_DIR}"

      # =========================
      # CALIBRAÇÃO DE PROBABILIDADES
      # =========================
      - name: Calibrate probabilities
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py not found"; exit 9; }
          python -m scripts.calibrate_probs --rodada "${OUT_DIR}"

      # =========================
      # KELLY + STAKE SIZING
      # =========================
      - name: Kelly & stake sizing
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          BANKROLL: ${{ env.BANKROLL }}
          KELLY_FRACTION: ${{ env.KELLY_FRACTION }}
          KELLY_CAP: ${{ env.KELLY_CAP }}
          KELLY_TOP_N: ${{ env.KELLY_TOP_N }}
          ROUND_TO: ${{ env.ROUND_TO }}
        run: |
          set -euo pipefail
          [ -f scripts/kelly_bets.py ] || { echo "::error::scripts/kelly_bets.py not found"; exit 10; }
          python -m scripts.kelly_bets \
            --rodada "${OUT_DIR}" \
            --bankroll "${BANKROLL}" \
            --fraction "${KELLY_FRACTION}" \
            --cap "${KELLY_CAP}" \
            --topn "${KELLY_TOP_N}" \
            --round-to "${ROUND_TO}"

      # =========================
      # MONTAGEM DO CARTÃO LOTECA
      # =========================
      - name: Compose Loteca ticket
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/make_loteca_ticket.py ] || { echo "::error::scripts/make_loteca_ticket.py not found"; exit 11; }
          python -m scripts.make_loteca_ticket --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_ticket.csv" || { echo "::error::loteca_ticket.csv não gerado"; exit 11; }
          echo "==== PREVIEW TICKET ===="
          column -s, -t < "${OUT_DIR}/loteca_ticket.csv" | head -n 30 || true

      # =========================
      # ARTEFATOS
      # =========================
      - name: Upload artifacts (rodada)
        uses: actions/upload-artifact@v4
        with:
          name: rodada-${{ steps.init.outputs.RUN_ID }}
          path: |
            ${{ env.OUT_DIR }}/
          if-no-files-found: error