name: End2End - Odds + News + ML

on:
  workflow_dispatch:

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  LOOKAHEAD_DAYS: "3"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  DEBUG: "true"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (with fallbacks)
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy python-dateutil requests rapidfuzz
          fi

      - name: Init run (RUN_ID, OUT_DIR, pasta de entrada e aliases.json)
        id: init
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID=$(date +%s)
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=data/out/${RUN_ID}" >> "$GITHUB_ENV"

          mkdir -p "data/in" "${OUT_DIR}"

          # Garante que o arquivo existe (mesmo que vazio)
          if [ ! -s "data/in/aliases.json" ]; then
            echo '{"teams": {}}' > data/in/aliases.json
          fi

          # Garante que seu matches_source.csv existe
          if [ ! -s "data/in/matches_source.csv" ]; then
            echo "::error::Arquivo obrigatório ausente: data/in/matches_source.csv"
            exit 2
          fi

      - name: Build whitelist (somente dos meus jogos)
        run: |
          set -euo pipefail
          [ -f scripts/build_whitelist_from_source.py ] || { echo "::error::scripts/build_whitelist_from_source.py não encontrado"; exit 3; }

          # Gera whitelist EXCLUSIVA a partir de data/in/matches_source.csv
          python scripts/build_whitelist_from_source.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}

          WL="${OUT_DIR}/matches_whitelist.csv"
          test -s "$WL" || { echo "::error::Whitelist não gerada"; exit 3; }

          header="$(head -n1 "$WL" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Whitelist sem coluna '$c'"; exit 3; }
          done
          LINES=$(wc -l < "$WL" | tr -d ' ')
          [ "$LINES" -ge 2 ] || { echo "::error::Whitelist sem jogos (mínimo 1 linha além do cabeçalho)"; exit 3; }

          echo "===== Preview whitelist ====="
          head -n 20 "$WL" || true

      - name: Validar nomes de times (antes do ingest)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail

          python - << 'PYCODE'
          import json, sys, csv
          from pathlib import Path
          from rapidfuzz import process, fuzz

          OUT_DIR = Path("${{ env.OUT_DIR }}")
          wl = OUT_DIR / "matches_whitelist.csv"
          aliases_path = Path("data/in/aliases.json")

          if not wl.is_file() or wl.stat().st_size == 0:
            print("::error::Whitelist ausente ou vazia:", wl)
            sys.exit(4)
          if not aliases_path.is_file() or aliases_path.stat().st_size == 0:
            print("::warning::aliases.json ausente/vazio; cria mapeamentos em data/in/aliases.json para evitar falhas no ingest.")
            teams_map = {}
          else:
            with open(aliases_path, "r", encoding="utf-8") as f:
              data = json.load(f) or {}
              teams_map = (data.get("teams") or {})

          # universo conhecido (alvos para fuzzy suggest)
          known = set(teams_map.values()) | set(teams_map.keys())

          missing = []
          def check_name(name:str):
            name = name.strip()
            if name in teams_map or name in teams_map.values():
              return True, None
            # sugestão fuzzy (se não estiver mapeado)
            if known:
              sug, score, _ = process.extractOne(name, list(known), scorer=fuzz.WRatio)
              return False, (sug, score)
            return False, None

          with open(wl, "r", encoding="utf-8") as f:
            rdr = csv.DictReader(f)
            for i, row in enumerate(rdr, start=2):
              for side in ("home","away"):
                ok, hint = check_name(row[side])
                if not ok:
                  if hint:
                    sug, score = hint
                    print(f"::warning::Nome não mapeado '{row[side]}' (linha {i}). Sugestão: '{sug}' (similaridade ~{score}%).")
                  else:
                    print(f"::warning::Nome não mapeado '{row[side]}' (linha {i}).")
                  missing.append((i, side, row[side]))

          if missing:
            print("::error::Existem nomes não mapeados em aliases.json. Adicione em data/in/aliases.json em 'teams'. Exemplo:")
            print('{"teams": {"Criciúma/SC": "Criciuma", "América/MG": "America Mineiro", "Juventude/RS": "Juventude"}}')
            sys.exit(6)
          else:
            print("[validate] OK - todos os nomes estão mapeados em aliases.json")

          PYCODE

      # ===================== INGEST =====================

      - name: Ingest odds - API-Football (RapidAPI)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          SEASON: ${{ env.SEASON }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }

          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_apifootball.csv"; exit 5; }
          done

      - name: Ingest odds - TheOddsAPI (opcional; ajuda no consenso)
        if: ${{ env.THEODDS_API_KEY != '' }}
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          REGIONS: ${{ env.REGIONS }}
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi.py ] || { echo "::error::scripts/ingest_odds_theoddsapi.py não encontrado."; exit 4; }

          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/in/aliases.json" \
              ${DEBUG:+--debug} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done

          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_theoddsapi.csv"; exit 4; }
          done

      # ===================== CONSENSO & PRED =====================

      - name: Consenso das odds
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      - name: Predições a partir do mercado
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }

      # ===================== FEATURES & CONTEXTO (opcional) =====================
      # Se você usa XG/robustez extra, mantenha estes steps. Se não, pode removê-los.

      - name: Features univariado
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/feature_build_univariado.py ] || { echo "::error::scripts/feature_build_univariado.py não encontrado"; exit 21; }
          python scripts/feature_build_univariado.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }

      - name: Join contexto (se tiver XG pronto)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/feature_join_context.py ] || { echo "::error::scripts/feature_join_context.py não encontrado"; exit 28; }
          if [ ! -s "${OUT_DIR}/features_univariado.csv" ] || [ ! -s "${OUT_DIR}/features_bivariado.csv" ]; then
            echo "::warning::features_univariado.csv e/ou features_bivariado.csv ausentes; pulando join de contexto."
            exit 0
          fi
          python scripts/feature_join_context.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/context_features.csv" || { echo "::error::context_features.csv não gerado"; exit 28; }
          head -n 10 "${OUT_DIR}/context_features.csv" || true

      # ===================== KELLY & PUBLICAÇÃO =====================

      - name: Publicar stakes (Kelly)
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
          BANKROLL: ${{ env.BANKROLL }}
          KELLY_FRACTION: ${{ env.KELLY_FRACTION }}
          KELLY_CAP: ${{ env.KELLY_CAP }}
          KELLY_TOP_N: ${{ env.KELLY_TOP_N }}
          ROUND_TO: ${{ env.ROUND_TO }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }

      # (Opcional) Montar cartão Loteca ao final, se você já tiver o script:
      - name: Cartão Loteca (opcional)
        if: ${{ false }}  # mude para true quando tiver seu script pronto
        env:
          OUT_DIR: ${{ env.OUT_DIR }}
        run: |
          set -euo pipefail
          [ -f scripts/montar_cartao_loteca.py ] || { echo "::warning::scripts/montar_cartao_loteca.py não encontrado; skip"; exit 0; }
          python scripts/montar_cartao_loteca.py --rodada "${OUT_DIR}" ${DEBUG:+--debug}