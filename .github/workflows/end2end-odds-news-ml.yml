name: end2end-odds-news-ml

on:
  workflow_dispatch:
    inputs:
      debug:
        description: "Habilitar debug"
        type: boolean
        default: true
        required: false
  schedule:
    - cron: "15 09 * * 4,5"

permissions:
  contents: read

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  LOOKAHEAD_DAYS: "3"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pandas numpy rapidfuzz requests pytz python-dateutil

      # ---------- PREPARE ----------
      - name: Prepare run folders
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="$(date +%s)"
          echo "RUN_ID=${RUN_ID}" >> "$GITHUB_OUTPUT"

          OUT_DIR="data/out/${RUN_ID}"
          echo "OUT_DIR=${OUT_DIR}" >> "$GITHUB_ENV"
          mkdir -p "data/in" "${OUT_DIR}"

          if [ ! -s "data/in/aliases.json" ]; then
            echo '{"teams": {}}' > data/in/aliases.json
          fi

          if [ ! -s "data/in/matches_source.csv" ]; then
            echo "::error::Arquivo obrigatório ausente: data/in/matches_source.csv"
            exit 2
          fi

      - name: Set DEBUG_FLAG
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ inputs.debug }}" = "true" ]; then
            echo "DEBUG_FLAG=--debug" >> "$GITHUB_ENV"
          else
            echo "DEBUG_FLAG=" >> "$GITHUB_ENV"
          fi

      # ---------- VALIDACAO WHITELIST ----------
      - name: Validar e normalizar nomes (whitelist)
        id: validate_names
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import csv, os, sys
from pathlib import Path

out_dir = os.environ.get("OUT_DIR") or ""
src = Path("data/in/matches_source.csv")
dst = Path(out_dir) / "matches_whitelist.csv"
dst.parent.mkdir(parents=True, exist_ok=True)

if not src.exists():
    print("::error::data/in/matches_source.csv não encontrado.")
    sys.exit(2)

with src.open("r", encoding="utf-8", newline="") as f:
    reader = csv.DictReader(f)
    if not reader.fieldnames:
        print("::error::Cabeçalho ausente em matches_source.csv")
        sys.exit(2)
    fieldmap = {h.strip().lower(): h for h in reader.fieldnames}
    req = {"match_id","home","away"}
    miss = req - set(fieldmap.keys())
    if miss:
        print(f"::error::matches_source.csv sem colunas: {sorted(miss)}")
        sys.exit(2)
    seen = set()
    rows = []
    line = 1
    for r in reader:
        line += 1
        mid = (r.get(fieldmap["match_id"]) or "").strip()
        home = " ".join((r.get(fieldmap["home"]) or "").split())
        away = " ".join((r.get(fieldmap["away"]) or "").split())
        if not mid or not home or not away:
            print(f"::error::Linha {line} inválida (match_id/home/away vazio)")
            sys.exit(2)
        if mid in seen:
            print(f"::error::match_id duplicado: {mid}")
            sys.exit(2)
        seen.add(mid)
        rows.append({"match_id": mid, "home": home, "away": away})

if not rows:
    print("::error::Whitelist sem jogos")
    sys.exit(3)

with dst.open("w", encoding="utf-8", newline="") as g:
    w = csv.DictWriter(g, fieldnames=["match_id","home","away"])
    w.writeheader()
    w.writerows(rows)

print(f"[whitelist] gerada: {dst} linhas={len(rows)}")
PY
          echo "===== Preview whitelist ====="
          head -n 50 "${OUT_DIR}/matches_whitelist.csv" || true

      # ---------- INGEST API-FOOTBALL ----------
      - name: Ingest odds (API-Football via RapidAPI) obrigatorio
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi \
              --rodada "${OUT_DIR}" \
              --season "${SEASON}" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_apifootball.csv"; exit 5; }
          done

      # ---------- ROBUSTEZ THEODDSAPI (OPCIONAL) ----------
      - name: Ingest odds (TheOddsAPI soccer) opcional
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f scripts/ingest_odds_theoddsapi.py ]; then
            echo "[theodds] script ausente - pulando"; exit 0
          fi
          python - <<'PY'
try:
    import rapidfuzz  # noqa
    print("[deps] rapidfuzz OK")
except Exception:
    import sys, subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "rapidfuzz"])
PY
          a=0; until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi \
              --rodada "${OUT_DIR}" \
              --regions "${REGIONS}" \
              --aliases "data/in/aliases.json" \
              ${DEBUG_FLAG} && break
            a=$((a+1)); echo "retry theodds: $a/3"; sleep $((5*a))
          done || true
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          if [ -s "$OUT" ]; then
            header="$(head -n1 "$OUT" | tr -d '\r')"
            for c in match_id home away odds_home odds_draw odds_away; do
              echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::warning::Coluna '$c' ausente em odds_theoddsapi.csv"; exit 0; }
            done
          else
            echo "[theodds] sem arquivo; seguindo apenas API-Football"
          fi

      # ---------- CONSENSO / MERCADO ----------
      - name: Consensus odds safe
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          head -n 20 "$OUT_FILE" || true

      - name: Predict from odds market
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }

      # ---------- FEATURES UNIVARIADO ----------
      - name: Build features univariado
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/feature_build_univariado.py ] || { echo "::error::scripts/feature_build_univariado.py não encontrado"; exit 21; }
          python scripts/feature_build_univariado.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }

      # ---------- KELLY ----------
      - name: Publish Kelly stakes
        shell: bash
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" ${DEBUG_FLAG}
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }

      # ---------- CARTAO LOTECA ----------
      - name: Montar cartao loteca
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
import pandas as pd, os, sys
out_dir = os.environ.get("OUT_DIR") or ""
p = f"{out_dir}/kelly_stakes.csv"
if not os.path.exists(p):
    print("::error::kelly_stakes.csv não encontrado"); sys.exit(26)
df = pd.read_csv(p)
lines = ["# Cartão Loteca", ""]
for _, r in df.iterrows():
    home = r.get("team_home", "")
    away = r.get("team_away", "")
    pick = str(r.get("pick", "")).upper()
    stake = r.get("stake", "")
    lines.append(f"- **{home} x {away}** — palpite: {pick}  |  stake: {stake}")
content = "\n".join(lines) + "\n"
with open(f"{out_dir}/loteca_card.md","w",encoding="utf-8") as f:
    f.write(content)
print(f"[loteca] gerado: {out_dir}/loteca_card.md")
PY
          test -s "${OUT_DIR}/loteca_card.md" || { echo "::error::loteca_card.md não gerado"; exit 26; }
          echo "===== Preview Cartao Loteca ====="
          head -n 50 "${OUT_DIR}/loteca_card.md" || true

      # ---------- ARTEFATOS ----------
      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: loteca-${{ steps.prep.outputs.RUN_ID }}
          path: |
            ${{ env.OUT_DIR }}/**
            data/in/matches_source.csv
            data/in/aliases.json
          if-no-files-found: warn