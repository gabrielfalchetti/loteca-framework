name: Loteca End-to-End (Hardened)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

env:
  SEASON: "2025"
  REGIONS: "uk,eu,us,au"
  BANKROLL: "1000"
  KELLY_FRACTION: "0.5"
  KELLY_CAP: "0.1"
  KELLY_TOP_N: "14"
  ROUND_TO: "1"
  DEBUG: "true"

jobs:
  loteca:
    name: loteca
    runs-on: ubuntu-24.04
    env:
      # Garante que `python -m scripts...` funcione
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (requirements.txt ou fallback fixo)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install \
              numpy==1.26.4 pandas==2.2.2 scipy==1.13.1 scikit-learn==1.5.2 \
              requests==2.32.3 python-dateutil==2.9.0.post0 pytz==2024.1 \
              pyarrow==17.0.0 rich==13.9.2 tqdm==4.66.4 beautifulsoup4==4.12.3 \
              lxml==5.2.2 tabulate==0.9.0 matplotlib==3.8.4 PyYAML==6.0.2
          fi

      - name: Prepare rodada (OUT_DIR)
        id: prepare
        shell: bash
        run: |
          set -euo pipefail
          RID="$(date +%s)"
          OUT_DIR="data/out/$RID"
          echo "RODADA_ID=$RID" >> "$GITHUB_ENV"
          echo "OUT_DIR=$OUT_DIR" >> "$GITHUB_ENV"
          mkdir -p "data/in" "$OUT_DIR"
          echo "Rodada: $RID"
          echo "OUT_DIR: $OUT_DIR"

      - name: Validate entrada matches_source.csv
        shell: bash
        run: |
          set -euo pipefail
          FILE="data/in/matches_source.csv"
          if [ ! -f "$FILE" ]; then
            echo "::error::Entrada $FILE não encontrada."
            echo "Cabeçalho OBRIGATÓRIO: match_id,home,away,source,lat,lon"
            exit 3
          fi
          HEADER="$(head -n1 "$FILE" | tr -d '\r')"
          need() { echo "$HEADER" | grep -qiE "(^|,)$1(,|$)"; }
          miss=()
          for col in match_id home away source lat lon; do
            need "$col" || miss+=("$col")
          done
          if [ "${#miss[@]}" -gt 0 ]; then
            echo "::error::Cabeçalhos ausentes: ${miss[*]}"
            echo "Use: match_id,home,away,source,lat,lon"
            exit 3
          fi
          [ "$(wc -l < "$FILE")" -gt 1 ] || { echo "::error::Nenhum jogo listado em $FILE"; exit 3; }
          echo "Entrada OK."

      # NOVO: gera data/out/<RID>/matches_whitelist.csv
      - name: Build Matches Whitelist
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/match_whitelist.py ] || { echo "::error::scripts/match_whitelist.py não encontrado"; exit 6; }
          python -m scripts.match_whitelist --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/matches_whitelist.csv" || { echo "::error::matches_whitelist.csv não gerado"; exit 6; }
          echo "Whitelist:"
          head -n 10 "${OUT_DIR}/matches_whitelist.csv" || true

      - name: Ingest odds (TheOddsAPI)
        env:
          THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::THEODDS_API_KEY ausente em Secrets"; exit 4; }
          [ -f scripts/ingest_odds_theoddsapi_safe.py ] || { echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."; exit 4; }
          python scripts/ingest_odds_theoddsapi_safe.py \
            --rodada "${OUT_DIR}" \
            --regions "${REGIONS}" \
            --debug
          test -s "${OUT_DIR}/odds_theoddsapi.csv" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 4; }
          head -n 10 "${OUT_DIR}/odds_theoddsapi.csv" || true

      - name: (Opcional) Ingest odds API-Football via RapidAPI
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${X_RAPIDAPI_KEY:-}" ]; then
            echo "::notice::X_RAPIDAPI_KEY ausente — pulando coleta via RapidAPI."
            # ainda assim deixa um CSV vazio com header esperado
            echo "team_home,team_away,match_key,odds_home,odds_draw,odds_away" > "${OUT_DIR}/odds_apifootball.csv"
            exit 0
          fi
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          python -m scripts.ingest_odds_apifootball_rapidapi \
            --rodada "${OUT_DIR}" \
            --season "${SEASON}" \
            --debug
          test -s "${OUT_DIR}/odds_apifootball.csv" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          head -n 10 "${OUT_DIR}/odds_apifootball.csv" || true

      - name: Consensus odds (usa whitelist)
        shell: bash
        run: |
          set -e -o pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          # o script procura ${OUT_DIR}/matches_whitelist.csv
          python -m scripts.consensus_odds_safe --rodada "${RODADA_ID}"
          OUT_FILE="data/out/${RODADA_ID}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          for c in team_home team_away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
          done
          head -n 10 "$OUT_FILE" || true

      - name: Ingest news (NewsAPI)
        env:
          NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${NEWSAPI_KEY:-}" ] || { echo "::error::NEWSAPI_KEY ausente em Secrets"; exit 16; }
          [ -f scripts/news_ingest_safe.py ] || { echo "::error::scripts/news_ingest_safe.py não encontrado"; exit 16; }
          python scripts/news_ingest_safe.py --out-dir "${OUT_DIR}"
          test -s "${OUT_DIR}/news.csv" || { echo "::error::news.csv não gerado"; exit 16; }
          head -n 5 "${OUT_DIR}/news.csv" || true

      - name: Weather per match (preferencial)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f scripts/weather_per_match_safe.py ]; then
            python scripts/weather_per_match_safe.py --in "data/in/matches_source.csv" --out-dir "${OUT_DIR}"
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado pelo per-match"; exit 17; }
          else
            [ -f scripts/weather_snapshot_safe.py ] || { echo "::error::scripts/weather_snapshot_safe.py não encontrado"; exit 17; }
            [ -n "${WEATHER_LAT:-}" ] && [ -n "${WEATHER_LON:-}" ] || { echo "::error::WEATHER_LAT/WEATHER_LON não definidos (repo Vars)"; exit 17; }
            python scripts/weather_snapshot_safe.py --out-dir "${OUT_DIR}" --lat "${WEATHER_LAT}" --lon "${WEATHER_LON}"
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado"; exit 17; }
          fi
          head -n 5 "${OUT_DIR}/weather.csv" || true

      - name: Injuries/Suspensions (API-Football via RapidAPI) — opcional
        env:
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${X_RAPIDAPI_KEY:-}" ]; then
            echo "::notice::X_RAPIDAPI_KEY ausente — pulando injuries."
            # gera arquivo vazio porém válido
            echo "team_id,team_name,player_name,player_age,player_position,type,reason,fixture_id,fixture_date,status,last_update" > "${OUT_DIR}/injuries.csv"
            exit 0
          fi
          [ -f scripts/apifootball_injuries_safe.py ] || { echo "::error::scripts/apifootball_injuries_safe.py não encontrado"; exit 18; }
          python scripts/apifootball_injuries_safe.py --out-dir "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/injuries.csv" || { echo "::error::injuries.csv não gerado"; exit 18; }
          head -n 5 "${OUT_DIR}/injuries.csv" || true

      - name: Predict (market baseline)
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }
          head -n 20 "${OUT_DIR}/predictions_market.csv" || true

      - name: Features - Univariado
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/features_univariado.py ] || { echo "::error::scripts/features_univariado.py não encontrado"; exit 21; }
          python scripts/features_univariado.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_univariado.csv" || { echo "::error::features_univariado.csv não gerado"; exit 21; }
          head -n 10 "${OUT_DIR}/features_univariado.csv" || true

      - name: Features - Bivariado & xG proxy
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/features_bivariado_xg.py ] || { echo "::error::scripts/features_bivariado_xg.py não encontrado"; exit 22; }
          python scripts/features_bivariado_xg.py --rodada "${OUT_DIR}" --season "${SEASON}" --debug
          test -s "${OUT_DIR}/features_bivariado.csv" || { echo "::error::features_bivariado.csv não gerado"; exit 22; }
          test -s "${OUT_DIR}/features_xg.csv" || { echo "::error::features_xg.csv não gerado"; exit 22; }
          head -n 10 "${OUT_DIR}/features_bivariado.csv" || true
          head -n 10 "${OUT_DIR}/features_xg.csv" || true

      - name: Blend models
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          python scripts/blend_models.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_blend.csv" || { echo "::error::predictions_blend.csv não gerado"; exit 24; }
          head -n 10 "${OUT_DIR}/predictions_blend.csv" || true

      - name: Calibrate probabilities
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }
          head -n 10 "${OUT_DIR}/calibrated_probs.csv" || true

      - name: Kelly sizing & stakes
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }
          head -n 20 "${OUT_DIR}/kelly_stakes.csv" || true

      - name: Build Cartão Loteca
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/build_cartao.py ] || { echo "::error::scripts/build_cartao.py não encontrado"; exit 26; }
          python scripts/build_cartao.py --rodada "${OUT_DIR}"
          test -s "${OUT_DIR}/loteca_cartao.txt" || { echo "::error::loteca_cartao.txt não gerado"; exit 26; }
          echo "==== CARTÃO LOTECA ===="
          cat "${OUT_DIR}/loteca_cartao.txt" || true
          echo "========================"

      - name: Sanity / Reality check
        shell: bash
        run: |
          set -euo pipefail
          [ -f scripts/sanity_reality_check.py ] || { echo "::error::scripts/sanity_reality_check.py não encontrado"; exit 27; }
          python scripts/sanity_reality_check.py --rodada "${OUT_DIR}"
          echo "Sanity OK."

      - name: (Opcional) Publicar no Weights & Biases
        env:
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${WANDB_API_KEY:-}" ]; then
            echo "Biblioteca 'wandb' não instalada ou chave ausente. Pulando publicação."
            exit 0
          fi
          if [ -f scripts/wandb_publish.py ]; then
            python scripts/wandb_publish.py --rodada "${OUT_DIR}" || echo "::warning::Falha ao publicar no W&B (continuando)."
          else
            echo "::notice::wandb_publish.py ausente — pulando publicação."
          fi

      - name: Upload artifacts (resultados)
        uses: actions/upload-artifact@v4
        with:
          name: loteca-${{ env.RODADA_ID }}
          path: |
            ${{ env.OUT_DIR }}/odds_theoddsapi.csv
            ${{ env.OUT_DIR }}/odds_apifootball.csv
            ${{ env.OUT_DIR }}/odds_consensus.csv
            ${{ env.OUT_DIR }}/predictions_market.csv
            ${{ env.OUT_DIR }}/features_univariado.csv
            ${{ env.OUT_DIR }}/features_bivariado.csv
            ${{ env.OUT_DIR }}/features_xg.csv
            ${{ env.OUT_DIR }}/predictions_blend.csv
            ${{ env.OUT_DIR }}/calibrated_probs.csv
            ${{ env.OUT_DIR }}/kelly_stakes.csv
            ${{ env.OUT_DIR }}/loteca_cartao.txt
            ${{ env.OUT_DIR }}/news.csv
            ${{ env.OUT_DIR }}/injuries.csv
            ${{ env.OUT_DIR }}/weather.csv
            ${{ env.OUT_DIR }}/matches_whitelist.csv
            ${{ env.OUT_DIR }}/reality_report.json
            ${{ env.OUT_DIR }}/reality_report.txt