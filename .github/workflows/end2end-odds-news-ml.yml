name: end2end-odds-news-ml

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      # ===== Configs de rodada / bankroll =====
      SEASON: "2025"
      REGIONS: "uk,eu,us,au"
      BANKROLL: "1000"
      KELLY_FRACTION: "0.5"
      KELLY_CAP: "0.1"
      KELLY_TOP_N: "14"
      ROUND_TO: "1"
      DEBUG: "true"

      # ===== Caminhos =====
      PYTHONPATH: ${{ github.workspace }}
      RODADA_ID: ${{ github.run_id }}
      OUT_DIR: data/out/${{ github.run_id }}

      # ===== Segredos =====
      THEODDS_API_KEY: ${{ secrets.THEODDS_API_KEY }}
      X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
      NEWSAPI_KEY: ${{ secrets.NEWSAPI_KEY }}
      WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependências
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy requests scikit-learn pyyaml python-dateutil fastparquet pyarrow
          fi

      - name: Preparar diretórios e entrada
        run: |
          set -euo pipefail
          mkdir -p "${OUT_DIR}" data/in
          # Validação da whitelist obrigatória
          WL="data/in/matches_whitelist.csv"
          if [ ! -s "$WL" ]; then
            echo "::error::Arquivo obrigatório ausente: $WL"
            exit 3
          fi
          # Checar colunas mínimas (match_id,home,away)
          header="$(head -n1 "$WL" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Whitelist sem coluna '$c'"; exit 3; }
          done
          cp "$WL" "${OUT_DIR}/matches_whitelist.csv"

      # ================== INGESTÃO DE ODDS (OBRIGATÓRIA) ==================

      - name: Ingest TheOddsAPI (obrigatório)
        env:
          TIMEOUT_S: "25"
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_theoddsapi_safe.py ] || { echo "::error::scripts/ingest_odds_theoddsapi_safe.py não encontrado."; exit 5; }
          [ -n "${THEODDS_API_KEY:-}" ] || { echo "::error::THEODDS_API_KEY vazio"; exit 5; }
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_theoddsapi_safe --rodada "${OUT_DIR}" --regions "${REGIONS}" --debug && break
            a=$((a+1)); echo "retry theoddsapi: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_theoddsapi.csv"
          test -s "$OUT" || { echo "::error::odds_theoddsapi.csv não gerado"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_theoddsapi.csv"; exit 5; }
          done

      - name: Ingest API-Football (RapidAPI) (obrigatório)
        run: |
          set -euo pipefail
          [ -f scripts/ingest_odds_apifootball_rapidapi.py ] || { echo "::error::scripts/ingest_odds_apifootball_rapidapi.py não encontrado."; exit 5; }
          [ -n "${X_RAPIDAPI_KEY:-}" ] || { echo "::error::X_RAPIDAPI_KEY vazio"; exit 5; }
          # Checar whitelist mínima antes de chamar
          WL="${OUT_DIR}/matches_whitelist.csv"
          header="$(head -n1 "$WL" | tr -d '\r')"
          for c in match_id home away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::matches_whitelist.csv precisa das colunas match_id,home,away"; exit 5; }
          done
          a=0
          until [ $a -ge 3 ]; do
            python -m scripts.ingest_odds_apifootball_rapidapi --rodada "${OUT_DIR}" --season "${SEASON}" --debug && break
            a=$((a+1)); echo "retry apifootball: $a/3"; sleep $((5*a))
          done
          OUT="${OUT_DIR}/odds_apifootball.csv"
          test -s "$OUT" || { echo "::error::odds_apifootball.csv não gerado"; exit 5; }
          header="$(head -n1 "$OUT" | tr -d '\r')"
          for c in match_id home away odds_home odds_draw odds_away; do
            echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_apifootball.csv"; exit 5; }
          done

      - name: Consolidar odds (STRICT)
        run: |
          set -euo pipefail
          [ -f scripts/consensus_odds_safe.py ] || { echo "::error::scripts/consensus_odds_safe.py não encontrado"; exit 6; }
          # --strict é flag booleana (sem 'true'/'false')
          python -m scripts.consensus_odds_safe --rodada "${OUT_DIR}" --strict
          OUT_FILE="${OUT_DIR}/odds_consensus.csv"
          test -s "$OUT_FILE" || { echo "::error::odds_consensus.csv não gerado"; exit 6; }
          header="$(head -n1 "$OUT_FILE" | tr -d '\r')"
          # Aceitar 'home/away' ou 'team_home/team_away' para compatibilidade
          if echo "$header" | grep -qiE "(^|,)home(,|$)"; then
            for c in home away odds_home odds_draw odds_away; do
              echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
            done
          else
            for c in team_home team_away odds_home odds_draw odds_away; do
              echo "$header" | grep -qiE "(^|,)$c(,|$)" || { echo "::error::Coluna '$c' ausente em odds_consensus.csv"; exit 6; }
            done
          fi

      # ================== WEATHER (obrigatório, com retry) ==================
      - name: Clima por partida (Open-Meteo)
        run: |
          set -euo pipefail
          if [ -f scripts/weather_per_match_safe.py ]; then
            a=0
            until [ $a -ge 3 ]; do
              python scripts/weather_per_match_safe.py --in "${OUT_DIR}/matches_whitelist.csv" --out-dir "${OUT_DIR}" --debug && break
              a=$((a+1)); echo "retry weather: $a/3"; sleep $((5*a))
            done
            test -s "${OUT_DIR}/weather.csv" || { echo "::error::weather.csv não gerado pelo per-match"; exit 17; }
          else
            echo "::error::scripts/weather_per_match_safe.py não encontrado"; exit 17
          fi

      # ================== PREVISÃO A PARTIR DAS ODDS ==================
      - name: Prever a partir das odds (market baseline)
        run: |
          set -euo pipefail
          [ -f scripts/predict_from_odds.py ] || { echo "::error::scripts/predict_from_odds.py não encontrado"; exit 7; }
          python scripts/predict_from_odds.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/predictions_market.csv" || { echo "::error::predictions_market.csv não gerado"; exit 7; }

      - name: Calibrar probabilidades
        run: |
          set -euo pipefail
          [ -f scripts/calibrate_probs.py ] || { echo "::error::scripts/calibrate_probs.py não encontrado"; exit 23; }
          python scripts/calibrate_probs.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/calibrated_probs.csv" || { echo "::error::calibrated_probs.csv não gerado"; exit 23; }

      # ================== FEATURES / CONTEXTO ==================
      - name: Gerar features de contexto
        run: |
          set -euo pipefail
          [ -f scripts/feature_join_context.py ] || { echo "::error::scripts/feature_join_context.py não encontrado"; exit 28; }
          python scripts/feature_join_context.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/context_features.csv" || { echo "::error::context_features.csv não gerado"; exit 28; }

      # ================== BLEND (calibrado + mercado + contexto) ==================
      - name: Blend de modelos
        run: |
          set -euo pipefail
          [ -f scripts/blend_models.py ] || { echo "::error::scripts/blend_models.py não encontrado"; exit 24; }
          # --use-context é flag (não passe 'true')
          python scripts/blend_models.py --rodada "${OUT_DIR}" --w_calib 0.65 --w_market 0.35 --use-context --context-strength 0.15 --debug
          test -s "${OUT_DIR}/predictions_final.csv" || { echo "::error::predictions_final.csv não gerado"; exit 24; }

      # ================== KELLY / PUBLICAÇÃO ==================
      - name: Publicar stakes (Kelly)
        run: |
          set -euo pipefail
          [ -f scripts/publish_kelly.py ] || { echo "::error::scripts/publish_kelly.py não encontrado"; exit 25; }
          python scripts/publish_kelly.py --rodada "${OUT_DIR}" --debug
          test -s "${OUT_DIR}/kelly_stakes.csv" || { echo "::error::kelly_stakes.csv não gerado"; exit 25; }

      - name: Artefatos da rodada
        uses: actions/upload-artifact@v4
        with:
          name: rodada-${{ env.RODADA_ID }}
          path: |
            ${{ env.OUT_DIR }}/**
            !${{ env.OUT_DIR }}/**/*.parquet
          if-no-files-found: error